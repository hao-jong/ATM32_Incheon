/*
 * lcd1602.c
 *
 *  Created on: Nov 21, 2024
 *      Author: user
 *      Function : 1602 LCD device control
 */
#include <stdio.h>
#include "main.h"
extern I2C_HandleTypeDef hi2c2;
#define I2C_ADDR 0x4E  //  0x27 << 1

void lcd_command(char cmd) // cmd_bit : abcd efgh
{
	char n1, n2;
	char n3, n4;
	char dd[4];
	n1 = cmd & 0xf0;			// n1: abcd 0000 ==> upper nibble
	n2 = (cmd & 0x0f) << 4;		// n2: efgh 0000 ==> lower nibble to upper
	n3 = (1<<3)|(1<<2)	|0|0; //RW|EN|NC|RS; 0x0c
	n4 = (1<<3)|	0	|0|0; //RW|EN|NC|RS; 0x08

	dd[0] = n1 | n3;			//
	dd[1] = n1 | n4;
	dd[2] = n2 | n3;
	dd[3] = n2 | n4;
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR, dd, 4, 10);

}
void lcd_data(char ch)
{
	char n1, n2;
	char n3, n4;
	char dd[4];
	n1 = ch & 0xf0;			// n1: abcd 0000 ==> upper nibble
	n2 = (ch & 0x0f) << 4;		// n2: efgh 0000 ==> lower nibble to upper
	n3 = (1<<3)|(1<<2)	|0|(1<<0); //RW|EN|NC|RS; 0x0d
	n4 = (1<<3)|	0	|0|(1<<0); //RW|EN|NC|RS; 0x09

	dd[0] = n1 | n3;			//
	dd[1] = n1 | n4;
	dd[2] = n2 | n3;
	dd[3] = n2 | n4;
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR, dd, 4, 10);
}
void lcd_init()
{
	lcd_command(0x01); // screen clear
	lcd_command(0x02); // cursor home
	lcd_command(0x06);
	lcd_command(0x0f);
}


int I2C_scan()
{
		for(int addr = 0; addr <127; addr++)
	{

		if(addr%16 == 0)
		{
			printf("\r\n");
		}

		if(HAL_I2C_IsDeviceReady(&hi2c2,addr,1,10) == HAL_OK)
		{
			printf("  %02x ", addr);
		}

		else
		{
			printf("  .  ");
		}


	}
}


void lcd_test()
{
	lcd_data('H');
	lcd_data('e');
	lcd_data('l');
	lcd_data('l');
	lcd_data('o');

}

void lcd_print(char *str)
{
	while(*str)
	{
		lcd_data(*str++);
	}
}

void lcd_printEx(char *str, int ln)
{
	if(ln == 0)
	{
		lcd_command(0x80);

	}
	if(ln == 1)
	{
		lcd_command(0xc0);

	}
	lcd_print(str);
}

int ln2 = 0; // current line nu.
char sBuf[20]; //2nd line string
void lcd_printEx2(char *str, int ln)
{
	if(ln2++ == 0)
	{
		lcd_command(0x80); return;

	}
	else if(ln2 == 1)
	{
		lcd_command(0xc0);
		strcpy(sBuf, str); return;
	}
	lcd_print(str);
}

void num2char4(int num, char* buffer)
{
    // 범위 체크 (0-9999)
    if (num > 9999) num = 9999;
    if (num < 0) num = 0;

    // 각 자릿수를 문자로 변환
    buffer[0] = '0' + (num / 1000);
    buffer[1] = '0' + ((num % 1000) / 100);
    buffer[2] = '0' + ((num % 100) / 10);
    buffer[3] = '0' + (num % 10);
    buffer[4] = '\0';  // 문자열 종료
}
