
Test012-MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b698  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800b838  0800b838  0001b838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd98  0800bd98  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd98  0800bd98  0001bd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda0  0800bda0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda4  0800bda4  0001bda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800bda8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e0  200001d8  0800bf80  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044b8  0800bf80  000244b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165d3  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035c1  00000000  00000000  0003681e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00039de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea3  00000000  00000000  0003b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019591  00000000  00000000  0003bf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b59  00000000  00000000  00055504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099189  00000000  00000000  0006b05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000641c  00000000  00000000  001041e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010a604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b820 	.word	0x0800b820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b820 	.word	0x0800b820

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <vApplicationGetIdleTaskMemory+0x2c>)
 8001010:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <vApplicationGetIdleTaskMemory+0x30>)
 8001016:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200001f4 	.word	0x200001f4
 8001030:	20000294 	.word	0x20000294

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b09e      	sub	sp, #120	; 0x78
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f000 fef7 	bl	8001e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f89d 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 fa75 	bl	8001530 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001046:	f000 fa49 	bl	80014dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800104a:	f000 f9ed 	bl	8001428 <MX_TIM3_Init>
  MX_TIM1_Init();
 800104e:	f000 f8ff 	bl	8001250 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001052:	f000 f99d 	bl	8001390 <MX_TIM2_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8001056:	2300      	movs	r3, #0
 8001058:	673b      	str	r3, [r7, #112]	; 0x70
 800105a:	2300      	movs	r3, #0
 800105c:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800105e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001062:	2101      	movs	r1, #1
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fc12 	bl	800488e <osSemaphoreCreate>
 800106a:	4603      	mov	r3, r0
 800106c:	4a35      	ldr	r2, [pc, #212]	; (8001144 <main+0x110>)
 800106e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityAboveNormal, 0, 512);
 8001070:	4b35      	ldr	r3, [pc, #212]	; (8001148 <main+0x114>)
 8001072:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001076:	461d      	mov	r5, r3
 8001078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8001084:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fb9f 	bl	80047ce <osThreadCreate>
 8001090:	4603      	mov	r3, r0
 8001092:	4a2e      	ldr	r2, [pc, #184]	; (800114c <main+0x118>)
 8001094:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 512);
 8001096:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <main+0x11c>)
 8001098:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800109c:	461d      	mov	r5, r3
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80010aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fb8c 	bl	80047ce <osThreadCreate>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <main+0x120>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 512);
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <main+0x124>)
 80010be:	f107 041c 	add.w	r4, r7, #28
 80010c2:	461d      	mov	r5, r3
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fb79 	bl	80047ce <osThreadCreate>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <main+0x128>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityLow, 0, 512);
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <main+0x12c>)
 80010e4:	463c      	mov	r4, r7
 80010e6:	461d      	mov	r5, r3
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80010f4:	463b      	mov	r3, r7
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fb68 	bl	80047ce <osThreadCreate>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <main+0x130>)
 8001102:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart ("DC Motor & Motor Driver Test");
 8001104:	4818      	ldr	r0, [pc, #96]	; (8001168 <main+0x134>)
 8001106:	f000 fb4f 	bl	80017a8 <ProgramStart>
    HAL_GPIO_WritePin(Dir_A1_GPIO_Port, Dir_A1_Pin, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	2120      	movs	r1, #32
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <main+0x138>)
 8001110:	f001 f94c 	bl	80023ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Dir_A2_GPIO_Port, Dir_A2_Pin, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2108      	movs	r1, #8
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <main+0x138>)
 800111a:	f001 f947 	bl	80023ac <HAL_GPIO_WritePin>
    HAL_TIM_Base_Start(&htim2);
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <main+0x13c>)
 8001120:	f001 fe78 	bl	8002e14 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001124:	2100      	movs	r1, #0
 8001126:	4813      	ldr	r0, [pc, #76]	; (8001174 <main+0x140>)
 8001128:	f001 ff80 	bl	800302c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800112c:	2108      	movs	r1, #8
 800112e:	4812      	ldr	r0, [pc, #72]	; (8001178 <main+0x144>)
 8001130:	f001 ff7c 	bl	800302c <HAL_TIM_PWM_Start>
    osSemaphoreRelease(myBinarySem01Handle);
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <main+0x110>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fc29 	bl	8004990 <osSemaphoreRelease>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800113e:	f003 fb3f 	bl	80047c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  int ccr1 = 0;
//  int op = 10;
  while (1)
 8001142:	e7fe      	b.n	8001142 <main+0x10e>
 8001144:	200005c4 	.word	0x200005c4
 8001148:	0800b864 	.word	0x0800b864
 800114c:	200005b4 	.word	0x200005b4
 8001150:	0800b88c 	.word	0x0800b88c
 8001154:	200005b8 	.word	0x200005b8
 8001158:	0800b8b4 	.word	0x0800b8b4
 800115c:	200005bc 	.word	0x200005bc
 8001160:	0800b8dc 	.word	0x0800b8dc
 8001164:	200005c0 	.word	0x200005c0
 8001168:	0800b838 	.word	0x0800b838
 800116c:	40020400 	.word	0x40020400
 8001170:	200004dc 	.word	0x200004dc
 8001174:	20000524 	.word	0x20000524
 8001178:	20000494 	.word	0x20000494

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	; 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	2230      	movs	r2, #48	; 0x30
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f006 ff4c 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <SystemClock_Config+0xcc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <SystemClock_Config+0xcc>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	; 0x40
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <SystemClock_Config+0xd0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a21      	ldr	r2, [pc, #132]	; (800124c <SystemClock_Config+0xd0>)
 80011c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2310      	movs	r3, #16
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e4:	2302      	movs	r3, #2
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011ec:	2310      	movs	r3, #16
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011f6:	2304      	movs	r3, #4
 80011f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011fa:	2304      	movs	r3, #4
 80011fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	4618      	mov	r0, r3
 8001204:	f001 f8ec 	bl	80023e0 <HAL_RCC_OscConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800120e:	f000 fa6b 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	230f      	movs	r3, #15
 8001214:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2302      	movs	r3, #2
 8001218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2102      	movs	r1, #2
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fb4e 	bl	80028d0 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800123a:	f000 fa55 	bl	80016e8 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	; 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b096      	sub	sp, #88	; 0x58
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2220      	movs	r2, #32
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f006 fecd 	bl	8008028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128e:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <MX_TIM1_Init+0x138>)
 8001290:	4a3e      	ldr	r2, [pc, #248]	; (800138c <MX_TIM1_Init+0x13c>)
 8001292:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001294:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <MX_TIM1_Init+0x138>)
 8001296:	2253      	movs	r2, #83	; 0x53
 8001298:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <MX_TIM1_Init+0x138>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <MX_TIM1_Init+0x138>)
 80012a2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80012a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <MX_TIM1_Init+0x138>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_TIM1_Init+0x138>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b34      	ldr	r3, [pc, #208]	; (8001388 <MX_TIM1_Init+0x138>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ba:	4833      	ldr	r0, [pc, #204]	; (8001388 <MX_TIM1_Init+0x138>)
 80012bc:	f001 fd5a 	bl	8002d74 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012c6:	f000 fa0f 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d4:	4619      	mov	r1, r3
 80012d6:	482c      	ldr	r0, [pc, #176]	; (8001388 <MX_TIM1_Init+0x138>)
 80012d8:	f002 f90a 	bl	80034f0 <HAL_TIM_ConfigClockSource>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012e2:	f000 fa01 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012e6:	4828      	ldr	r0, [pc, #160]	; (8001388 <MX_TIM1_Init+0x138>)
 80012e8:	f001 fe50 	bl	8002f8c <HAL_TIM_PWM_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012f2:	f000 f9f9 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001302:	4619      	mov	r1, r3
 8001304:	4820      	ldr	r0, [pc, #128]	; (8001388 <MX_TIM1_Init+0x138>)
 8001306:	f002 fcbb 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001310:	f000 f9ea 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001314:	2360      	movs	r3, #96	; 0x60
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10-1;
 8001318:	2309      	movs	r3, #9
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	2208      	movs	r2, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <MX_TIM1_Init+0x138>)
 800133a:	f002 f817 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001344:	f000 f9d0 	bl	80016e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM1_Init+0x138>)
 800136c:	f002 fcf6 	bl	8003d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001376:	f000 f9b7 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM1_Init+0x138>)
 800137c:	f000 faba 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 8001380:	bf00      	nop
 8001382:	3758      	adds	r7, #88	; 0x58
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000494 	.word	0x20000494
 800138c:	40010000 	.word	0x40010000

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_TIM2_Init+0x94>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_TIM2_Init+0x94>)
 80013b6:	2254      	movs	r2, #84	; 0x54
 80013b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_TIM2_Init+0x94>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_TIM2_Init+0x94>)
 80013c2:	f04f 32ff 	mov.w	r2, #4294967295
 80013c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_TIM2_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_TIM2_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d4:	4813      	ldr	r0, [pc, #76]	; (8001424 <MX_TIM2_Init+0x94>)
 80013d6:	f001 fccd 	bl	8002d74 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e0:	f000 f982 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_TIM2_Init+0x94>)
 80013f2:	f002 f87d 	bl	80034f0 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 f974 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_TIM2_Init+0x94>)
 800140e:	f002 fc37 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001418:	f000 f966 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200004dc 	.word	0x200004dc

08001428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_TIM3_Init+0xac>)
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <MX_TIM3_Init+0xb0>)
 800144e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <MX_TIM3_Init+0xac>)
 8001452:	2253      	movs	r2, #83	; 0x53
 8001454:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_TIM3_Init+0xac>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_TIM3_Init+0xac>)
 800145e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_TIM3_Init+0xac>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM3_Init+0xac>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001470:	4818      	ldr	r0, [pc, #96]	; (80014d4 <MX_TIM3_Init+0xac>)
 8001472:	f001 fd8b 	bl	8002f8c <HAL_TIM_PWM_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800147c:	f000 f934 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_TIM3_Init+0xac>)
 8001490:	f002 fbf6 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800149a:	f000 f925 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	; 0x60
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_TIM3_Init+0xac>)
 80014b6:	f001 ff59 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014c0:	f000 f912 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_TIM3_Init+0xac>)
 80014c6:	f000 fa15 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000524 	.word	0x20000524
 80014d8:	40000400 	.word	0x40000400

080014dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_USART2_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001514:	f002 fc88 	bl	8003e28 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f000 f8e3 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000056c 	.word	0x2000056c
 800152c:	40004400 	.word	0x40004400

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <MX_GPIO_Init+0x110>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a3c      	ldr	r2, [pc, #240]	; (8001640 <MX_GPIO_Init+0x110>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <MX_GPIO_Init+0x110>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <MX_GPIO_Init+0x110>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a35      	ldr	r2, [pc, #212]	; (8001640 <MX_GPIO_Init+0x110>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <MX_GPIO_Init+0x110>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_GPIO_Init+0x110>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <MX_GPIO_Init+0x110>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_GPIO_Init+0x110>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <MX_GPIO_Init+0x110>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <MX_GPIO_Init+0x110>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <MX_GPIO_Init+0x110>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2120      	movs	r1, #32
 80015ba:	4822      	ldr	r0, [pc, #136]	; (8001644 <MX_GPIO_Init+0x114>)
 80015bc:	f000 fef6 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Dir_A2_Pin|Dir_A1_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2128      	movs	r1, #40	; 0x28
 80015c4:	4820      	ldr	r0, [pc, #128]	; (8001648 <MX_GPIO_Init+0x118>)
 80015c6:	f000 fef1 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	481a      	ldr	r0, [pc, #104]	; (800164c <MX_GPIO_Init+0x11c>)
 80015e2:	f000 fd47 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015e6:	2320      	movs	r3, #32
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_GPIO_Init+0x114>)
 80015fe:	f000 fd39 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <MX_GPIO_Init+0x114>)
 8001618:	f000 fd2c 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dir_A2_Pin Dir_A1_Pin */
  GPIO_InitStruct.Pin = Dir_A2_Pin|Dir_A1_Pin;
 800161c:	2328      	movs	r3, #40	; 0x28
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_GPIO_Init+0x118>)
 8001634:	f000 fd1e 	bl	8002074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40020800 	.word	0x40020800

08001650 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <StartTask01+0x3c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f003 f948 	bl	80048f4 <osSemaphoreWait>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10b      	bne.n	8001682 <StartTask01+0x32>
		 {
		  int distance = Distance();
 800166a:	f000 fb5d 	bl	8001d28 <Distance>
 800166e:	60f8      	str	r0, [r7, #12]
		  printf("dist = %d\r\n", distance);
 8001670:	68f9      	ldr	r1, [r7, #12]
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <StartTask01+0x40>)
 8001674:	f006 fb72 	bl	8007d5c <iprintf>
		  osSemaphoreRelease(myBinarySem01Handle);
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <StartTask01+0x3c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f003 f987 	bl	8004990 <osSemaphoreRelease>
		 }
    osDelay(100);
 8001682:	2064      	movs	r0, #100	; 0x64
 8001684:	f003 f8ef 	bl	8004866 <osDelay>
		 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001688:	e7e6      	b.n	8001658 <StartTask01+0x8>
 800168a:	bf00      	nop
 800168c:	200005c4 	.word	0x200005c4
 8001690:	0800b8f8 	.word	0x0800b8f8

08001694 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800169c:	2064      	movs	r0, #100	; 0x64
 800169e:	f003 f8e2 	bl	8004866 <osDelay>
 80016a2:	e7fb      	b.n	800169c <StartTask02+0x8>

080016a4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80016ac:	2064      	movs	r0, #100	; 0x64
 80016ae:	f003 f8da 	bl	8004866 <osDelay>
 80016b2:	e7fb      	b.n	80016ac <StartTask03+0x8>

080016b4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f003 f8d2 	bl	8004866 <osDelay>
 80016c2:	e7fb      	b.n	80016bc <StartTask04+0x8>

080016c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016d6:	f000 fbcb 	bl	8001e70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40014400 	.word	0x40014400

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <__io_getchar>:


extern UART_HandleTypeDef huart2;

int __io_getchar(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	int ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK)
 80016fa:	bf00      	nop
 80016fc:	1d39      	adds	r1, r7, #4
 80016fe:	230a      	movs	r3, #10
 8001700:	2201      	movs	r2, #1
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <__io_getchar+0x28>)
 8001704:	f002 fc6b 	bl	8003fde <HAL_UART_Receive>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <__io_getchar+0x1e>
	{
		return ch;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	e7ff      	b.n	8001712 <__io_getchar+0x1e>
	}
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000056c 	.word	0x2000056c

08001720 <__io_putchar>:

int __io_putchar(int ch)
	{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001728:	1d39      	adds	r1, r7, #4
 800172a:	230a      	movs	r3, #10
 800172c:	2201      	movs	r2, #1
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <__io_putchar+0x20>)
 8001730:	f002 fbca 	bl	8003ec8 <HAL_UART_Transmit>
		return ch;
 8001734:	687b      	ldr	r3, [r7, #4]
	}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000056c 	.word	0x2000056c

08001744 <Standby>:

void Standby()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8001748:	bf00      	nop
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	4804      	ldr	r0, [pc, #16]	; (8001760 <Standby+0x1c>)
 8001750:	f000 fe14 	bl	800237c <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f7      	bne.n	800174a <Standby+0x6>
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40020800 	.word	0x40020800

08001764 <cls>:
void cls()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	printf("\033[2j");
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <cls+0x10>)
 800176a:	f006 faf7 	bl	8007d5c <iprintf>

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	0800b904 	.word	0x0800b904

08001778 <Cursor>:
void Cursor(int x, int y)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	char buf [20];
	sprintf(buf,"\033[%d;%dH",y,x);
 8001782:	f107 000c 	add.w	r0, r7, #12
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4906      	ldr	r1, [pc, #24]	; (80017a4 <Cursor+0x2c>)
 800178c:	f006 fb54 	bl	8007e38 <siprintf>
	puts(buf);
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4618      	mov	r0, r3
 8001796:	f006 fb47 	bl	8007e28 <puts>
}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800b90c 	.word	0x0800b90c

080017a8 <ProgramStart>:
void ProgramStart (char * str)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	cls();
 80017b0:	f7ff ffd8 	bl	8001764 <cls>
	Cursor(0,0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff ffde 	bl	8001778 <Cursor>
	printf("Program Start - %s\r\n",str);
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <ProgramStart+0x30>)
 80017c0:	f006 facc 	bl	8007d5c <iprintf>
	printf("Press Blue-button(b1)to start\r\n");
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <ProgramStart+0x34>)
 80017c6:	f006 fb2f 	bl	8007e28 <puts>
	Standby();
 80017ca:	f7ff ffbb 	bl	8001744 <Standby>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	0800b918 	.word	0x0800b918
 80017dc:	0800b930 	.word	0x0800b930

080017e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_MspInit+0x54>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_MspInit+0x54>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x54>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_MspInit+0x54>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_MspInit+0x54>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_MspInit+0x54>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	210f      	movs	r1, #15
 8001822:	f06f 0001 	mvn.w	r0, #1
 8001826:	f000 fbfb 	bl	8002020 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <HAL_TIM_Base_MspInit+0x70>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d116      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_TIM_Base_MspInit+0x74>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_TIM_Base_MspInit+0x74>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_TIM_Base_MspInit+0x74>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	210f      	movs	r1, #15
 800186a:	2019      	movs	r0, #25
 800186c:	f000 fbd8 	bl	8002020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001870:	2019      	movs	r0, #25
 8001872:	f000 fbf1 	bl	8002058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001876:	e012      	b.n	800189e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001880:	d10d      	bne.n	800189e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_TIM_Base_MspInit+0x74>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_TIM_Base_MspInit+0x74>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_TIM_Base_MspInit+0x74>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40010000 	.word	0x40010000
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_TIM_PWM_MspInit+0x3c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10d      	bne.n	80018de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_TIM_PWM_MspInit+0x40>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_TIM_PWM_MspInit+0x40>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_TIM_PWM_MspInit+0x40>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40000400 	.word	0x40000400
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_TIM_MspPostInit+0xb0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11f      	bne.n	8001956 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 8001932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001944:	2301      	movs	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4817      	ldr	r0, [pc, #92]	; (80019ac <HAL_TIM_MspPostInit+0xb8>)
 8001950:	f000 fb90 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001954:	e022      	b.n	800199c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <HAL_TIM_MspPostInit+0xbc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d11d      	bne.n	800199c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	6313      	str	r3, [r2, #48]	; 0x30
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800197c:	2310      	movs	r3, #16
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800198c:	2302      	movs	r3, #2
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <HAL_TIM_MspPostInit+0xc0>)
 8001998:	f000 fb6c 	bl	8002074 <HAL_GPIO_Init>
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40000400 	.word	0x40000400
 80019b4:	40020400 	.word	0x40020400

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <HAL_UART_MspInit+0x84>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d12b      	bne.n	8001a32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_UART_MspInit+0x88>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_UART_MspInit+0x88>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a12:	230c      	movs	r3, #12
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a22:	2307      	movs	r3, #7
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_UART_MspInit+0x8c>)
 8001a2e:	f000 fb21 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40004400 	.word	0x40004400
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_InitTick+0xd0>)
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <HAL_InitTick+0xd0>)
 8001a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a66:	6453      	str	r3, [r2, #68]	; 0x44
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_InitTick+0xd0>)
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 f946 	bl	8002d10 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a84:	f001 f930 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8001a88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <HAL_InitTick+0xd4>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	3b01      	subs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_InitTick+0xd8>)
 8001a9a:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_InitTick+0xdc>)
 8001a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_InitTick+0xd8>)
 8001aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_InitTick+0xd8>)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_InitTick+0xd8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_InitTick+0xd8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_InitTick+0xd8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001abe:	4818      	ldr	r0, [pc, #96]	; (8001b20 <HAL_InitTick+0xd8>)
 8001ac0:	f001 f958 	bl	8002d74 <HAL_TIM_Base_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d11b      	bne.n	8001b0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001ad2:	4813      	ldr	r0, [pc, #76]	; (8001b20 <HAL_InitTick+0xd8>)
 8001ad4:	f001 f9f8 	bl	8002ec8 <HAL_TIM_Base_Start_IT>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d111      	bne.n	8001b0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae6:	2019      	movs	r0, #25
 8001ae8:	f000 fab6 	bl	8002058 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	d808      	bhi.n	8001b04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001af2:	2200      	movs	r2, #0
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	2019      	movs	r0, #25
 8001af8:	f000 fa92 	bl	8002020 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_InitTick+0xe0>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e002      	b.n	8001b0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3730      	adds	r7, #48	; 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	431bde83 	.word	0x431bde83
 8001b20:	200005c8 	.word	0x200005c8
 8001b24:	40014400 	.word	0x40014400
 8001b28:	20000004 	.word	0x20000004

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b5e:	f001 fb15 	bl	800318c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b64:	f001 fb12 	bl	800318c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000494 	.word	0x20000494
 8001b70:	200005c8 	.word	0x200005c8

08001b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return 1;
 8001b78:	2301      	movs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_kill>:

int _kill(int pid, int sig)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b8e:	f006 faf3 	bl	8008178 <__errno>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2216      	movs	r2, #22
 8001b96:	601a      	str	r2, [r3, #0]
  return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_exit>:

void _exit (int status)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ffe7 	bl	8001b84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bb6:	e7fe      	b.n	8001bb6 <_exit+0x12>

08001bb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e00a      	b.n	8001be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bca:	f7ff fd93 	bl	80016f4 <__io_getchar>
 8001bce:	4601      	mov	r1, r0
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbf0      	blt.n	8001bca <_read+0x12>
  }

  return len;
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e009      	b.n	8001c18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fd87 	bl	8001720 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dbf1      	blt.n	8001c04 <_write+0x12>
  }
  return len;
 8001c20:	687b      	ldr	r3, [r7, #4]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_close>:

int _close(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c52:	605a      	str	r2, [r3, #4]
  return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_isatty>:

int _isatty(int file)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <_sbrk+0x5c>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <_sbrk+0x60>)
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <_sbrk+0x64>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <_sbrk+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d207      	bcs.n	8001cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc4:	f006 fa58 	bl	8008178 <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20020000 	.word	0x20020000
 8001cf4:	00000400 	.word	0x00000400
 8001cf8:	20000610 	.word	0x20000610
 8001cfc:	200044b8 	.word	0x200044b8

08001d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <SystemInit+0x20>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <SystemInit+0x20>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00
 8001d24:	00000000 	.word	0x00000000

08001d28 <Distance>:
	int t1 = htim1.Instance->CNT;
	while (htim1.Instance->CNT - t1 < us);

}
int Distance()
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
	int t1,t2;
	htim1.Instance->CNT = 0;
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <Distance+0xa8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
	//wait until Echo_High
	while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 0)
 8001d36:	e009      	b.n	8001d4c <Distance+0x24>
	{
		if(htim1.Instance->CNT > 30000)
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <Distance+0xa8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d902      	bls.n	8001d4c <Distance+0x24>
		{
			return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e038      	b.n	8001dbe <Distance+0x96>
	while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 0)
 8001d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d50:	4820      	ldr	r0, [pc, #128]	; (8001dd4 <Distance+0xac>)
 8001d52:	f000 fb13 	bl	800237c <HAL_GPIO_ReadPin>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ed      	beq.n	8001d38 <Distance+0x10>
		}
	}
	t1 = htim1.Instance->CNT;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <Distance+0xa8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	60fb      	str	r3, [r7, #12]
	while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 1)
 8001d64:	e00b      	b.n	8001d7e <Distance+0x56>
	{
		if(htim1.Instance->CNT > t1 + 30000)
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <Distance+0xa8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8001d72:	3330      	adds	r3, #48	; 0x30
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d902      	bls.n	8001d7e <Distance+0x56>
		{
			return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7c:	e01f      	b.n	8001dbe <Distance+0x96>
	while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 1)
 8001d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <Distance+0xac>)
 8001d84:	f000 fafa 	bl	800237c <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d0eb      	beq.n	8001d66 <Distance+0x3e>
		}
	}
	t2 = htim1.Instance->CNT;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <Distance+0xa8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	60bb      	str	r3, [r7, #8]
	double dist =(t2 - t1)*0.17; // mili meter
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbc9 	bl	8000534 <__aeabi_i2d>
 8001da2:	a309      	add	r3, pc, #36	; (adr r3, 8001dc8 <Distance+0xa0>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc2e 	bl	8000608 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 2300 	strd	r2, r3, [r7]
	return (int)dist;
 8001db4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001db8:	f7fe fed6 	bl	8000b68 <__aeabi_d2iz>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	5c28f5c3 	.word	0x5c28f5c3
 8001dcc:	3fc5c28f 	.word	0x3fc5c28f
 8001dd0:	20000494 	.word	0x20000494
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ddc:	f7ff ff90 	bl	8001d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001de2:	490d      	ldr	r1, [pc, #52]	; (8001e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df8:	4c0a      	ldr	r4, [pc, #40]	; (8001e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e06:	f006 f9bd 	bl	8008184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0a:	f7ff f913 	bl	8001034 <main>
  bx  lr    
 8001e0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e18:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e1c:	0800bda8 	.word	0x0800bda8
  ldr r2, =_sbss
 8001e20:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e24:	200044b8 	.word	0x200044b8

08001e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <ADC_IRQHandler>
	...

08001e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_Init+0x40>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <HAL_Init+0x40>)
 8001e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_Init+0x40>)
 8001e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_Init+0x40>)
 8001e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f000 f8d8 	bl	800200a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f7ff fdf4 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e60:	f7ff fcbe 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023c00 	.word	0x40023c00

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008
 8001e94:	20000614 	.word	0x20000614

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000614 	.word	0x20000614

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff4c 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002032:	f7ff ff61 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 8002036:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f7ff ffb1 	bl	8001fa4 <NVIC_EncodePriority>
 8002042:	4602      	mov	r2, r0
 8002044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff80 	bl	8001f50 <__NVIC_SetPriority>
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff54 	bl	8001f14 <__NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e159      	b.n	8002344 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 8148 	bne.w	800233e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a2 	beq.w	800233e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b57      	ldr	r3, [pc, #348]	; (800235c <HAL_GPIO_Init+0x2e8>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a56      	ldr	r2, [pc, #344]	; (800235c <HAL_GPIO_Init+0x2e8>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b54      	ldr	r3, [pc, #336]	; (800235c <HAL_GPIO_Init+0x2e8>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_GPIO_Init+0x2ec>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a49      	ldr	r2, [pc, #292]	; (8002364 <HAL_GPIO_Init+0x2f0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d019      	beq.n	8002276 <HAL_GPIO_Init+0x202>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a48      	ldr	r2, [pc, #288]	; (8002368 <HAL_GPIO_Init+0x2f4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_GPIO_Init+0x1fe>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a47      	ldr	r2, [pc, #284]	; (800236c <HAL_GPIO_Init+0x2f8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00d      	beq.n	800226e <HAL_GPIO_Init+0x1fa>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a46      	ldr	r2, [pc, #280]	; (8002370 <HAL_GPIO_Init+0x2fc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <HAL_GPIO_Init+0x1f6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a45      	ldr	r2, [pc, #276]	; (8002374 <HAL_GPIO_Init+0x300>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_GPIO_Init+0x1f2>
 8002262:	2304      	movs	r3, #4
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x204>
 8002266:	2307      	movs	r3, #7
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x204>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x204>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x204>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x204>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_GPIO_Init+0x2ec>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_GPIO_Init+0x304>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a2f      	ldr	r2, [pc, #188]	; (8002378 <HAL_GPIO_Init+0x304>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_GPIO_Init+0x304>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a24      	ldr	r2, [pc, #144]	; (8002378 <HAL_GPIO_Init+0x304>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_GPIO_Init+0x304>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230e:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <HAL_GPIO_Init+0x304>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_GPIO_Init+0x304>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002338:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <HAL_GPIO_Init+0x304>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f aea2 	bls.w	8002090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40013800 	.word	0x40013800
 8002364:	40020000 	.word	0x40020000
 8002368:	40020400 	.word	0x40020400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40013c00 	.word	0x40013c00

0800237c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e267      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d075      	beq.n	80024ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023fe:	4b88      	ldr	r3, [pc, #544]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d00c      	beq.n	8002424 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b85      	ldr	r3, [pc, #532]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002412:	2b08      	cmp	r3, #8
 8002414:	d112      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4b82      	ldr	r3, [pc, #520]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002422:	d10b      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4b7e      	ldr	r3, [pc, #504]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d05b      	beq.n	80024e8 <HAL_RCC_OscConfig+0x108>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d157      	bne.n	80024e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e242      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x74>
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a75      	ldr	r2, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x98>
 800245e:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6f      	ldr	r2, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6c      	ldr	r2, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002478:	4b69      	ldr	r3, [pc, #420]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a68      	ldr	r2, [pc, #416]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fcfe 	bl	8001e98 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff fcfa 	bl	8001e98 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e207      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xc0>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fcea 	bl	8001e98 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fce6 	bl	8001e98 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1f3      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0xe8>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b44      	ldr	r3, [pc, #272]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1c7      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4937      	ldr	r1, [pc, #220]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_OscConfig+0x244>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7ff fc9f 	bl	8001e98 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7ff fc9b 	bl	8001e98 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1a8      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4925      	ldr	r1, [pc, #148]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_OscConfig+0x244>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7ff fc7e 	bl	8001e98 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7ff fc7a 	bl	8001e98 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e187      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d036      	beq.n	8002638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_RCC_OscConfig+0x248>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7ff fc5e 	bl	8001e98 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7ff fc5a 	bl	8001e98 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e167      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x200>
 80025fe:	e01b      	b.n	8002638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_OscConfig+0x248>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7ff fc47 	bl	8001e98 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	e00e      	b.n	800262c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260e:	f7ff fc43 	bl	8001e98 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d907      	bls.n	800262c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e150      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
 8002620:	40023800 	.word	0x40023800
 8002624:	42470000 	.word	0x42470000
 8002628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ea      	bne.n	800260e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8097 	beq.w	8002774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b7d      	ldr	r3, [pc, #500]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a7c      	ldr	r2, [pc, #496]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b7a      	ldr	r3, [pc, #488]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b77      	ldr	r3, [pc, #476]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b74      	ldr	r3, [pc, #464]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a73      	ldr	r2, [pc, #460]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7ff fc03 	bl	8001e98 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7ff fbff 	bl	8001e98 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e10c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ea>
 80026bc:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70
 80026c8:	e01c      	b.n	8002704 <HAL_RCC_OscConfig+0x324>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x30c>
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a5e      	ldr	r2, [pc, #376]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a5b      	ldr	r2, [pc, #364]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0x324>
 80026ec:	4b58      	ldr	r3, [pc, #352]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a57      	ldr	r2, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
 80026f8:	4b55      	ldr	r3, [pc, #340]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a54      	ldr	r2, [pc, #336]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026fe:	f023 0304 	bic.w	r3, r3, #4
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7ff fbc4 	bl	8001e98 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7ff fbc0 	bl	8001e98 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0cb      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	4b49      	ldr	r3, [pc, #292]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ee      	beq.n	8002714 <HAL_RCC_OscConfig+0x334>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7ff fbae 	bl	8001e98 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7ff fbaa 	bl	8001e98 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0b5      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ee      	bne.n	8002740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d105      	bne.n	8002774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	4a38      	ldr	r2, [pc, #224]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a1 	beq.w	80028c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277e:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d05c      	beq.n	8002844 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d141      	bne.n	8002816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff fb7e 	bl	8001e98 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff fb7a 	bl	8001e98 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e087      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	019b      	lsls	r3, r3, #6
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	491b      	ldr	r1, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7ff fb53 	bl	8001e98 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7ff fb4f 	bl	8001e98 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e05c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x416>
 8002814:	e054      	b.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fb3c 	bl	8001e98 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7ff fb38 	bl	8001e98 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e045      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x444>
 8002842:	e03d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e038      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
 8002858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x4ec>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d028      	beq.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d121      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d11a      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0cc      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d90c      	bls.n	800290c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	494d      	ldr	r1, [pc, #308]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d044      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d119      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	2b03      	cmp	r3, #3
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e067      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4934      	ldr	r1, [pc, #208]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7ff fa6a 	bl	8001e98 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7ff fa66 	bl	8001e98 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e04f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d20c      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4916      	ldr	r1, [pc, #88]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a56:	f000 f821 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490a      	ldr	r1, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe ffe6 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	0800b958 	.word	0x0800b958
 8002a94:	20000000 	.word	0x20000000
 8002a98:	20000004 	.word	0x20000004

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa0:	b094      	sub	sp, #80	; 0x50
 8002aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab4:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d00d      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x40>
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	f200 80e1 	bhi.w	8002c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ace:	e0db      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ad4:	e0db      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad6:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ada:	e0d8      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002adc:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d063      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	2200      	movs	r2, #0
 8002afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
 8002b06:	2300      	movs	r3, #0
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4621      	mov	r1, r4
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	6139      	str	r1, [r7, #16]
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b40:	4659      	mov	r1, fp
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4651      	mov	r1, sl
 8002b50:	ebb2 0801 	subs.w	r8, r2, r1
 8002b54:	4659      	mov	r1, fp
 8002b56:	eb63 0901 	sbc.w	r9, r3, r1
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6e:	4690      	mov	r8, r2
 8002b70:	4699      	mov	r9, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	eb18 0303 	adds.w	r3, r8, r3
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	462b      	mov	r3, r5
 8002b7c:	eb49 0303 	adc.w	r3, r9, r3
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	024b      	lsls	r3, r1, #9
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b98:	4621      	mov	r1, r4
 8002b9a:	024a      	lsls	r2, r1, #9
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bac:	f7fe f874 	bl	8000c98 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb8:	e058      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	f04f 0000 	mov.w	r0, #0
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	0159      	lsls	r1, r3, #5
 8002be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be6:	0150      	lsls	r0, r2, #5
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4641      	mov	r1, r8
 8002bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c10:	eb63 050b 	sbc.w	r5, r3, fp
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	00eb      	lsls	r3, r5, #3
 8002c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c22:	00e2      	lsls	r2, r4, #3
 8002c24:	4614      	mov	r4, r2
 8002c26:	461d      	mov	r5, r3
 8002c28:	4643      	mov	r3, r8
 8002c2a:	18e3      	adds	r3, r4, r3
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	464b      	mov	r3, r9
 8002c30:	eb45 0303 	adc.w	r3, r5, r3
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c42:	4629      	mov	r1, r5
 8002c44:	028b      	lsls	r3, r1, #10
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	028a      	lsls	r2, r1, #10
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	61fa      	str	r2, [r7, #28]
 8002c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c60:	f7fe f81a 	bl	8000c98 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3750      	adds	r7, #80	; 0x50
 8002c94:	46bd      	mov	sp, r7
 8002c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	0800b968 	.word	0x0800b968

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffdc 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0b5b      	lsrs	r3, r3, #13
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	0800b968 	.word	0x0800b968

08002d10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_GetClockConfig+0x5c>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0203 	and.w	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_RCC_GetClockConfig+0x5c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_GetClockConfig+0x5c>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_RCC_GetClockConfig+0x60>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0207 	and.w	r2, r3, #7
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40023c00 	.word	0x40023c00

08002d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e041      	b.n	8002e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fd4c 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 fc8c 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d001      	beq.n	8002e2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e03c      	b.n	8002ea6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_TIM_Base_Start+0xa0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d018      	beq.n	8002e70 <HAL_TIM_Base_Start+0x5c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e46:	d013      	beq.n	8002e70 <HAL_TIM_Base_Start+0x5c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1a      	ldr	r2, [pc, #104]	; (8002eb8 <HAL_TIM_Base_Start+0xa4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00e      	beq.n	8002e70 <HAL_TIM_Base_Start+0x5c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <HAL_TIM_Base_Start+0xa8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d009      	beq.n	8002e70 <HAL_TIM_Base_Start+0x5c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <HAL_TIM_Base_Start+0xac>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_TIM_Base_Start+0x5c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <HAL_TIM_Base_Start+0xb0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d111      	bne.n	8002e94 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d010      	beq.n	8002ea4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	e007      	b.n	8002ea4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40014000 	.word	0x40014000

08002ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e044      	b.n	8002f6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_TIM_Base_Start_IT+0xb0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d018      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x6c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d013      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x6c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_TIM_Base_Start_IT+0xb4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00e      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x6c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d009      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x6c>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x6c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d010      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	e007      	b.n	8002f68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800
 8002f84:	40000c00 	.word	0x40000c00
 8002f88:	40014000 	.word	0x40014000

08002f8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e041      	b.n	8003022 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fc7c 	bl	80018b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fb80 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_TIM_PWM_Start+0x24>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e022      	b.n	8003096 <HAL_TIM_PWM_Start+0x6a>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d109      	bne.n	800306a <HAL_TIM_PWM_Start+0x3e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e015      	b.n	8003096 <HAL_TIM_PWM_Start+0x6a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d109      	bne.n	8003084 <HAL_TIM_PWM_Start+0x58>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e008      	b.n	8003096 <HAL_TIM_PWM_Start+0x6a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e068      	b.n	8003170 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PWM_Start+0x82>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ac:	e013      	b.n	80030d6 <HAL_TIM_PWM_Start+0xaa>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d104      	bne.n	80030be <HAL_TIM_PWM_Start+0x92>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030bc:	e00b      	b.n	80030d6 <HAL_TIM_PWM_Start+0xaa>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d104      	bne.n	80030ce <HAL_TIM_PWM_Start+0xa2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030cc:	e003      	b.n	80030d6 <HAL_TIM_PWM_Start+0xaa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2201      	movs	r2, #1
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fda8 	bl	8003c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a23      	ldr	r2, [pc, #140]	; (8003178 <HAL_TIM_PWM_Start+0x14c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d107      	bne.n	80030fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <HAL_TIM_PWM_Start+0x14c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d018      	beq.n	800313a <HAL_TIM_PWM_Start+0x10e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d013      	beq.n	800313a <HAL_TIM_PWM_Start+0x10e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_TIM_PWM_Start+0x150>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00e      	beq.n	800313a <HAL_TIM_PWM_Start+0x10e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_TIM_PWM_Start+0x154>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_TIM_PWM_Start+0x10e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a16      	ldr	r2, [pc, #88]	; (8003184 <HAL_TIM_PWM_Start+0x158>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_TIM_PWM_Start+0x10e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_TIM_PWM_Start+0x15c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d111      	bne.n	800315e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b06      	cmp	r3, #6
 800314a:	d010      	beq.n	800316e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	e007      	b.n	800316e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40010000 	.word	0x40010000
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	40014000 	.word	0x40014000

0800318c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d020      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01b      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0202 	mvn.w	r2, #2
 80031c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa5b 	bl	8003692 <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa4d 	bl	800367e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fa5e 	bl	80036a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d020      	beq.n	800323c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01b      	beq.n	800323c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0204 	mvn.w	r2, #4
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fa35 	bl	8003692 <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa27 	bl	800367e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fa38 	bl	80036a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d020      	beq.n	8003288 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01b      	beq.n	8003288 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0208 	mvn.w	r2, #8
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2204      	movs	r2, #4
 800325e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa0f 	bl	8003692 <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa01 	bl	800367e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fa12 	bl	80036a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d020      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01b      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0210 	mvn.w	r2, #16
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2208      	movs	r2, #8
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9e9 	bl	8003692 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f9db 	bl	800367e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f9ec 	bl	80036a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00c      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d007      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0201 	mvn.w	r2, #1
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fe f9e6 	bl	80016c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fd7c 	bl	8003e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00c      	beq.n	8003340 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9bd 	bl	80036ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00c      	beq.n	8003364 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0220 	mvn.w	r2, #32
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fd4e 	bl	8003e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003386:	2302      	movs	r3, #2
 8003388:	e0ae      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	f200 809f 	bhi.w	80034d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080034d9 	.word	0x080034d9
 80033a8:	080034d9 	.word	0x080034d9
 80033ac:	080034d9 	.word	0x080034d9
 80033b0:	08003415 	.word	0x08003415
 80033b4:	080034d9 	.word	0x080034d9
 80033b8:	080034d9 	.word	0x080034d9
 80033bc:	080034d9 	.word	0x080034d9
 80033c0:	08003457 	.word	0x08003457
 80033c4:	080034d9 	.word	0x080034d9
 80033c8:	080034d9 	.word	0x080034d9
 80033cc:	080034d9 	.word	0x080034d9
 80033d0:	08003497 	.word	0x08003497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa04 	bl	80037e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0208 	orr.w	r2, r2, #8
 80033ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6999      	ldr	r1, [r3, #24]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	619a      	str	r2, [r3, #24]
      break;
 8003412:	e064      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fa4a 	bl	80038b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	619a      	str	r2, [r3, #24]
      break;
 8003454:	e043      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fa95 	bl	800398c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0208 	orr.w	r2, r2, #8
 8003470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0204 	bic.w	r2, r2, #4
 8003480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	61da      	str	r2, [r3, #28]
      break;
 8003494:	e023      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fadf 	bl	8003a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	61da      	str	r2, [r3, #28]
      break;
 80034d6:	e002      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
      break;
 80034dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_TIM_ConfigClockSource+0x1c>
 8003508:	2302      	movs	r3, #2
 800350a:	e0b4      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x186>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800352a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003544:	d03e      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354a:	f200 8087 	bhi.w	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003552:	f000 8086 	beq.w	8003662 <HAL_TIM_ConfigClockSource+0x172>
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355a:	d87f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800355c:	2b70      	cmp	r3, #112	; 0x70
 800355e:	d01a      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0xa6>
 8003560:	2b70      	cmp	r3, #112	; 0x70
 8003562:	d87b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003564:	2b60      	cmp	r3, #96	; 0x60
 8003566:	d050      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x11a>
 8003568:	2b60      	cmp	r3, #96	; 0x60
 800356a:	d877      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b50      	cmp	r3, #80	; 0x50
 800356e:	d03c      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xfa>
 8003570:	2b50      	cmp	r3, #80	; 0x50
 8003572:	d873      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d058      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x13a>
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d86f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b30      	cmp	r3, #48	; 0x30
 800357e:	d064      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003580:	2b30      	cmp	r3, #48	; 0x30
 8003582:	d86b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b20      	cmp	r3, #32
 8003586:	d060      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003588:	2b20      	cmp	r3, #32
 800358a:	d867      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05c      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003590:	2b10      	cmp	r3, #16
 8003592:	d05a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003594:	e062      	b.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035a6:	f000 fb25 	bl	8003bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]
      break;
 80035c2:	e04f      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035d4:	f000 fb0e 	bl	8003bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e6:	609a      	str	r2, [r3, #8]
      break;
 80035e8:	e03c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 fa82 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2150      	movs	r1, #80	; 0x50
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fadb 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003608:	e02c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003616:	461a      	mov	r2, r3
 8003618:	f000 faa1 	bl	8003b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2160      	movs	r1, #96	; 0x60
 8003622:	4618      	mov	r0, r3
 8003624:	f000 facb 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003628:	e01c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	461a      	mov	r2, r3
 8003638:	f000 fa62 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2140      	movs	r1, #64	; 0x40
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fabb 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003648:	e00c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 fab2 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 800365a:	e003      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e000      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a3a      	ldr	r2, [pc, #232]	; (80037cc <TIM_Base_SetConfig+0xfc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00f      	beq.n	8003708 <TIM_Base_SetConfig+0x38>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d00b      	beq.n	8003708 <TIM_Base_SetConfig+0x38>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a37      	ldr	r2, [pc, #220]	; (80037d0 <TIM_Base_SetConfig+0x100>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d007      	beq.n	8003708 <TIM_Base_SetConfig+0x38>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a36      	ldr	r2, [pc, #216]	; (80037d4 <TIM_Base_SetConfig+0x104>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <TIM_Base_SetConfig+0x38>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a35      	ldr	r2, [pc, #212]	; (80037d8 <TIM_Base_SetConfig+0x108>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a2b      	ldr	r2, [pc, #172]	; (80037cc <TIM_Base_SetConfig+0xfc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01b      	beq.n	800375a <TIM_Base_SetConfig+0x8a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d017      	beq.n	800375a <TIM_Base_SetConfig+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <TIM_Base_SetConfig+0x100>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <TIM_Base_SetConfig+0x104>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00f      	beq.n	800375a <TIM_Base_SetConfig+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <TIM_Base_SetConfig+0x108>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00b      	beq.n	800375a <TIM_Base_SetConfig+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a25      	ldr	r2, [pc, #148]	; (80037dc <TIM_Base_SetConfig+0x10c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a24      	ldr	r2, [pc, #144]	; (80037e0 <TIM_Base_SetConfig+0x110>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <TIM_Base_SetConfig+0x114>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <TIM_Base_SetConfig+0xfc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d103      	bne.n	80037a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f023 0201 	bic.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	611a      	str	r2, [r3, #16]
  }
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800

080037e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f023 0201 	bic.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 0302 	bic.w	r3, r3, #2
 8003830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <TIM_OC1_SetConfig+0xc8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10c      	bne.n	800385e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0308 	bic.w	r3, r3, #8
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <TIM_OC1_SetConfig+0xc8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d111      	bne.n	800388a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800386c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40010000 	.word	0x40010000

080038b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f023 0210 	bic.w	r2, r3, #16
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0320 	bic.w	r3, r3, #32
 80038fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a1e      	ldr	r2, [pc, #120]	; (8003988 <TIM_OC2_SetConfig+0xd4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d10d      	bne.n	8003930 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a15      	ldr	r2, [pc, #84]	; (8003988 <TIM_OC2_SetConfig+0xd4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d113      	bne.n	8003960 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800393e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000

0800398c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <TIM_OC3_SetConfig+0xd0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d10d      	bne.n	8003a06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <TIM_OC3_SetConfig+0xd0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d113      	bne.n	8003a36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40010000 	.word	0x40010000

08003a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	031b      	lsls	r3, r3, #12
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a10      	ldr	r2, [pc, #64]	; (8003afc <TIM_OC4_SetConfig+0x9c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d109      	bne.n	8003ad4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	019b      	lsls	r3, r3, #6
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 0210 	bic.w	r2, r3, #16
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 0307 	orr.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2201      	movs	r2, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e050      	b.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d013      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10c      	bne.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40014000 	.word	0x40014000

08003d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e03d      	b.n	8003df4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e042      	b.n	8003ec0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fdb2 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa09 	bl	8004284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d175      	bne.n	8003fd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Transmit+0x2c>
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e06e      	b.n	8003fd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2221      	movs	r2, #33	; 0x21
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f06:	f7fd ffc7 	bl	8001e98 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d108      	bne.n	8003f34 <HAL_UART_Transmit+0x6c>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e003      	b.n	8003f3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f3c:	e02e      	b.n	8003f9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2200      	movs	r2, #0
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f8df 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e03a      	b.n	8003fd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e007      	b.n	8003f8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1cb      	bne.n	8003f3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2140      	movs	r1, #64	; 0x40
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f8ab 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e006      	b.n	8003fd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08a      	sub	sp, #40	; 0x28
 8003fe2:	af02      	add	r7, sp, #8
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	f040 8081 	bne.w	8004102 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_UART_Receive+0x2e>
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e079      	b.n	8004104 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2222      	movs	r2, #34	; 0x22
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004024:	f7fd ff38 	bl	8001e98 <HAL_GetTick>
 8004028:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	88fa      	ldrh	r2, [r7, #6]
 800402e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	88fa      	ldrh	r2, [r7, #6]
 8004034:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403e:	d108      	bne.n	8004052 <HAL_UART_Receive+0x74>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e003      	b.n	800405a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800405a:	e047      	b.n	80040ec <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2200      	movs	r2, #0
 8004064:	2120      	movs	r1, #32
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f850 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e042      	b.n	8004104 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10c      	bne.n	800409e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	b29a      	uxth	r2, r3
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	3302      	adds	r3, #2
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e01f      	b.n	80040de <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d007      	beq.n	80040b8 <HAL_UART_Receive+0xda>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <HAL_UART_Receive+0xe8>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e008      	b.n	80040d8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	3301      	adds	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1b2      	bne.n	800405c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	e03b      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d037      	beq.n	8004196 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fd feb7 	bl	8001e98 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e03a      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d023      	beq.n	8004196 <UART_WaitOnFlagUntilTimeout+0x8a>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d020      	beq.n	8004196 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d01d      	beq.n	8004196 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b08      	cmp	r3, #8
 8004166:	d116      	bne.n	8004196 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f81d 	bl	80041be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2208      	movs	r2, #8
 8004188:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e00f      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d0b4      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041be:	b480      	push	{r7}
 80041c0:	b095      	sub	sp, #84	; 0x54
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041e6:	643a      	str	r2, [r7, #64]	; 0x40
 80041e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e5      	bne.n	80041c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3314      	adds	r3, #20
 8004200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	61fb      	str	r3, [r7, #28]
   return(result);
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	64bb      	str	r3, [r7, #72]	; 0x48
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3314      	adds	r3, #20
 8004218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800421a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e5      	bne.n	80041fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	2b01      	cmp	r3, #1
 8004234:	d119      	bne.n	800426a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	60bb      	str	r3, [r7, #8]
   return(result);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0310 	bic.w	r3, r3, #16
 800424c:	647b      	str	r3, [r7, #68]	; 0x44
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004256:	61ba      	str	r2, [r7, #24]
 8004258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	613b      	str	r3, [r7, #16]
   return(result);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004278:	bf00      	nop
 800427a:	3754      	adds	r7, #84	; 0x54
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004288:	b0c0      	sub	sp, #256	; 0x100
 800428a:	af00      	add	r7, sp, #0
 800428c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	68d9      	ldr	r1, [r3, #12]
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	ea40 0301 	orr.w	r3, r0, r1
 80042ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042dc:	f021 010c 	bic.w	r1, r1, #12
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042ea:	430b      	orrs	r3, r1
 80042ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	6999      	ldr	r1, [r3, #24]
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	ea40 0301 	orr.w	r3, r0, r1
 800430a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b8f      	ldr	r3, [pc, #572]	; (8004550 <UART_SetConfig+0x2cc>)
 8004314:	429a      	cmp	r2, r3
 8004316:	d005      	beq.n	8004324 <UART_SetConfig+0xa0>
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b8d      	ldr	r3, [pc, #564]	; (8004554 <UART_SetConfig+0x2d0>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d104      	bne.n	800432e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7fe fce0 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8004328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800432c:	e003      	b.n	8004336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800432e:	f7fe fcc7 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004340:	f040 810c 	bne.w	800455c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004348:	2200      	movs	r2, #0
 800434a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800434e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004356:	4622      	mov	r2, r4
 8004358:	462b      	mov	r3, r5
 800435a:	1891      	adds	r1, r2, r2
 800435c:	65b9      	str	r1, [r7, #88]	; 0x58
 800435e:	415b      	adcs	r3, r3
 8004360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004366:	4621      	mov	r1, r4
 8004368:	eb12 0801 	adds.w	r8, r2, r1
 800436c:	4629      	mov	r1, r5
 800436e:	eb43 0901 	adc.w	r9, r3, r1
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800437e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004386:	4690      	mov	r8, r2
 8004388:	4699      	mov	r9, r3
 800438a:	4623      	mov	r3, r4
 800438c:	eb18 0303 	adds.w	r3, r8, r3
 8004390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004394:	462b      	mov	r3, r5
 8004396:	eb49 0303 	adc.w	r3, r9, r3
 800439a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043b2:	460b      	mov	r3, r1
 80043b4:	18db      	adds	r3, r3, r3
 80043b6:	653b      	str	r3, [r7, #80]	; 0x50
 80043b8:	4613      	mov	r3, r2
 80043ba:	eb42 0303 	adc.w	r3, r2, r3
 80043be:	657b      	str	r3, [r7, #84]	; 0x54
 80043c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043c8:	f7fc fc66 	bl	8000c98 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4b61      	ldr	r3, [pc, #388]	; (8004558 <UART_SetConfig+0x2d4>)
 80043d2:	fba3 2302 	umull	r2, r3, r3, r2
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	011c      	lsls	r4, r3, #4
 80043da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043ec:	4642      	mov	r2, r8
 80043ee:	464b      	mov	r3, r9
 80043f0:	1891      	adds	r1, r2, r2
 80043f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043f4:	415b      	adcs	r3, r3
 80043f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043fc:	4641      	mov	r1, r8
 80043fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004402:	4649      	mov	r1, r9
 8004404:	eb43 0b01 	adc.w	fp, r3, r1
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800441c:	4692      	mov	sl, r2
 800441e:	469b      	mov	fp, r3
 8004420:	4643      	mov	r3, r8
 8004422:	eb1a 0303 	adds.w	r3, sl, r3
 8004426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800442a:	464b      	mov	r3, r9
 800442c:	eb4b 0303 	adc.w	r3, fp, r3
 8004430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004448:	460b      	mov	r3, r1
 800444a:	18db      	adds	r3, r3, r3
 800444c:	643b      	str	r3, [r7, #64]	; 0x40
 800444e:	4613      	mov	r3, r2
 8004450:	eb42 0303 	adc.w	r3, r2, r3
 8004454:	647b      	str	r3, [r7, #68]	; 0x44
 8004456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800445a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800445e:	f7fc fc1b 	bl	8000c98 <__aeabi_uldivmod>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4611      	mov	r1, r2
 8004468:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <UART_SetConfig+0x2d4>)
 800446a:	fba3 2301 	umull	r2, r3, r3, r1
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2264      	movs	r2, #100	; 0x64
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	1acb      	subs	r3, r1, r3
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800447e:	4b36      	ldr	r3, [pc, #216]	; (8004558 <UART_SetConfig+0x2d4>)
 8004480:	fba3 2302 	umull	r2, r3, r3, r2
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800448c:	441c      	add	r4, r3
 800448e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800449c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044a0:	4642      	mov	r2, r8
 80044a2:	464b      	mov	r3, r9
 80044a4:	1891      	adds	r1, r2, r2
 80044a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044a8:	415b      	adcs	r3, r3
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044b0:	4641      	mov	r1, r8
 80044b2:	1851      	adds	r1, r2, r1
 80044b4:	6339      	str	r1, [r7, #48]	; 0x30
 80044b6:	4649      	mov	r1, r9
 80044b8:	414b      	adcs	r3, r1
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044c8:	4659      	mov	r1, fp
 80044ca:	00cb      	lsls	r3, r1, #3
 80044cc:	4651      	mov	r1, sl
 80044ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d2:	4651      	mov	r1, sl
 80044d4:	00ca      	lsls	r2, r1, #3
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	4642      	mov	r2, r8
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e4:	464b      	mov	r3, r9
 80044e6:	460a      	mov	r2, r1
 80044e8:	eb42 0303 	adc.w	r3, r2, r3
 80044ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004504:	460b      	mov	r3, r1
 8004506:	18db      	adds	r3, r3, r3
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
 800450a:	4613      	mov	r3, r2
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800451a:	f7fc fbbd 	bl	8000c98 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <UART_SetConfig+0x2d4>)
 8004524:	fba3 1302 	umull	r1, r3, r3, r2
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	2164      	movs	r1, #100	; 0x64
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	3332      	adds	r3, #50	; 0x32
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <UART_SetConfig+0x2d4>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	f003 0207 	and.w	r2, r3, #7
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4422      	add	r2, r4
 800454a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800454c:	e106      	b.n	800475c <UART_SetConfig+0x4d8>
 800454e:	bf00      	nop
 8004550:	40011000 	.word	0x40011000
 8004554:	40011400 	.word	0x40011400
 8004558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800455c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004560:	2200      	movs	r2, #0
 8004562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800456a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800456e:	4642      	mov	r2, r8
 8004570:	464b      	mov	r3, r9
 8004572:	1891      	adds	r1, r2, r2
 8004574:	6239      	str	r1, [r7, #32]
 8004576:	415b      	adcs	r3, r3
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800457e:	4641      	mov	r1, r8
 8004580:	1854      	adds	r4, r2, r1
 8004582:	4649      	mov	r1, r9
 8004584:	eb43 0501 	adc.w	r5, r3, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	00eb      	lsls	r3, r5, #3
 8004592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004596:	00e2      	lsls	r2, r4, #3
 8004598:	4614      	mov	r4, r2
 800459a:	461d      	mov	r5, r3
 800459c:	4643      	mov	r3, r8
 800459e:	18e3      	adds	r3, r4, r3
 80045a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045a4:	464b      	mov	r3, r9
 80045a6:	eb45 0303 	adc.w	r3, r5, r3
 80045aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045ca:	4629      	mov	r1, r5
 80045cc:	008b      	lsls	r3, r1, #2
 80045ce:	4621      	mov	r1, r4
 80045d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d4:	4621      	mov	r1, r4
 80045d6:	008a      	lsls	r2, r1, #2
 80045d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045dc:	f7fc fb5c 	bl	8000c98 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4b60      	ldr	r3, [pc, #384]	; (8004768 <UART_SetConfig+0x4e4>)
 80045e6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	011c      	lsls	r4, r3, #4
 80045ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	1891      	adds	r1, r2, r2
 8004606:	61b9      	str	r1, [r7, #24]
 8004608:	415b      	adcs	r3, r3
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004610:	4641      	mov	r1, r8
 8004612:	1851      	adds	r1, r2, r1
 8004614:	6139      	str	r1, [r7, #16]
 8004616:	4649      	mov	r1, r9
 8004618:	414b      	adcs	r3, r1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004628:	4659      	mov	r1, fp
 800462a:	00cb      	lsls	r3, r1, #3
 800462c:	4651      	mov	r1, sl
 800462e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004632:	4651      	mov	r1, sl
 8004634:	00ca      	lsls	r2, r1, #3
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	4603      	mov	r3, r0
 800463c:	4642      	mov	r2, r8
 800463e:	189b      	adds	r3, r3, r2
 8004640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004644:	464b      	mov	r3, r9
 8004646:	460a      	mov	r2, r1
 8004648:	eb42 0303 	adc.w	r3, r2, r3
 800464c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	67bb      	str	r3, [r7, #120]	; 0x78
 800465a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004668:	4649      	mov	r1, r9
 800466a:	008b      	lsls	r3, r1, #2
 800466c:	4641      	mov	r1, r8
 800466e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004672:	4641      	mov	r1, r8
 8004674:	008a      	lsls	r2, r1, #2
 8004676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800467a:	f7fc fb0d 	bl	8000c98 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4611      	mov	r1, r2
 8004684:	4b38      	ldr	r3, [pc, #224]	; (8004768 <UART_SetConfig+0x4e4>)
 8004686:	fba3 2301 	umull	r2, r3, r3, r1
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2264      	movs	r2, #100	; 0x64
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	1acb      	subs	r3, r1, r3
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	3332      	adds	r3, #50	; 0x32
 8004698:	4a33      	ldr	r2, [pc, #204]	; (8004768 <UART_SetConfig+0x4e4>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a4:	441c      	add	r4, r3
 80046a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046aa:	2200      	movs	r2, #0
 80046ac:	673b      	str	r3, [r7, #112]	; 0x70
 80046ae:	677a      	str	r2, [r7, #116]	; 0x74
 80046b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	415b      	adcs	r3, r3
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046c4:	4641      	mov	r1, r8
 80046c6:	1851      	adds	r1, r2, r1
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	4649      	mov	r1, r9
 80046cc:	414b      	adcs	r3, r1
 80046ce:	607b      	str	r3, [r7, #4]
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046dc:	4659      	mov	r1, fp
 80046de:	00cb      	lsls	r3, r1, #3
 80046e0:	4651      	mov	r1, sl
 80046e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e6:	4651      	mov	r1, sl
 80046e8:	00ca      	lsls	r2, r1, #3
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	4642      	mov	r2, r8
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f6:	464b      	mov	r3, r9
 80046f8:	460a      	mov	r2, r1
 80046fa:	eb42 0303 	adc.w	r3, r2, r3
 80046fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	663b      	str	r3, [r7, #96]	; 0x60
 800470a:	667a      	str	r2, [r7, #100]	; 0x64
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004718:	4649      	mov	r1, r9
 800471a:	008b      	lsls	r3, r1, #2
 800471c:	4641      	mov	r1, r8
 800471e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004722:	4641      	mov	r1, r8
 8004724:	008a      	lsls	r2, r1, #2
 8004726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800472a:	f7fc fab5 	bl	8000c98 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <UART_SetConfig+0x4e4>)
 8004734:	fba3 1302 	umull	r1, r3, r3, r2
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	2164      	movs	r1, #100	; 0x64
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	3332      	adds	r3, #50	; 0x32
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <UART_SetConfig+0x4e4>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	f003 020f 	and.w	r2, r3, #15
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4422      	add	r2, r4
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004768:	51eb851f 	.word	0x51eb851f

0800476c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800477a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800477e:	2b84      	cmp	r3, #132	; 0x84
 8004780:	d005      	beq.n	800478e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004782:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	3303      	adds	r3, #3
 800478c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800478e:	68fb      	ldr	r3, [r7, #12]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a2:	f3ef 8305 	mrs	r3, IPSR
 80047a6:	607b      	str	r3, [r7, #4]
  return(result);
 80047a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf14      	ite	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	2300      	moveq	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047c4:	f001 f926 	bl	8005a14 <vTaskStartScheduler>
  
  return osOK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	bd80      	pop	{r7, pc}

080047ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d0:	b089      	sub	sp, #36	; 0x24
 80047d2:	af04      	add	r7, sp, #16
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <osThreadCreate+0x54>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01c      	beq.n	8004822 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685c      	ldr	r4, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691e      	ldr	r6, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff ffb6 	bl	800476c <makeFreeRtosPriority>
 8004800:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800480a:	9202      	str	r2, [sp, #8]
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	9100      	str	r1, [sp, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4632      	mov	r2, r6
 8004814:	4629      	mov	r1, r5
 8004816:	4620      	mov	r0, r4
 8004818:	f000 ff1e 	bl	8005658 <xTaskCreateStatic>
 800481c:	4603      	mov	r3, r0
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e01c      	b.n	800485c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685c      	ldr	r4, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800482e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff ff98 	bl	800476c <makeFreeRtosPriority>
 800483c:	4602      	mov	r2, r0
 800483e:	f107 030c 	add.w	r3, r7, #12
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	9200      	str	r2, [sp, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	4632      	mov	r2, r6
 800484a:	4629      	mov	r1, r5
 800484c:	4620      	mov	r0, r4
 800484e:	f000 ff60 	bl	8005712 <xTaskCreate>
 8004852:	4603      	mov	r3, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d001      	beq.n	800485c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	e000      	b.n	800485e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004866 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <osDelay+0x16>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	e000      	b.n	800487e <osDelay+0x18>
 800487c:	2301      	movs	r3, #1
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f894 	bl	80059ac <vTaskDelay>
  
  return osOK;
 8004884:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af02      	add	r7, sp, #8
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00f      	beq.n	80048c0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10a      	bne.n	80048bc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2203      	movs	r2, #3
 80048ac:	9200      	str	r2, [sp, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	2001      	movs	r0, #1
 80048b4:	f000 f9be 	bl	8004c34 <xQueueGenericCreateStatic>
 80048b8:	4603      	mov	r3, r0
 80048ba:	e016      	b.n	80048ea <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	e014      	b.n	80048ea <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d110      	bne.n	80048e8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80048c6:	2203      	movs	r2, #3
 80048c8:	2100      	movs	r1, #0
 80048ca:	2001      	movs	r0, #1
 80048cc:	f000 fa2a 	bl	8004d24 <xQueueGenericCreate>
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <osSemaphoreCreate+0x56>
 80048d8:	2300      	movs	r3, #0
 80048da:	2200      	movs	r2, #0
 80048dc:	2100      	movs	r1, #0
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fa7a 	bl	8004dd8 <xQueueGenericSend>
      return sema;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	e000      	b.n	80048ea <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80048e8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	e03a      	b.n	8004982 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d103      	bne.n	8004920 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e009      	b.n	8004934 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <osSemaphoreWait+0x40>
      ticks = 1;
 8004930:	2301      	movs	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004934:	f7ff ff32 	bl	800479c <inHandlerMode>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d017      	beq.n	800496e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	461a      	mov	r2, r3
 8004944:	2100      	movs	r1, #0
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fcde 	bl	8005308 <xQueueReceiveFromISR>
 800494c:	4603      	mov	r3, r0
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004952:	23ff      	movs	r3, #255	; 0xff
 8004954:	e015      	b.n	8004982 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d011      	beq.n	8004980 <osSemaphoreWait+0x8c>
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <osSemaphoreWait+0x98>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	e008      	b.n	8004980 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800496e:	68f9      	ldr	r1, [r7, #12]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fbbd 	bl	80050f0 <xQueueSemaphoreTake>
 8004976:	4603      	mov	r3, r0
 8004978:	2b01      	cmp	r3, #1
 800497a:	d001      	beq.n	8004980 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800497c:	23ff      	movs	r3, #255	; 0xff
 800497e:	e000      	b.n	8004982 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000ed04 	.word	0xe000ed04

08004990 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80049a0:	f7ff fefc 	bl	800479c <inHandlerMode>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80049aa:	f107 0308 	add.w	r3, r7, #8
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fb0f 	bl	8004fd4 <xQueueGiveFromISR>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80049bc:	23ff      	movs	r3, #255	; 0xff
 80049be:	e017      	b.n	80049f0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d013      	beq.n	80049ee <osSemaphoreRelease+0x5e>
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <osSemaphoreRelease+0x68>)
 80049c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	e00a      	b.n	80049ee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80049d8:	2300      	movs	r3, #0
 80049da:	2200      	movs	r2, #0
 80049dc:	2100      	movs	r1, #0
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f9fa 	bl	8004dd8 <xQueueGenericSend>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80049ea:	23ff      	movs	r3, #255	; 0xff
 80049ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80049ee:	68fb      	ldr	r3, [r7, #12]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f103 0208 	add.w	r2, r3, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295
 8004a14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f103 0208 	add.w	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f103 0208 	add.w	r2, r3, #8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d103      	bne.n	8004abe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e00c      	b.n	8004ad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e002      	b.n	8004acc <vListInsert+0x2e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d2f6      	bcs.n	8004ac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6892      	ldr	r2, [r2, #8]
 8004b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6852      	ldr	r2, [r2, #4]
 8004b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d103      	bne.n	8004b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1e5a      	subs	r2, r3, #1
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b8e:	f001 fea1 	bl	80068d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	68f9      	ldr	r1, [r7, #12]
 8004b9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	441a      	add	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	441a      	add	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	22ff      	movs	r2, #255	; 0xff
 8004bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	22ff      	movs	r2, #255	; 0xff
 8004bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d114      	bne.n	8004c0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01a      	beq.n	8004c22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3310      	adds	r3, #16
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f961 	bl	8005eb8 <xTaskRemoveFromEventList>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <xQueueGenericReset+0xcc>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	e009      	b.n	8004c22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3310      	adds	r3, #16
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fef2 	bl	80049fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3324      	adds	r3, #36	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff feed 	bl	80049fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c22:	f001 fe87 	bl	8006934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c26:	2301      	movs	r3, #1
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	; 0x38
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c76:	bf00      	nop
 8004c78:	e7fe      	b.n	8004c78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <xQueueGenericCreateStatic+0x52>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <xQueueGenericCreateStatic+0x56>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <xQueueGenericCreateStatic+0x58>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	623b      	str	r3, [r7, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <xQueueGenericCreateStatic+0x7e>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <xQueueGenericCreateStatic+0x82>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <xQueueGenericCreateStatic+0x84>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	61fb      	str	r3, [r7, #28]
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cd2:	2348      	movs	r3, #72	; 0x48
 8004cd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b48      	cmp	r3, #72	; 0x48
 8004cda:	d00a      	beq.n	8004cf2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	61bb      	str	r3, [r7, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cf2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f83f 	bl	8004d98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3730      	adds	r7, #48	; 0x30
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	613b      	str	r3, [r7, #16]
}
 8004d4a:	bf00      	nop
 8004d4c:	e7fe      	b.n	8004d4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3348      	adds	r3, #72	; 0x48
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fedb 	bl	8006b18 <pvPortMalloc>
 8004d62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d011      	beq.n	8004d8e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3348      	adds	r3, #72	; 0x48
 8004d72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d7c:	79fa      	ldrb	r2, [r7, #7]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f805 	bl	8004d98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e002      	b.n	8004dba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	69b8      	ldr	r0, [r7, #24]
 8004dca:	f7ff fecb 	bl	8004b64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08e      	sub	sp, #56	; 0x38
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004de6:	2300      	movs	r3, #0
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <xQueueGenericSend+0x32>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <xQueueGenericSend+0x40>
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <xQueueGenericSend+0x44>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <xQueueGenericSend+0x46>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <xQueueGenericSend+0x60>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d103      	bne.n	8004e46 <xQueueGenericSend+0x6e>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <xQueueGenericSend+0x72>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <xQueueGenericSend+0x74>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xQueueGenericSend+0x8e>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	623b      	str	r3, [r7, #32]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e66:	f001 f9e7 	bl	8006238 <xTaskGetSchedulerState>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <xQueueGenericSend+0x9e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <xQueueGenericSend+0xa2>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <xQueueGenericSend+0xa4>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61fb      	str	r3, [r7, #28]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e96:	f001 fd1d 	bl	80068d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <xQueueGenericSend+0xd4>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d129      	bne.n	8004f00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eb2:	f000 fac1 	bl	8005438 <prvCopyDataToQueue>
 8004eb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	3324      	adds	r3, #36	; 0x24
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fff7 	bl	8005eb8 <xTaskRemoveFromEventList>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d013      	beq.n	8004ef8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ed0:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <xQueueGenericSend+0x1f8>)
 8004ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	e00a      	b.n	8004ef8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ee8:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <xQueueGenericSend+0x1f8>)
 8004eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ef8:	f001 fd1c 	bl	8006934 <vPortExitCritical>
				return pdPASS;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e063      	b.n	8004fc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f06:	f001 fd15 	bl	8006934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e05c      	b.n	8004fc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f82f 	bl	8005f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f22:	f001 fd07 	bl	8006934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f26:	f000 fddf 	bl	8005ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f2a:	f001 fcd3 	bl	80068d4 <vPortEnterCritical>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f34:	b25b      	sxtb	r3, r3
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d103      	bne.n	8004f44 <xQueueGenericSend+0x16c>
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f4a:	b25b      	sxtb	r3, r3
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d103      	bne.n	8004f5a <xQueueGenericSend+0x182>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f5a:	f001 fceb 	bl	8006934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f5e:	1d3a      	adds	r2, r7, #4
 8004f60:	f107 0314 	add.w	r3, r7, #20
 8004f64:	4611      	mov	r1, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 f81e 	bl	8005fa8 <xTaskCheckForTimeOut>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d124      	bne.n	8004fbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f74:	f000 fb58 	bl	8005628 <prvIsQueueFull>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d018      	beq.n	8004fb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	3310      	adds	r3, #16
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4611      	mov	r1, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 ff72 	bl	8005e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f8e:	f000 fae3 	bl	8005558 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f92:	f000 fdb7 	bl	8005b04 <xTaskResumeAll>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f47f af7c 	bne.w	8004e96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <xQueueGenericSend+0x1f8>)
 8004fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	e772      	b.n	8004e96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fb2:	f000 fad1 	bl	8005558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fb6:	f000 fda5 	bl	8005b04 <xTaskResumeAll>
 8004fba:	e76c      	b.n	8004e96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fbe:	f000 facb 	bl	8005558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fc2:	f000 fd9f 	bl	8005b04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3738      	adds	r7, #56	; 0x38
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08e      	sub	sp, #56	; 0x38
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	623b      	str	r3, [r7, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <xQueueGiveFromISR+0x48>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	61fb      	str	r3, [r7, #28]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d103      	bne.n	800502c <xQueueGiveFromISR+0x58>
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <xQueueGiveFromISR+0x5c>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <xQueueGiveFromISR+0x5e>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <xQueueGiveFromISR+0x78>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61bb      	str	r3, [r7, #24]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800504c:	f001 fd24 	bl	8006a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005050:	f3ef 8211 	mrs	r2, BASEPRI
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	617a      	str	r2, [r7, #20]
 8005066:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005068:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005078:	429a      	cmp	r2, r3
 800507a:	d22b      	bcs.n	80050d4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800508e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d112      	bne.n	80050be <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d016      	beq.n	80050ce <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	3324      	adds	r3, #36	; 0x24
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 ff07 	bl	8005eb8 <xTaskRemoveFromEventList>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00e      	beq.n	80050ce <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e007      	b.n	80050ce <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c2:	3301      	adds	r3, #1
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	b25a      	sxtb	r2, r3
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050ce:	2301      	movs	r3, #1
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
 80050d2:	e001      	b.n	80050d8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3738      	adds	r7, #56	; 0x38
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08e      	sub	sp, #56	; 0x38
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	623b      	str	r3, [r7, #32]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	61fb      	str	r3, [r7, #28]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005140:	f001 f87a 	bl	8006238 <xTaskGetSchedulerState>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <xQueueSemaphoreTake+0x60>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <xQueueSemaphoreTake+0x64>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <xQueueSemaphoreTake+0x66>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	61bb      	str	r3, [r7, #24]
}
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005170:	f001 fbb0 	bl	80068d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	2b00      	cmp	r3, #0
 800517e:	d024      	beq.n	80051ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	1e5a      	subs	r2, r3, #1
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005190:	f001 f9fa 	bl	8006588 <pvTaskIncrementMutexHeldCount>
 8005194:	4602      	mov	r2, r0
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00f      	beq.n	80051c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	3310      	adds	r3, #16
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fe86 	bl	8005eb8 <xTaskRemoveFromEventList>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051b2:	4b54      	ldr	r3, [pc, #336]	; (8005304 <xQueueSemaphoreTake+0x214>)
 80051b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051c2:	f001 fbb7 	bl	8006934 <vPortExitCritical>
				return pdPASS;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e097      	b.n	80052fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d111      	bne.n	80051f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	617b      	str	r3, [r7, #20]
}
 80051e8:	bf00      	nop
 80051ea:	e7fe      	b.n	80051ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80051ec:	f001 fba2 	bl	8006934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e082      	b.n	80052fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 febc 	bl	8005f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005204:	2301      	movs	r3, #1
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005208:	f001 fb94 	bl	8006934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800520c:	f000 fc6c 	bl	8005ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005210:	f001 fb60 	bl	80068d4 <vPortEnterCritical>
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800521a:	b25b      	sxtb	r3, r3
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d103      	bne.n	800522a <xQueueSemaphoreTake+0x13a>
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005230:	b25b      	sxtb	r3, r3
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d103      	bne.n	8005240 <xQueueSemaphoreTake+0x150>
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005240:	f001 fb78 	bl	8006934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005244:	463a      	mov	r2, r7
 8005246:	f107 030c 	add.w	r3, r7, #12
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f000 feab 	bl	8005fa8 <xTaskCheckForTimeOut>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d132      	bne.n	80052be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005258:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800525a:	f000 f9cf 	bl	80055fc <prvIsQueueEmpty>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d026      	beq.n	80052b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d109      	bne.n	8005280 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800526c:	f001 fb32 	bl	80068d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fffd 	bl	8006274 <xTaskPriorityInherit>
 800527a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800527c:	f001 fb5a 	bl	8006934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	3324      	adds	r3, #36	; 0x24
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fdf1 	bl	8005e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800528e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005290:	f000 f962 	bl	8005558 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005294:	f000 fc36 	bl	8005b04 <xTaskResumeAll>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	f47f af68 	bne.w	8005170 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <xQueueSemaphoreTake+0x214>)
 80052a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	e75e      	b.n	8005170 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80052b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052b4:	f000 f950 	bl	8005558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052b8:	f000 fc24 	bl	8005b04 <xTaskResumeAll>
 80052bc:	e758      	b.n	8005170 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80052be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052c0:	f000 f94a 	bl	8005558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052c4:	f000 fc1e 	bl	8005b04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052ca:	f000 f997 	bl	80055fc <prvIsQueueEmpty>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f43f af4d 	beq.w	8005170 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80052dc:	f001 fafa 	bl	80068d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80052e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052e2:	f000 f891 	bl	8005408 <prvGetDisinheritPriorityAfterTimeout>
 80052e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 f8bc 	bl	800646c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80052f4:	f001 fb1e 	bl	8006934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3738      	adds	r7, #56	; 0x38
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	e000ed04 	.word	0xe000ed04

08005308 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08e      	sub	sp, #56	; 0x38
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	623b      	str	r3, [r7, #32]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d103      	bne.n	8005342 <xQueueReceiveFromISR+0x3a>
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <xQueueReceiveFromISR+0x3e>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xQueueReceiveFromISR+0x40>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	61fb      	str	r3, [r7, #28]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005362:	f001 fb99 	bl	8006a98 <vPortValidateInterruptPriority>
	__asm volatile
 8005366:	f3ef 8211 	mrs	r2, BASEPRI
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	61ba      	str	r2, [r7, #24]
 800537c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800537e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02f      	beq.n	80053ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800539c:	f000 f8b6 	bl	800550c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	1e5a      	subs	r2, r3, #1
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80053a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d112      	bne.n	80053d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d016      	beq.n	80053e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	3310      	adds	r3, #16
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fd7a 	bl	8005eb8 <xTaskRemoveFromEventList>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00e      	beq.n	80053e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e007      	b.n	80053e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053dc:	3301      	adds	r3, #1
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	b25a      	sxtb	r2, r3
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80053e8:	2301      	movs	r3, #1
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
 80053ec:	e001      	b.n	80053f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f383 8811 	msr	BASEPRI, r3
}
 80053fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005400:	4618      	mov	r0, r3
 8005402:	3738      	adds	r7, #56	; 0x38
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d006      	beq.n	8005426 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1c3 0307 	rsb	r3, r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e001      	b.n	800542a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800542a:	68fb      	ldr	r3, [r7, #12]
	}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10d      	bne.n	8005472 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d14d      	bne.n	80054fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 ff7c 	bl	8006360 <xTaskPriorityDisinherit>
 8005468:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	e043      	b.n	80054fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d119      	bne.n	80054ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6858      	ldr	r0, [r3, #4]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	461a      	mov	r2, r3
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	f002 fea5 	bl	80081d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d32b      	bcc.n	80054fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	e026      	b.n	80054fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68d8      	ldr	r0, [r3, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	461a      	mov	r2, r3
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	f002 fe8b 	bl	80081d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	425b      	negs	r3, r3
 80054c6:	441a      	add	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d207      	bcs.n	80054e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	425b      	negs	r3, r3
 80054e2:	441a      	add	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d105      	bne.n	80054fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005502:	697b      	ldr	r3, [r7, #20]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d018      	beq.n	8005550 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	441a      	add	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	d303      	bcc.n	8005540 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68d9      	ldr	r1, [r3, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	461a      	mov	r2, r3
 800554a:	6838      	ldr	r0, [r7, #0]
 800554c:	f002 fe41 	bl	80081d2 <memcpy>
	}
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005560:	f001 f9b8 	bl	80068d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800556a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800556c:	e011      	b.n	8005592 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d012      	beq.n	800559c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3324      	adds	r3, #36	; 0x24
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fc9c 	bl	8005eb8 <xTaskRemoveFromEventList>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005586:	f000 fd71 	bl	800606c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	3b01      	subs	r3, #1
 800558e:	b2db      	uxtb	r3, r3
 8005590:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005596:	2b00      	cmp	r3, #0
 8005598:	dce9      	bgt.n	800556e <prvUnlockQueue+0x16>
 800559a:	e000      	b.n	800559e <prvUnlockQueue+0x46>
					break;
 800559c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	22ff      	movs	r2, #255	; 0xff
 80055a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055a6:	f001 f9c5 	bl	8006934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055aa:	f001 f993 	bl	80068d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b6:	e011      	b.n	80055dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d012      	beq.n	80055e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3310      	adds	r3, #16
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fc77 	bl	8005eb8 <xTaskRemoveFromEventList>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055d0:	f000 fd4c 	bl	800606c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dce9      	bgt.n	80055b8 <prvUnlockQueue+0x60>
 80055e4:	e000      	b.n	80055e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	22ff      	movs	r2, #255	; 0xff
 80055ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055f0:	f001 f9a0 	bl	8006934 <vPortExitCritical>
}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005604:	f001 f966 	bl	80068d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005610:	2301      	movs	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e001      	b.n	800561a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800561a:	f001 f98b 	bl	8006934 <vPortExitCritical>

	return xReturn;
 800561e:	68fb      	ldr	r3, [r7, #12]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005630:	f001 f950 	bl	80068d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	429a      	cmp	r2, r3
 800563e:	d102      	bne.n	8005646 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e001      	b.n	800564a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800564a:	f001 f973 	bl	8006934 <vPortExitCritical>

	return xReturn;
 800564e:	68fb      	ldr	r3, [r7, #12]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08e      	sub	sp, #56	; 0x38
 800565c:	af04      	add	r7, sp, #16
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xTaskCreateStatic+0x2a>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	623b      	str	r3, [r7, #32]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xTaskCreateStatic+0x46>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	61fb      	str	r3, [r7, #28]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800569e:	23a0      	movs	r3, #160	; 0xa0
 80056a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2ba0      	cmp	r3, #160	; 0xa0
 80056a6:	d00a      	beq.n	80056be <xTaskCreateStatic+0x66>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61bb      	str	r3, [r7, #24]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01e      	beq.n	8005704 <xTaskCreateStatic+0xac>
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01b      	beq.n	8005704 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056de:	2300      	movs	r3, #0
 80056e0:	9303      	str	r3, [sp, #12]
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	9302      	str	r3, [sp, #8]
 80056e6:	f107 0314 	add.w	r3, r7, #20
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f850 	bl	800579c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056fe:	f000 f8eb 	bl	80058d8 <prvAddNewTaskToReadyList>
 8005702:	e001      	b.n	8005708 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005708:	697b      	ldr	r3, [r7, #20]
	}
 800570a:	4618      	mov	r0, r3
 800570c:	3728      	adds	r7, #40	; 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005712:	b580      	push	{r7, lr}
 8005714:	b08c      	sub	sp, #48	; 0x30
 8005716:	af04      	add	r7, sp, #16
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	4613      	mov	r3, r2
 8005720:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f001 f9f6 	bl	8006b18 <pvPortMalloc>
 800572c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005734:	20a0      	movs	r0, #160	; 0xa0
 8005736:	f001 f9ef 	bl	8006b18 <pvPortMalloc>
 800573a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
 8005748:	e005      	b.n	8005756 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800574a:	6978      	ldr	r0, [r7, #20]
 800574c:	f001 fab0 	bl	8006cb0 <vPortFree>
 8005750:	e001      	b.n	8005756 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d017      	beq.n	800578c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005764:	88fa      	ldrh	r2, [r7, #6]
 8005766:	2300      	movs	r3, #0
 8005768:	9303      	str	r3, [sp, #12]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	9302      	str	r3, [sp, #8]
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f80e 	bl	800579c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005780:	69f8      	ldr	r0, [r7, #28]
 8005782:	f000 f8a9 	bl	80058d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005786:	2301      	movs	r3, #1
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e002      	b.n	8005792 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800578c:	f04f 33ff 	mov.w	r3, #4294967295
 8005790:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005792:	69bb      	ldr	r3, [r7, #24]
	}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057b4:	3b01      	subs	r3, #1
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f023 0307 	bic.w	r3, r3, #7
 80057c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	617b      	str	r3, [r7, #20]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01f      	beq.n	800582a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	e012      	b.n	8005816 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	7819      	ldrb	r1, [r3, #0]
 80057f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	3334      	adds	r3, #52	; 0x34
 8005800:	460a      	mov	r2, r1
 8005802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d006      	beq.n	800581e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	3301      	adds	r3, #1
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2b0f      	cmp	r3, #15
 800581a:	d9e9      	bls.n	80057f0 <prvInitialiseNewTask+0x54>
 800581c:	e000      	b.n	8005820 <prvInitialiseNewTask+0x84>
			{
				break;
 800581e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005828:	e003      	b.n	8005832 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	2b06      	cmp	r3, #6
 8005836:	d901      	bls.n	800583c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005838:	2306      	movs	r3, #6
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005846:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	2200      	movs	r2, #0
 800584c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	3304      	adds	r3, #4
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff f8f2 	bl	8004a3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	3318      	adds	r3, #24
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff f8ed 	bl	8004a3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	f1c3 0207 	rsb	r2, r3, #7
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	2200      	movs	r2, #0
 8005884:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	334c      	adds	r3, #76	; 0x4c
 800588c:	224c      	movs	r2, #76	; 0x4c
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f002 fbc9 	bl	8008028 <memset>
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	4a0c      	ldr	r2, [pc, #48]	; (80058cc <prvInitialiseNewTask+0x130>)
 800589a:	651a      	str	r2, [r3, #80]	; 0x50
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	4a0c      	ldr	r2, [pc, #48]	; (80058d0 <prvInitialiseNewTask+0x134>)
 80058a0:	655a      	str	r2, [r3, #84]	; 0x54
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	4a0b      	ldr	r2, [pc, #44]	; (80058d4 <prvInitialiseNewTask+0x138>)
 80058a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	69b8      	ldr	r0, [r7, #24]
 80058ae:	f000 fee5 	bl	800667c <pxPortInitialiseStack>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058c4:	bf00      	nop
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	2000436c 	.word	0x2000436c
 80058d0:	200043d4 	.word	0x200043d4
 80058d4:	2000443c 	.word	0x2000443c

080058d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058e0:	f000 fff8 	bl	80068d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058e4:	4b2a      	ldr	r3, [pc, #168]	; (8005990 <prvAddNewTaskToReadyList+0xb8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4a29      	ldr	r2, [pc, #164]	; (8005990 <prvAddNewTaskToReadyList+0xb8>)
 80058ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ee:	4b29      	ldr	r3, [pc, #164]	; (8005994 <prvAddNewTaskToReadyList+0xbc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058f6:	4a27      	ldr	r2, [pc, #156]	; (8005994 <prvAddNewTaskToReadyList+0xbc>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058fc:	4b24      	ldr	r3, [pc, #144]	; (8005990 <prvAddNewTaskToReadyList+0xb8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d110      	bne.n	8005926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005904:	f000 fbd6 	bl	80060b4 <prvInitialiseTaskLists>
 8005908:	e00d      	b.n	8005926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800590a:	4b23      	ldr	r3, [pc, #140]	; (8005998 <prvAddNewTaskToReadyList+0xc0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005912:	4b20      	ldr	r3, [pc, #128]	; (8005994 <prvAddNewTaskToReadyList+0xbc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d802      	bhi.n	8005926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005920:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <prvAddNewTaskToReadyList+0xbc>)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005926:	4b1d      	ldr	r3, [pc, #116]	; (800599c <prvAddNewTaskToReadyList+0xc4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <prvAddNewTaskToReadyList+0xc4>)
 800592e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	2201      	movs	r2, #1
 8005936:	409a      	lsls	r2, r3
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <prvAddNewTaskToReadyList+0xc8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4313      	orrs	r3, r2
 800593e:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <prvAddNewTaskToReadyList+0xc8>)
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <prvAddNewTaskToReadyList+0xcc>)
 8005950:	441a      	add	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f7ff f87c 	bl	8004a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800595e:	f000 ffe9 	bl	8006934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <prvAddNewTaskToReadyList+0xc0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00e      	beq.n	8005988 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <prvAddNewTaskToReadyList+0xbc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	429a      	cmp	r2, r3
 8005976:	d207      	bcs.n	8005988 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005978:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <prvAddNewTaskToReadyList+0xd0>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000718 	.word	0x20000718
 8005994:	20000618 	.word	0x20000618
 8005998:	20000724 	.word	0x20000724
 800599c:	20000734 	.word	0x20000734
 80059a0:	20000720 	.word	0x20000720
 80059a4:	2000061c 	.word	0x2000061c
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d017      	beq.n	80059ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059be:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <vTaskDelay+0x60>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <vTaskDelay+0x30>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	60bb      	str	r3, [r7, #8]
}
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059dc:	f000 f884 	bl	8005ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059e0:	2100      	movs	r1, #0
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fde4 	bl	80065b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059e8:	f000 f88c 	bl	8005b04 <xTaskResumeAll>
 80059ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d107      	bne.n	8005a04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <vTaskDelay+0x64>)
 80059f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000740 	.word	0x20000740
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	; 0x28
 8005a18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a22:	463a      	mov	r2, r7
 8005a24:	1d39      	adds	r1, r7, #4
 8005a26:	f107 0308 	add.w	r3, r7, #8
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fb fae8 	bl	8001000 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	9202      	str	r2, [sp, #8]
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	460a      	mov	r2, r1
 8005a42:	4921      	ldr	r1, [pc, #132]	; (8005ac8 <vTaskStartScheduler+0xb4>)
 8005a44:	4821      	ldr	r0, [pc, #132]	; (8005acc <vTaskStartScheduler+0xb8>)
 8005a46:	f7ff fe07 	bl	8005658 <xTaskCreateStatic>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4a20      	ldr	r2, [pc, #128]	; (8005ad0 <vTaskStartScheduler+0xbc>)
 8005a4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a50:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <vTaskStartScheduler+0xbc>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e001      	b.n	8005a62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d11b      	bne.n	8005aa0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	613b      	str	r3, [r7, #16]
}
 8005a7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a7c:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <vTaskStartScheduler+0xc0>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	334c      	adds	r3, #76	; 0x4c
 8005a82:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <vTaskStartScheduler+0xc4>)
 8005a84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a86:	4b15      	ldr	r3, [pc, #84]	; (8005adc <vTaskStartScheduler+0xc8>)
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <vTaskStartScheduler+0xcc>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a94:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <vTaskStartScheduler+0xd0>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a9a:	f000 fe79 	bl	8006790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a9e:	e00e      	b.n	8005abe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d10a      	bne.n	8005abe <vTaskStartScheduler+0xaa>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	60fb      	str	r3, [r7, #12]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <vTaskStartScheduler+0xa8>
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	0800b950 	.word	0x0800b950
 8005acc:	08006085 	.word	0x08006085
 8005ad0:	2000073c 	.word	0x2000073c
 8005ad4:	20000618 	.word	0x20000618
 8005ad8:	20000068 	.word	0x20000068
 8005adc:	20000738 	.word	0x20000738
 8005ae0:	20000724 	.word	0x20000724
 8005ae4:	2000071c 	.word	0x2000071c

08005ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <vTaskSuspendAll+0x18>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	4a03      	ldr	r2, [pc, #12]	; (8005b00 <vTaskSuspendAll+0x18>)
 8005af4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	20000740 	.word	0x20000740

08005b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <xTaskResumeAll+0x114>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	603b      	str	r3, [r7, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b30:	f000 fed0 	bl	80068d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b34:	4b38      	ldr	r3, [pc, #224]	; (8005c18 <xTaskResumeAll+0x114>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4a37      	ldr	r2, [pc, #220]	; (8005c18 <xTaskResumeAll+0x114>)
 8005b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b3e:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <xTaskResumeAll+0x114>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d161      	bne.n	8005c0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b46:	4b35      	ldr	r3, [pc, #212]	; (8005c1c <xTaskResumeAll+0x118>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d05d      	beq.n	8005c0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b4e:	e02e      	b.n	8005bae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b50:	4b33      	ldr	r3, [pc, #204]	; (8005c20 <xTaskResumeAll+0x11c>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3318      	adds	r3, #24
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe ffd7 	bl	8004b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3304      	adds	r3, #4
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe ffd2 	bl	8004b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	2201      	movs	r2, #1
 8005b72:	409a      	lsls	r2, r3
 8005b74:	4b2b      	ldr	r3, [pc, #172]	; (8005c24 <xTaskResumeAll+0x120>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	4a2a      	ldr	r2, [pc, #168]	; (8005c24 <xTaskResumeAll+0x120>)
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a27      	ldr	r2, [pc, #156]	; (8005c28 <xTaskResumeAll+0x124>)
 8005b8c:	441a      	add	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7fe ff5e 	bl	8004a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <xTaskResumeAll+0x128>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d302      	bcc.n	8005bae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ba8:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <xTaskResumeAll+0x12c>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bae:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <xTaskResumeAll+0x11c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1cc      	bne.n	8005b50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bbc:	f000 fb1c 	bl	80061f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bc0:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <xTaskResumeAll+0x130>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d010      	beq.n	8005bee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bcc:	f000 f836 	bl	8005c3c <xTaskIncrementTick>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <xTaskResumeAll+0x12c>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f1      	bne.n	8005bcc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <xTaskResumeAll+0x130>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bee:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <xTaskResumeAll+0x12c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bfa:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <xTaskResumeAll+0x134>)
 8005bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c0a:	f000 fe93 	bl	8006934 <vPortExitCritical>

	return xAlreadyYielded;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000740 	.word	0x20000740
 8005c1c:	20000718 	.word	0x20000718
 8005c20:	200006d8 	.word	0x200006d8
 8005c24:	20000720 	.word	0x20000720
 8005c28:	2000061c 	.word	0x2000061c
 8005c2c:	20000618 	.word	0x20000618
 8005c30:	2000072c 	.word	0x2000072c
 8005c34:	20000728 	.word	0x20000728
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c46:	4b4e      	ldr	r3, [pc, #312]	; (8005d80 <xTaskIncrementTick+0x144>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f040 808e 	bne.w	8005d6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c50:	4b4c      	ldr	r3, [pc, #304]	; (8005d84 <xTaskIncrementTick+0x148>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c58:	4a4a      	ldr	r2, [pc, #296]	; (8005d84 <xTaskIncrementTick+0x148>)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d120      	bne.n	8005ca6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c64:	4b48      	ldr	r3, [pc, #288]	; (8005d88 <xTaskIncrementTick+0x14c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	603b      	str	r3, [r7, #0]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <xTaskIncrementTick+0x46>
 8005c84:	4b40      	ldr	r3, [pc, #256]	; (8005d88 <xTaskIncrementTick+0x14c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <xTaskIncrementTick+0x150>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a3e      	ldr	r2, [pc, #248]	; (8005d88 <xTaskIncrementTick+0x14c>)
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	4a3e      	ldr	r2, [pc, #248]	; (8005d8c <xTaskIncrementTick+0x150>)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	4b3d      	ldr	r3, [pc, #244]	; (8005d90 <xTaskIncrementTick+0x154>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	4a3c      	ldr	r2, [pc, #240]	; (8005d90 <xTaskIncrementTick+0x154>)
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	f000 faa9 	bl	80061f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ca6:	4b3b      	ldr	r3, [pc, #236]	; (8005d94 <xTaskIncrementTick+0x158>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d348      	bcc.n	8005d42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cb0:	4b35      	ldr	r3, [pc, #212]	; (8005d88 <xTaskIncrementTick+0x14c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cba:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <xTaskIncrementTick+0x158>)
 8005cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc0:	601a      	str	r2, [r3, #0]
					break;
 8005cc2:	e03e      	b.n	8005d42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc4:	4b30      	ldr	r3, [pc, #192]	; (8005d88 <xTaskIncrementTick+0x14c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d203      	bcs.n	8005ce4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cdc:	4a2d      	ldr	r2, [pc, #180]	; (8005d94 <xTaskIncrementTick+0x158>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ce2:	e02e      	b.n	8005d42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe ff11 	bl	8004b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	3318      	adds	r3, #24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe ff08 	bl	8004b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	2201      	movs	r2, #1
 8005d06:	409a      	lsls	r2, r3
 8005d08:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <xTaskIncrementTick+0x15c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <xTaskIncrementTick+0x15c>)
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <xTaskIncrementTick+0x160>)
 8005d20:	441a      	add	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	3304      	adds	r3, #4
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f7fe fe94 	bl	8004a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	4b1b      	ldr	r3, [pc, #108]	; (8005da0 <xTaskIncrementTick+0x164>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d3b9      	bcc.n	8005cb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d40:	e7b6      	b.n	8005cb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <xTaskIncrementTick+0x164>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4914      	ldr	r1, [pc, #80]	; (8005d9c <xTaskIncrementTick+0x160>)
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d901      	bls.n	8005d5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <xTaskIncrementTick+0x168>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	e004      	b.n	8005d76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <xTaskIncrementTick+0x16c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	4a0d      	ldr	r2, [pc, #52]	; (8005da8 <xTaskIncrementTick+0x16c>)
 8005d74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d76:	697b      	ldr	r3, [r7, #20]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000740 	.word	0x20000740
 8005d84:	2000071c 	.word	0x2000071c
 8005d88:	200006d0 	.word	0x200006d0
 8005d8c:	200006d4 	.word	0x200006d4
 8005d90:	20000730 	.word	0x20000730
 8005d94:	20000738 	.word	0x20000738
 8005d98:	20000720 	.word	0x20000720
 8005d9c:	2000061c 	.word	0x2000061c
 8005da0:	20000618 	.word	0x20000618
 8005da4:	2000072c 	.word	0x2000072c
 8005da8:	20000728 	.word	0x20000728

08005dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005db2:	4b29      	ldr	r3, [pc, #164]	; (8005e58 <vTaskSwitchContext+0xac>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dba:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <vTaskSwitchContext+0xb0>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dc0:	e044      	b.n	8005e4c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005dc2:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <vTaskSwitchContext+0xb0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc8:	4b25      	ldr	r3, [pc, #148]	; (8005e60 <vTaskSwitchContext+0xb4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	fab3 f383 	clz	r3, r3
 8005dd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005dd6:	7afb      	ldrb	r3, [r7, #11]
 8005dd8:	f1c3 031f 	rsb	r3, r3, #31
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	4921      	ldr	r1, [pc, #132]	; (8005e64 <vTaskSwitchContext+0xb8>)
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	607b      	str	r3, [r7, #4]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <vTaskSwitchContext+0x5a>
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4a14      	ldr	r2, [pc, #80]	; (8005e64 <vTaskSwitchContext+0xb8>)
 8005e14:	4413      	add	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d104      	bne.n	8005e38 <vTaskSwitchContext+0x8c>
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4a0a      	ldr	r2, [pc, #40]	; (8005e68 <vTaskSwitchContext+0xbc>)
 8005e40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e42:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <vTaskSwitchContext+0xbc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	334c      	adds	r3, #76	; 0x4c
 8005e48:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <vTaskSwitchContext+0xc0>)
 8005e4a:	6013      	str	r3, [r2, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000740 	.word	0x20000740
 8005e5c:	2000072c 	.word	0x2000072c
 8005e60:	20000720 	.word	0x20000720
 8005e64:	2000061c 	.word	0x2000061c
 8005e68:	20000618 	.word	0x20000618
 8005e6c:	20000068 	.word	0x20000068

08005e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e96:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <vTaskPlaceOnEventList+0x44>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3318      	adds	r3, #24
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fe fdfd 	bl	8004a9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f000 fb82 	bl	80065b0 <prvAddCurrentTaskToDelayedList>
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000618 	.word	0x20000618

08005eb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	60fb      	str	r3, [r7, #12]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3318      	adds	r3, #24
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fe11 	bl	8004b10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <xTaskRemoveFromEventList+0xac>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d11c      	bne.n	8005f30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe fe08 	bl	8004b10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	2201      	movs	r2, #1
 8005f06:	409a      	lsls	r2, r3
 8005f08:	4b17      	ldr	r3, [pc, #92]	; (8005f68 <xTaskRemoveFromEventList+0xb0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <xTaskRemoveFromEventList+0xb0>)
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <xTaskRemoveFromEventList+0xb4>)
 8005f20:	441a      	add	r2, r3
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	3304      	adds	r3, #4
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f7fe fd94 	bl	8004a56 <vListInsertEnd>
 8005f2e:	e005      	b.n	8005f3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	3318      	adds	r3, #24
 8005f34:	4619      	mov	r1, r3
 8005f36:	480e      	ldr	r0, [pc, #56]	; (8005f70 <xTaskRemoveFromEventList+0xb8>)
 8005f38:	f7fe fd8d 	bl	8004a56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f40:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <xTaskRemoveFromEventList+0xbc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d905      	bls.n	8005f56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <xTaskRemoveFromEventList+0xc0>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e001      	b.n	8005f5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000740 	.word	0x20000740
 8005f68:	20000720 	.word	0x20000720
 8005f6c:	2000061c 	.word	0x2000061c
 8005f70:	200006d8 	.word	0x200006d8
 8005f74:	20000618 	.word	0x20000618
 8005f78:	2000072c 	.word	0x2000072c

08005f7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <vTaskInternalSetTimeOutState+0x24>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <vTaskInternalSetTimeOutState+0x28>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	605a      	str	r2, [r3, #4]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000730 	.word	0x20000730
 8005fa4:	2000071c 	.word	0x2000071c

08005fa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	613b      	str	r3, [r7, #16]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	60fb      	str	r3, [r7, #12]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005fea:	f000 fc73 	bl	80068d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fee:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <xTaskCheckForTimeOut+0xbc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d102      	bne.n	800600e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	e023      	b.n	8006056 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <xTaskCheckForTimeOut+0xc0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d007      	beq.n	800602a <xTaskCheckForTimeOut+0x82>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	e015      	b.n	8006056 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	429a      	cmp	r2, r3
 8006032:	d20b      	bcs.n	800604c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ff9b 	bl	8005f7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	e004      	b.n	8006056 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006052:	2301      	movs	r3, #1
 8006054:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006056:	f000 fc6d 	bl	8006934 <vPortExitCritical>

	return xReturn;
 800605a:	69fb      	ldr	r3, [r7, #28]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3720      	adds	r7, #32
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	2000071c 	.word	0x2000071c
 8006068:	20000730 	.word	0x20000730

0800606c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <vTaskMissedYield+0x14>)
 8006072:	2201      	movs	r2, #1
 8006074:	601a      	str	r2, [r3, #0]
}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	2000072c 	.word	0x2000072c

08006084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800608c:	f000 f852 	bl	8006134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <prvIdleTask+0x28>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d9f9      	bls.n	800608c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <prvIdleTask+0x2c>)
 800609a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060a8:	e7f0      	b.n	800608c <prvIdleTask+0x8>
 80060aa:	bf00      	nop
 80060ac:	2000061c 	.word	0x2000061c
 80060b0:	e000ed04 	.word	0xe000ed04

080060b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ba:	2300      	movs	r3, #0
 80060bc:	607b      	str	r3, [r7, #4]
 80060be:	e00c      	b.n	80060da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4a12      	ldr	r2, [pc, #72]	; (8006114 <prvInitialiseTaskLists+0x60>)
 80060cc:	4413      	add	r3, r2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fc94 	bl	80049fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3301      	adds	r3, #1
 80060d8:	607b      	str	r3, [r7, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b06      	cmp	r3, #6
 80060de:	d9ef      	bls.n	80060c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060e0:	480d      	ldr	r0, [pc, #52]	; (8006118 <prvInitialiseTaskLists+0x64>)
 80060e2:	f7fe fc8b 	bl	80049fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060e6:	480d      	ldr	r0, [pc, #52]	; (800611c <prvInitialiseTaskLists+0x68>)
 80060e8:	f7fe fc88 	bl	80049fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060ec:	480c      	ldr	r0, [pc, #48]	; (8006120 <prvInitialiseTaskLists+0x6c>)
 80060ee:	f7fe fc85 	bl	80049fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060f2:	480c      	ldr	r0, [pc, #48]	; (8006124 <prvInitialiseTaskLists+0x70>)
 80060f4:	f7fe fc82 	bl	80049fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060f8:	480b      	ldr	r0, [pc, #44]	; (8006128 <prvInitialiseTaskLists+0x74>)
 80060fa:	f7fe fc7f 	bl	80049fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <prvInitialiseTaskLists+0x78>)
 8006100:	4a05      	ldr	r2, [pc, #20]	; (8006118 <prvInitialiseTaskLists+0x64>)
 8006102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <prvInitialiseTaskLists+0x7c>)
 8006106:	4a05      	ldr	r2, [pc, #20]	; (800611c <prvInitialiseTaskLists+0x68>)
 8006108:	601a      	str	r2, [r3, #0]
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	2000061c 	.word	0x2000061c
 8006118:	200006a8 	.word	0x200006a8
 800611c:	200006bc 	.word	0x200006bc
 8006120:	200006d8 	.word	0x200006d8
 8006124:	200006ec 	.word	0x200006ec
 8006128:	20000704 	.word	0x20000704
 800612c:	200006d0 	.word	0x200006d0
 8006130:	200006d4 	.word	0x200006d4

08006134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800613a:	e019      	b.n	8006170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800613c:	f000 fbca 	bl	80068d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <prvCheckTasksWaitingTermination+0x50>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3304      	adds	r3, #4
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe fcdf 	bl	8004b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006152:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <prvCheckTasksWaitingTermination+0x54>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	4a0b      	ldr	r2, [pc, #44]	; (8006188 <prvCheckTasksWaitingTermination+0x54>)
 800615a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800615c:	4b0b      	ldr	r3, [pc, #44]	; (800618c <prvCheckTasksWaitingTermination+0x58>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3b01      	subs	r3, #1
 8006162:	4a0a      	ldr	r2, [pc, #40]	; (800618c <prvCheckTasksWaitingTermination+0x58>)
 8006164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006166:	f000 fbe5 	bl	8006934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f810 	bl	8006190 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <prvCheckTasksWaitingTermination+0x58>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e1      	bne.n	800613c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	200006ec 	.word	0x200006ec
 8006188:	20000718 	.word	0x20000718
 800618c:	20000700 	.word	0x20000700

08006190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	334c      	adds	r3, #76	; 0x4c
 800619c:	4618      	mov	r0, r3
 800619e:	f001 ff5f 	bl	8008060 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d108      	bne.n	80061be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fd7d 	bl	8006cb0 <vPortFree>
				vPortFree( pxTCB );
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fd7a 	bl	8006cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061bc:	e018      	b.n	80061f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d103      	bne.n	80061d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fd71 	bl	8006cb0 <vPortFree>
	}
 80061ce:	e00f      	b.n	80061f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d00a      	beq.n	80061f0 <prvDeleteTCB+0x60>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	60fb      	str	r3, [r7, #12]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <prvDeleteTCB+0x5e>
	}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <prvResetNextTaskUnblockTime+0x38>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <prvResetNextTaskUnblockTime+0x3c>)
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006210:	e008      	b.n	8006224 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <prvResetNextTaskUnblockTime+0x38>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a04      	ldr	r2, [pc, #16]	; (8006234 <prvResetNextTaskUnblockTime+0x3c>)
 8006222:	6013      	str	r3, [r2, #0]
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	200006d0 	.word	0x200006d0
 8006234:	20000738 	.word	0x20000738

08006238 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800623e:	4b0b      	ldr	r3, [pc, #44]	; (800626c <xTaskGetSchedulerState+0x34>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006246:	2301      	movs	r3, #1
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	e008      	b.n	800625e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800624c:	4b08      	ldr	r3, [pc, #32]	; (8006270 <xTaskGetSchedulerState+0x38>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d102      	bne.n	800625a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006254:	2302      	movs	r3, #2
 8006256:	607b      	str	r3, [r7, #4]
 8006258:	e001      	b.n	800625e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800625a:	2300      	movs	r3, #0
 800625c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800625e:	687b      	ldr	r3, [r7, #4]
	}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000724 	.word	0x20000724
 8006270:	20000740 	.word	0x20000740

08006274 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d05e      	beq.n	8006348 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628e:	4b31      	ldr	r3, [pc, #196]	; (8006354 <xTaskPriorityInherit+0xe0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	429a      	cmp	r2, r3
 8006296:	d24e      	bcs.n	8006336 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	db06      	blt.n	80062ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a0:	4b2c      	ldr	r3, [pc, #176]	; (8006354 <xTaskPriorityInherit+0xe0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	f1c3 0207 	rsb	r2, r3, #7
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6959      	ldr	r1, [r3, #20]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4a26      	ldr	r2, [pc, #152]	; (8006358 <xTaskPriorityInherit+0xe4>)
 80062c0:	4413      	add	r3, r2
 80062c2:	4299      	cmp	r1, r3
 80062c4:	d12f      	bne.n	8006326 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fc20 	bl	8004b10 <uxListRemove>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	2201      	movs	r2, #1
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43da      	mvns	r2, r3
 80062e2:	4b1e      	ldr	r3, [pc, #120]	; (800635c <xTaskPriorityInherit+0xe8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4013      	ands	r3, r2
 80062e8:	4a1c      	ldr	r2, [pc, #112]	; (800635c <xTaskPriorityInherit+0xe8>)
 80062ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062ec:	4b19      	ldr	r3, [pc, #100]	; (8006354 <xTaskPriorityInherit+0xe0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	2201      	movs	r2, #1
 80062fc:	409a      	lsls	r2, r3
 80062fe:	4b17      	ldr	r3, [pc, #92]	; (800635c <xTaskPriorityInherit+0xe8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4313      	orrs	r3, r2
 8006304:	4a15      	ldr	r2, [pc, #84]	; (800635c <xTaskPriorityInherit+0xe8>)
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4a10      	ldr	r2, [pc, #64]	; (8006358 <xTaskPriorityInherit+0xe4>)
 8006316:	441a      	add	r2, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	3304      	adds	r3, #4
 800631c:	4619      	mov	r1, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f7fe fb99 	bl	8004a56 <vListInsertEnd>
 8006324:	e004      	b.n	8006330 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <xTaskPriorityInherit+0xe0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006330:	2301      	movs	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	e008      	b.n	8006348 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633a:	4b06      	ldr	r3, [pc, #24]	; (8006354 <xTaskPriorityInherit+0xe0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	429a      	cmp	r2, r3
 8006342:	d201      	bcs.n	8006348 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006344:	2301      	movs	r3, #1
 8006346:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006348:	68fb      	ldr	r3, [r7, #12]
	}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000618 	.word	0x20000618
 8006358:	2000061c 	.word	0x2000061c
 800635c:	20000720 	.word	0x20000720

08006360 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d06e      	beq.n	8006454 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006376:	4b3a      	ldr	r3, [pc, #232]	; (8006460 <xTaskPriorityDisinherit+0x100>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	429a      	cmp	r2, r3
 800637e:	d00a      	beq.n	8006396 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60bb      	str	r3, [r7, #8]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b8:	1e5a      	subs	r2, r3, #1
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d044      	beq.n	8006454 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d140      	bne.n	8006454 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fb9a 	bl	8004b10 <uxListRemove>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d115      	bne.n	800640e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e6:	491f      	ldr	r1, [pc, #124]	; (8006464 <xTaskPriorityDisinherit+0x104>)
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <xTaskPriorityDisinherit+0xae>
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	2201      	movs	r2, #1
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43da      	mvns	r2, r3
 8006404:	4b18      	ldr	r3, [pc, #96]	; (8006468 <xTaskPriorityDisinherit+0x108>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4013      	ands	r3, r2
 800640a:	4a17      	ldr	r2, [pc, #92]	; (8006468 <xTaskPriorityDisinherit+0x108>)
 800640c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	f1c3 0207 	rsb	r2, r3, #7
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	2201      	movs	r2, #1
 8006428:	409a      	lsls	r2, r3
 800642a:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <xTaskPriorityDisinherit+0x108>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4313      	orrs	r3, r2
 8006430:	4a0d      	ldr	r2, [pc, #52]	; (8006468 <xTaskPriorityDisinherit+0x108>)
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <xTaskPriorityDisinherit+0x104>)
 8006442:	441a      	add	r2, r3
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	3304      	adds	r3, #4
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f7fe fb03 	bl	8004a56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006454:	697b      	ldr	r3, [r7, #20]
	}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000618 	.word	0x20000618
 8006464:	2000061c 	.word	0x2000061c
 8006468:	20000720 	.word	0x20000720

0800646c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800647a:	2301      	movs	r3, #1
 800647c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d077      	beq.n	8006574 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d902      	bls.n	80064b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e002      	b.n	80064b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d058      	beq.n	8006574 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d153      	bne.n	8006574 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80064cc:	4b2b      	ldr	r3, [pc, #172]	; (800657c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d10a      	bne.n	80064ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60bb      	str	r3, [r7, #8]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	db04      	blt.n	800650a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f1c3 0207 	rsb	r2, r3, #7
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	6959      	ldr	r1, [r3, #20]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4a19      	ldr	r2, [pc, #100]	; (8006580 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800651a:	4413      	add	r3, r2
 800651c:	4299      	cmp	r1, r3
 800651e:	d129      	bne.n	8006574 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	3304      	adds	r3, #4
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe faf3 	bl	8004b10 <uxListRemove>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	2201      	movs	r2, #1
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43da      	mvns	r2, r3
 800653c:	4b11      	ldr	r3, [pc, #68]	; (8006584 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4013      	ands	r3, r2
 8006542:	4a10      	ldr	r2, [pc, #64]	; (8006584 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006544:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	2201      	movs	r2, #1
 800654c:	409a      	lsls	r2, r3
 800654e:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4313      	orrs	r3, r2
 8006554:	4a0b      	ldr	r2, [pc, #44]	; (8006584 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4a06      	ldr	r2, [pc, #24]	; (8006580 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006566:	441a      	add	r2, r3
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f7fe fa71 	bl	8004a56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006574:	bf00      	nop
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000618 	.word	0x20000618
 8006580:	2000061c 	.word	0x2000061c
 8006584:	20000720 	.word	0x20000720

08006588 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <pvTaskIncrementMutexHeldCount+0x24>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <pvTaskIncrementMutexHeldCount+0x24>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800659a:	3201      	adds	r2, #1
 800659c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800659e:	4b03      	ldr	r3, [pc, #12]	; (80065ac <pvTaskIncrementMutexHeldCount+0x24>)
 80065a0:	681b      	ldr	r3, [r3, #0]
	}
 80065a2:	4618      	mov	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000618 	.word	0x20000618

080065b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065ba:	4b29      	ldr	r3, [pc, #164]	; (8006660 <prvAddCurrentTaskToDelayedList+0xb0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065c0:	4b28      	ldr	r3, [pc, #160]	; (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe faa2 	bl	8004b10 <uxListRemove>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065d2:	4b24      	ldr	r3, [pc, #144]	; (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	2201      	movs	r2, #1
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43da      	mvns	r2, r3
 80065e0:	4b21      	ldr	r3, [pc, #132]	; (8006668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4013      	ands	r3, r2
 80065e6:	4a20      	ldr	r2, [pc, #128]	; (8006668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d10a      	bne.n	8006608 <prvAddCurrentTaskToDelayedList+0x58>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f8:	4b1a      	ldr	r3, [pc, #104]	; (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4619      	mov	r1, r3
 8006600:	481a      	ldr	r0, [pc, #104]	; (800666c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006602:	f7fe fa28 	bl	8004a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006606:	e026      	b.n	8006656 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006610:	4b14      	ldr	r3, [pc, #80]	; (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d209      	bcs.n	8006634 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006620:	4b13      	ldr	r3, [pc, #76]	; (8006670 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7fe fa36 	bl	8004a9e <vListInsert>
}
 8006632:	e010      	b.n	8006656 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006634:	4b0f      	ldr	r3, [pc, #60]	; (8006674 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fe fa2c 	bl	8004a9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	429a      	cmp	r2, r3
 800664e:	d202      	bcs.n	8006656 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006650:	4a09      	ldr	r2, [pc, #36]	; (8006678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6013      	str	r3, [r2, #0]
}
 8006656:	bf00      	nop
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	2000071c 	.word	0x2000071c
 8006664:	20000618 	.word	0x20000618
 8006668:	20000720 	.word	0x20000720
 800666c:	20000704 	.word	0x20000704
 8006670:	200006d4 	.word	0x200006d4
 8006674:	200006d0 	.word	0x200006d0
 8006678:	20000738 	.word	0x20000738

0800667c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3b04      	subs	r3, #4
 800668c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3b04      	subs	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3b04      	subs	r3, #4
 80066aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066ac:	4a0c      	ldr	r2, [pc, #48]	; (80066e0 <pxPortInitialiseStack+0x64>)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3b14      	subs	r3, #20
 80066b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b04      	subs	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f06f 0202 	mvn.w	r2, #2
 80066ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3b20      	subs	r3, #32
 80066d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066d2:	68fb      	ldr	r3, [r7, #12]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	080066e5 	.word	0x080066e5

080066e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <prvTaskExitError+0x54>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d00a      	beq.n	800670e <prvTaskExitError+0x2a>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	60fb      	str	r3, [r7, #12]
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <prvTaskExitError+0x28>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60bb      	str	r3, [r7, #8]
}
 8006720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006722:	bf00      	nop
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0fc      	beq.n	8006724 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	2000000c 	.word	0x2000000c
 800673c:	00000000 	.word	0x00000000

08006740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	4770      	bx	lr
 800675c:	f3af 8000 	nop.w

08006760 <pxCurrentTCBConst2>:
 8006760:	20000618 	.word	0x20000618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006768:	4808      	ldr	r0, [pc, #32]	; (800678c <prvPortStartFirstTask+0x24>)
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f380 8808 	msr	MSP, r0
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8814 	msr	CONTROL, r0
 800677a:	b662      	cpsie	i
 800677c:	b661      	cpsie	f
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	df00      	svc	0
 8006788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800678a:	bf00      	nop
 800678c:	e000ed08 	.word	0xe000ed08

08006790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006796:	4b46      	ldr	r3, [pc, #280]	; (80068b0 <xPortStartScheduler+0x120>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a46      	ldr	r2, [pc, #280]	; (80068b4 <xPortStartScheduler+0x124>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10a      	bne.n	80067b6 <xPortStartScheduler+0x26>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	613b      	str	r3, [r7, #16]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067b6:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <xPortStartScheduler+0x120>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a3f      	ldr	r2, [pc, #252]	; (80068b8 <xPortStartScheduler+0x128>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10a      	bne.n	80067d6 <xPortStartScheduler+0x46>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60fb      	str	r3, [r7, #12]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067d6:	4b39      	ldr	r3, [pc, #228]	; (80068bc <xPortStartScheduler+0x12c>)
 80067d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <xPortStartScheduler+0x130>)
 80067fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <xPortStartScheduler+0x134>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006804:	e009      	b.n	800681a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006806:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <xPortStartScheduler+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3b01      	subs	r3, #1
 800680c:	4a2d      	ldr	r2, [pc, #180]	; (80068c4 <xPortStartScheduler+0x134>)
 800680e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d0ef      	beq.n	8006806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006826:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <xPortStartScheduler+0x134>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1c3 0307 	rsb	r3, r3, #7
 800682e:	2b04      	cmp	r3, #4
 8006830:	d00a      	beq.n	8006848 <xPortStartScheduler+0xb8>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60bb      	str	r3, [r7, #8]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <xPortStartScheduler+0x134>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <xPortStartScheduler+0x134>)
 8006850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <xPortStartScheduler+0x134>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <xPortStartScheduler+0x134>)
 800685c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <xPortStartScheduler+0x138>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <xPortStartScheduler+0x138>)
 800686c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <xPortStartScheduler+0x138>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <xPortStartScheduler+0x138>)
 8006878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800687c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800687e:	f000 f8dd 	bl	8006a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <xPortStartScheduler+0x13c>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006888:	f000 f8fc 	bl	8006a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <xPortStartScheduler+0x140>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0f      	ldr	r2, [pc, #60]	; (80068d0 <xPortStartScheduler+0x140>)
 8006892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006898:	f7ff ff66 	bl	8006768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800689c:	f7ff fa86 	bl	8005dac <vTaskSwitchContext>
	prvTaskExitError();
 80068a0:	f7ff ff20 	bl	80066e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	e000ed00 	.word	0xe000ed00
 80068b4:	410fc271 	.word	0x410fc271
 80068b8:	410fc270 	.word	0x410fc270
 80068bc:	e000e400 	.word	0xe000e400
 80068c0:	20000744 	.word	0x20000744
 80068c4:	20000748 	.word	0x20000748
 80068c8:	e000ed20 	.word	0xe000ed20
 80068cc:	2000000c 	.word	0x2000000c
 80068d0:	e000ef34 	.word	0xe000ef34

080068d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
}
 80068ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ee:	4b0f      	ldr	r3, [pc, #60]	; (800692c <vPortEnterCritical+0x58>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	4a0d      	ldr	r2, [pc, #52]	; (800692c <vPortEnterCritical+0x58>)
 80068f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <vPortEnterCritical+0x58>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10f      	bne.n	8006920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <vPortEnterCritical+0x5c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <vPortEnterCritical+0x4c>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	603b      	str	r3, [r7, #0]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vPortEnterCritical+0x4a>
	}
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	2000000c 	.word	0x2000000c
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <vPortExitCritical+0x50>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <vPortExitCritical+0x24>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	607b      	str	r3, [r7, #4]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <vPortExitCritical+0x50>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	4a09      	ldr	r2, [pc, #36]	; (8006984 <vPortExitCritical+0x50>)
 8006960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006962:	4b08      	ldr	r3, [pc, #32]	; (8006984 <vPortExitCritical+0x50>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <vPortExitCritical+0x42>
 800696a:	2300      	movs	r3, #0
 800696c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f383 8811 	msr	BASEPRI, r3
}
 8006974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	2000000c 	.word	0x2000000c
	...

08006990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006990:	f3ef 8009 	mrs	r0, PSP
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <pxCurrentTCBConst>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	f01e 0f10 	tst.w	lr, #16
 80069a0:	bf08      	it	eq
 80069a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069b4:	f380 8811 	msr	BASEPRI, r0
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f7ff f9f4 	bl	8005dac <vTaskSwitchContext>
 80069c4:	f04f 0000 	mov.w	r0, #0
 80069c8:	f380 8811 	msr	BASEPRI, r0
 80069cc:	bc09      	pop	{r0, r3}
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	6808      	ldr	r0, [r1, #0]
 80069d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d6:	f01e 0f10 	tst.w	lr, #16
 80069da:	bf08      	it	eq
 80069dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069e0:	f380 8809 	msr	PSP, r0
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w

080069f0 <pxCurrentTCBConst>:
 80069f0:	20000618 	.word	0x20000618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop

080069f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a12:	f7ff f913 	bl	8005c3c <xTaskIncrementTick>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <SysTick_Handler+0x40>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
}
 8006a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <vPortSetupTimerInterrupt+0x38>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <vPortSetupTimerInterrupt+0x3c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <vPortSetupTimerInterrupt+0x40>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <vPortSetupTimerInterrupt+0x44>)
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a5e:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a60:	2207      	movs	r2, #7
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	e000e010 	.word	0xe000e010
 8006a74:	e000e018 	.word	0xe000e018
 8006a78:	20000000 	.word	0x20000000
 8006a7c:	10624dd3 	.word	0x10624dd3
 8006a80:	e000e014 	.word	0xe000e014

08006a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a94 <vPortEnableVFP+0x10>
 8006a88:	6801      	ldr	r1, [r0, #0]
 8006a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a8e:	6001      	str	r1, [r0, #0]
 8006a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a92:	bf00      	nop
 8006a94:	e000ed88 	.word	0xe000ed88

08006a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a9e:	f3ef 8305 	mrs	r3, IPSR
 8006aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b0f      	cmp	r3, #15
 8006aa8:	d914      	bls.n	8006ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aaa:	4a17      	ldr	r2, [pc, #92]	; (8006b08 <vPortValidateInterruptPriority+0x70>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <vPortValidateInterruptPriority+0x74>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	7afa      	ldrb	r2, [r7, #11]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d20a      	bcs.n	8006ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <vPortValidateInterruptPriority+0x78>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <vPortValidateInterruptPriority+0x7c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d90a      	bls.n	8006afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	603b      	str	r3, [r7, #0]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <vPortValidateInterruptPriority+0x60>
	}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	e000e3f0 	.word	0xe000e3f0
 8006b0c:	20000744 	.word	0x20000744
 8006b10:	e000ed0c 	.word	0xe000ed0c
 8006b14:	20000748 	.word	0x20000748

08006b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b24:	f7fe ffe0 	bl	8005ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b28:	4b5b      	ldr	r3, [pc, #364]	; (8006c98 <pvPortMalloc+0x180>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b30:	f000 f920 	bl	8006d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b34:	4b59      	ldr	r3, [pc, #356]	; (8006c9c <pvPortMalloc+0x184>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 8093 	bne.w	8006c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01d      	beq.n	8006b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b48:	2208      	movs	r2, #8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d014      	beq.n	8006b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f023 0307 	bic.w	r3, r3, #7
 8006b60:	3308      	adds	r3, #8
 8006b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <pvPortMalloc+0x6c>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	617b      	str	r3, [r7, #20]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d06e      	beq.n	8006c68 <pvPortMalloc+0x150>
 8006b8a:	4b45      	ldr	r3, [pc, #276]	; (8006ca0 <pvPortMalloc+0x188>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d869      	bhi.n	8006c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b94:	4b43      	ldr	r3, [pc, #268]	; (8006ca4 <pvPortMalloc+0x18c>)
 8006b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b98:	4b42      	ldr	r3, [pc, #264]	; (8006ca4 <pvPortMalloc+0x18c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b9e:	e004      	b.n	8006baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d903      	bls.n	8006bbc <pvPortMalloc+0xa4>
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f1      	bne.n	8006ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bbc:	4b36      	ldr	r3, [pc, #216]	; (8006c98 <pvPortMalloc+0x180>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d050      	beq.n	8006c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2208      	movs	r2, #8
 8006bcc:	4413      	add	r3, r2
 8006bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	2308      	movs	r3, #8
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d91f      	bls.n	8006c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <pvPortMalloc+0xf8>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	613b      	str	r3, [r7, #16]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c22:	69b8      	ldr	r0, [r7, #24]
 8006c24:	f000 f908 	bl	8006e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <pvPortMalloc+0x188>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <pvPortMalloc+0x188>)
 8006c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c36:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <pvPortMalloc+0x188>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <pvPortMalloc+0x190>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d203      	bcs.n	8006c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <pvPortMalloc+0x188>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <pvPortMalloc+0x190>)
 8006c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <pvPortMalloc+0x184>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <pvPortMalloc+0x194>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	4a11      	ldr	r2, [pc, #68]	; (8006cac <pvPortMalloc+0x194>)
 8006c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c68:	f7fe ff4c 	bl	8005b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <pvPortMalloc+0x174>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	60fb      	str	r3, [r7, #12]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <pvPortMalloc+0x172>
	return pvReturn;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3728      	adds	r7, #40	; 0x28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20004354 	.word	0x20004354
 8006c9c:	20004368 	.word	0x20004368
 8006ca0:	20004358 	.word	0x20004358
 8006ca4:	2000434c 	.word	0x2000434c
 8006ca8:	2000435c 	.word	0x2000435c
 8006cac:	20004360 	.word	0x20004360

08006cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d04d      	beq.n	8006d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	425b      	negs	r3, r3
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4413      	add	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	4b24      	ldr	r3, [pc, #144]	; (8006d68 <vPortFree+0xb8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <vPortFree+0x44>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <vPortFree+0x62>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60bb      	str	r3, [r7, #8]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <vPortFree+0xb8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01e      	beq.n	8006d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11a      	bne.n	8006d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <vPortFree+0xb8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	43db      	mvns	r3, r3
 8006d32:	401a      	ands	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d38:	f7fe fed6 	bl	8005ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <vPortFree+0xbc>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4413      	add	r3, r2
 8006d46:	4a09      	ldr	r2, [pc, #36]	; (8006d6c <vPortFree+0xbc>)
 8006d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d4a:	6938      	ldr	r0, [r7, #16]
 8006d4c:	f000 f874 	bl	8006e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d50:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <vPortFree+0xc0>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3301      	adds	r3, #1
 8006d56:	4a06      	ldr	r2, [pc, #24]	; (8006d70 <vPortFree+0xc0>)
 8006d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d5a:	f7fe fed3 	bl	8005b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d5e:	bf00      	nop
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20004368 	.word	0x20004368
 8006d6c:	20004358 	.word	0x20004358
 8006d70:	20004364 	.word	0x20004364

08006d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d80:	4b27      	ldr	r3, [pc, #156]	; (8006e20 <prvHeapInit+0xac>)
 8006d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3307      	adds	r3, #7
 8006d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0307 	bic.w	r3, r3, #7
 8006d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <prvHeapInit+0xac>)
 8006da4:	4413      	add	r3, r2
 8006da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dac:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <prvHeapInit+0xb0>)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006db2:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <prvHeapInit+0xb0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0307 	bic.w	r3, r3, #7
 8006dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4a15      	ldr	r2, [pc, #84]	; (8006e28 <prvHeapInit+0xb4>)
 8006dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <prvHeapInit+0xb4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dde:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <prvHeapInit+0xb4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006df4:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <prvHeapInit+0xb4>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <prvHeapInit+0xb8>)
 8006e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <prvHeapInit+0xbc>)
 8006e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e0c:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <prvHeapInit+0xc0>)
 8006e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	2000074c 	.word	0x2000074c
 8006e24:	2000434c 	.word	0x2000434c
 8006e28:	20004354 	.word	0x20004354
 8006e2c:	2000435c 	.word	0x2000435c
 8006e30:	20004358 	.word	0x20004358
 8006e34:	20004368 	.word	0x20004368

08006e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e40:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <prvInsertBlockIntoFreeList+0xac>)
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e002      	b.n	8006e4c <prvInsertBlockIntoFreeList+0x14>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d8f7      	bhi.n	8006e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	4413      	add	r3, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d108      	bne.n	8006e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	441a      	add	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	441a      	add	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d118      	bne.n	8006ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d00d      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e008      	b.n	8006ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	e003      	b.n	8006ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d002      	beq.n	8006ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	2000434c 	.word	0x2000434c
 8006ee8:	20004354 	.word	0x20004354

08006eec <__cvt>:
 8006eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef0:	ec55 4b10 	vmov	r4, r5, d0
 8006ef4:	2d00      	cmp	r5, #0
 8006ef6:	460e      	mov	r6, r1
 8006ef8:	4619      	mov	r1, r3
 8006efa:	462b      	mov	r3, r5
 8006efc:	bfbb      	ittet	lt
 8006efe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f02:	461d      	movlt	r5, r3
 8006f04:	2300      	movge	r3, #0
 8006f06:	232d      	movlt	r3, #45	; 0x2d
 8006f08:	700b      	strb	r3, [r1, #0]
 8006f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f10:	4691      	mov	r9, r2
 8006f12:	f023 0820 	bic.w	r8, r3, #32
 8006f16:	bfbc      	itt	lt
 8006f18:	4622      	movlt	r2, r4
 8006f1a:	4614      	movlt	r4, r2
 8006f1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f20:	d005      	beq.n	8006f2e <__cvt+0x42>
 8006f22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f26:	d100      	bne.n	8006f2a <__cvt+0x3e>
 8006f28:	3601      	adds	r6, #1
 8006f2a:	2102      	movs	r1, #2
 8006f2c:	e000      	b.n	8006f30 <__cvt+0x44>
 8006f2e:	2103      	movs	r1, #3
 8006f30:	ab03      	add	r3, sp, #12
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	ab02      	add	r3, sp, #8
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	ec45 4b10 	vmov	d0, r4, r5
 8006f3c:	4653      	mov	r3, sl
 8006f3e:	4632      	mov	r2, r6
 8006f40:	f001 f9e6 	bl	8008310 <_dtoa_r>
 8006f44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f48:	4607      	mov	r7, r0
 8006f4a:	d102      	bne.n	8006f52 <__cvt+0x66>
 8006f4c:	f019 0f01 	tst.w	r9, #1
 8006f50:	d022      	beq.n	8006f98 <__cvt+0xac>
 8006f52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f56:	eb07 0906 	add.w	r9, r7, r6
 8006f5a:	d110      	bne.n	8006f7e <__cvt+0x92>
 8006f5c:	783b      	ldrb	r3, [r7, #0]
 8006f5e:	2b30      	cmp	r3, #48	; 0x30
 8006f60:	d10a      	bne.n	8006f78 <__cvt+0x8c>
 8006f62:	2200      	movs	r2, #0
 8006f64:	2300      	movs	r3, #0
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 fdb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f6e:	b918      	cbnz	r0, 8006f78 <__cvt+0x8c>
 8006f70:	f1c6 0601 	rsb	r6, r6, #1
 8006f74:	f8ca 6000 	str.w	r6, [sl]
 8006f78:	f8da 3000 	ldr.w	r3, [sl]
 8006f7c:	4499      	add	r9, r3
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2300      	movs	r3, #0
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 fda7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f8a:	b108      	cbz	r0, 8006f90 <__cvt+0xa4>
 8006f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f90:	2230      	movs	r2, #48	; 0x30
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	454b      	cmp	r3, r9
 8006f96:	d307      	bcc.n	8006fa8 <__cvt+0xbc>
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f9c:	1bdb      	subs	r3, r3, r7
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	b004      	add	sp, #16
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa8:	1c59      	adds	r1, r3, #1
 8006faa:	9103      	str	r1, [sp, #12]
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e7f0      	b.n	8006f92 <__cvt+0xa6>

08006fb0 <__exponent>:
 8006fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	bfb8      	it	lt
 8006fb8:	4249      	neglt	r1, r1
 8006fba:	f803 2b02 	strb.w	r2, [r3], #2
 8006fbe:	bfb4      	ite	lt
 8006fc0:	222d      	movlt	r2, #45	; 0x2d
 8006fc2:	222b      	movge	r2, #43	; 0x2b
 8006fc4:	2909      	cmp	r1, #9
 8006fc6:	7042      	strb	r2, [r0, #1]
 8006fc8:	dd2a      	ble.n	8007020 <__exponent+0x70>
 8006fca:	f10d 0207 	add.w	r2, sp, #7
 8006fce:	4617      	mov	r7, r2
 8006fd0:	260a      	movs	r6, #10
 8006fd2:	4694      	mov	ip, r2
 8006fd4:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fd8:	fb06 1415 	mls	r4, r6, r5, r1
 8006fdc:	3430      	adds	r4, #48	; 0x30
 8006fde:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	2c63      	cmp	r4, #99	; 0x63
 8006fe6:	f102 32ff 	add.w	r2, r2, #4294967295
 8006fea:	4629      	mov	r1, r5
 8006fec:	dcf1      	bgt.n	8006fd2 <__exponent+0x22>
 8006fee:	3130      	adds	r1, #48	; 0x30
 8006ff0:	f1ac 0402 	sub.w	r4, ip, #2
 8006ff4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ff8:	1c41      	adds	r1, r0, #1
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	42ba      	cmp	r2, r7
 8006ffe:	d30a      	bcc.n	8007016 <__exponent+0x66>
 8007000:	f10d 0209 	add.w	r2, sp, #9
 8007004:	eba2 020c 	sub.w	r2, r2, ip
 8007008:	42bc      	cmp	r4, r7
 800700a:	bf88      	it	hi
 800700c:	2200      	movhi	r2, #0
 800700e:	4413      	add	r3, r2
 8007010:	1a18      	subs	r0, r3, r0
 8007012:	b003      	add	sp, #12
 8007014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007016:	f812 5b01 	ldrb.w	r5, [r2], #1
 800701a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800701e:	e7ed      	b.n	8006ffc <__exponent+0x4c>
 8007020:	2330      	movs	r3, #48	; 0x30
 8007022:	3130      	adds	r1, #48	; 0x30
 8007024:	7083      	strb	r3, [r0, #2]
 8007026:	70c1      	strb	r1, [r0, #3]
 8007028:	1d03      	adds	r3, r0, #4
 800702a:	e7f1      	b.n	8007010 <__exponent+0x60>

0800702c <_printf_float>:
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	ed2d 8b02 	vpush	{d8}
 8007034:	b08d      	sub	sp, #52	; 0x34
 8007036:	460c      	mov	r4, r1
 8007038:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800703c:	4616      	mov	r6, r2
 800703e:	461f      	mov	r7, r3
 8007040:	4605      	mov	r5, r0
 8007042:	f000 fff9 	bl	8008038 <_localeconv_r>
 8007046:	f8d0 a000 	ldr.w	sl, [r0]
 800704a:	4650      	mov	r0, sl
 800704c:	f7f9 f918 	bl	8000280 <strlen>
 8007050:	2300      	movs	r3, #0
 8007052:	930a      	str	r3, [sp, #40]	; 0x28
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	9305      	str	r3, [sp, #20]
 8007058:	f8d8 3000 	ldr.w	r3, [r8]
 800705c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007060:	3307      	adds	r3, #7
 8007062:	f023 0307 	bic.w	r3, r3, #7
 8007066:	f103 0208 	add.w	r2, r3, #8
 800706a:	f8c8 2000 	str.w	r2, [r8]
 800706e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007076:	9307      	str	r3, [sp, #28]
 8007078:	f8cd 8018 	str.w	r8, [sp, #24]
 800707c:	ee08 0a10 	vmov	s16, r0
 8007080:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007088:	4b9e      	ldr	r3, [pc, #632]	; (8007304 <_printf_float+0x2d8>)
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	f7f9 fd55 	bl	8000b3c <__aeabi_dcmpun>
 8007092:	bb88      	cbnz	r0, 80070f8 <_printf_float+0xcc>
 8007094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007098:	4b9a      	ldr	r3, [pc, #616]	; (8007304 <_printf_float+0x2d8>)
 800709a:	f04f 32ff 	mov.w	r2, #4294967295
 800709e:	f7f9 fd2f 	bl	8000b00 <__aeabi_dcmple>
 80070a2:	bb48      	cbnz	r0, 80070f8 <_printf_float+0xcc>
 80070a4:	2200      	movs	r2, #0
 80070a6:	2300      	movs	r3, #0
 80070a8:	4640      	mov	r0, r8
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 fd1e 	bl	8000aec <__aeabi_dcmplt>
 80070b0:	b110      	cbz	r0, 80070b8 <_printf_float+0x8c>
 80070b2:	232d      	movs	r3, #45	; 0x2d
 80070b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b8:	4a93      	ldr	r2, [pc, #588]	; (8007308 <_printf_float+0x2dc>)
 80070ba:	4b94      	ldr	r3, [pc, #592]	; (800730c <_printf_float+0x2e0>)
 80070bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070c0:	bf94      	ite	ls
 80070c2:	4690      	movls	r8, r2
 80070c4:	4698      	movhi	r8, r3
 80070c6:	2303      	movs	r3, #3
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	9b05      	ldr	r3, [sp, #20]
 80070cc:	f023 0304 	bic.w	r3, r3, #4
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	f04f 0900 	mov.w	r9, #0
 80070d6:	9700      	str	r7, [sp, #0]
 80070d8:	4633      	mov	r3, r6
 80070da:	aa0b      	add	r2, sp, #44	; 0x2c
 80070dc:	4621      	mov	r1, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 f9da 	bl	8007498 <_printf_common>
 80070e4:	3001      	adds	r0, #1
 80070e6:	f040 8090 	bne.w	800720a <_printf_float+0x1de>
 80070ea:	f04f 30ff 	mov.w	r0, #4294967295
 80070ee:	b00d      	add	sp, #52	; 0x34
 80070f0:	ecbd 8b02 	vpop	{d8}
 80070f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	4640      	mov	r0, r8
 80070fe:	4649      	mov	r1, r9
 8007100:	f7f9 fd1c 	bl	8000b3c <__aeabi_dcmpun>
 8007104:	b140      	cbz	r0, 8007118 <_printf_float+0xec>
 8007106:	464b      	mov	r3, r9
 8007108:	2b00      	cmp	r3, #0
 800710a:	bfbc      	itt	lt
 800710c:	232d      	movlt	r3, #45	; 0x2d
 800710e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007112:	4a7f      	ldr	r2, [pc, #508]	; (8007310 <_printf_float+0x2e4>)
 8007114:	4b7f      	ldr	r3, [pc, #508]	; (8007314 <_printf_float+0x2e8>)
 8007116:	e7d1      	b.n	80070bc <_printf_float+0x90>
 8007118:	6863      	ldr	r3, [r4, #4]
 800711a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800711e:	9206      	str	r2, [sp, #24]
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	d13f      	bne.n	80071a4 <_printf_float+0x178>
 8007124:	2306      	movs	r3, #6
 8007126:	6063      	str	r3, [r4, #4]
 8007128:	9b05      	ldr	r3, [sp, #20]
 800712a:	6861      	ldr	r1, [r4, #4]
 800712c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007130:	2300      	movs	r3, #0
 8007132:	9303      	str	r3, [sp, #12]
 8007134:	ab0a      	add	r3, sp, #40	; 0x28
 8007136:	e9cd b301 	strd	fp, r3, [sp, #4]
 800713a:	ab09      	add	r3, sp, #36	; 0x24
 800713c:	ec49 8b10 	vmov	d0, r8, r9
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	6022      	str	r2, [r4, #0]
 8007144:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007148:	4628      	mov	r0, r5
 800714a:	f7ff fecf 	bl	8006eec <__cvt>
 800714e:	9b06      	ldr	r3, [sp, #24]
 8007150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007152:	2b47      	cmp	r3, #71	; 0x47
 8007154:	4680      	mov	r8, r0
 8007156:	d108      	bne.n	800716a <_printf_float+0x13e>
 8007158:	1cc8      	adds	r0, r1, #3
 800715a:	db02      	blt.n	8007162 <_printf_float+0x136>
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	4299      	cmp	r1, r3
 8007160:	dd41      	ble.n	80071e6 <_printf_float+0x1ba>
 8007162:	f1ab 0302 	sub.w	r3, fp, #2
 8007166:	fa5f fb83 	uxtb.w	fp, r3
 800716a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800716e:	d820      	bhi.n	80071b2 <_printf_float+0x186>
 8007170:	3901      	subs	r1, #1
 8007172:	465a      	mov	r2, fp
 8007174:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007178:	9109      	str	r1, [sp, #36]	; 0x24
 800717a:	f7ff ff19 	bl	8006fb0 <__exponent>
 800717e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007180:	1813      	adds	r3, r2, r0
 8007182:	2a01      	cmp	r2, #1
 8007184:	4681      	mov	r9, r0
 8007186:	6123      	str	r3, [r4, #16]
 8007188:	dc02      	bgt.n	8007190 <_printf_float+0x164>
 800718a:	6822      	ldr	r2, [r4, #0]
 800718c:	07d2      	lsls	r2, r2, #31
 800718e:	d501      	bpl.n	8007194 <_printf_float+0x168>
 8007190:	3301      	adds	r3, #1
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007198:	2b00      	cmp	r3, #0
 800719a:	d09c      	beq.n	80070d6 <_printf_float+0xaa>
 800719c:	232d      	movs	r3, #45	; 0x2d
 800719e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a2:	e798      	b.n	80070d6 <_printf_float+0xaa>
 80071a4:	9a06      	ldr	r2, [sp, #24]
 80071a6:	2a47      	cmp	r2, #71	; 0x47
 80071a8:	d1be      	bne.n	8007128 <_printf_float+0xfc>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1bc      	bne.n	8007128 <_printf_float+0xfc>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e7b9      	b.n	8007126 <_printf_float+0xfa>
 80071b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071b6:	d118      	bne.n	80071ea <_printf_float+0x1be>
 80071b8:	2900      	cmp	r1, #0
 80071ba:	6863      	ldr	r3, [r4, #4]
 80071bc:	dd0b      	ble.n	80071d6 <_printf_float+0x1aa>
 80071be:	6121      	str	r1, [r4, #16]
 80071c0:	b913      	cbnz	r3, 80071c8 <_printf_float+0x19c>
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	07d0      	lsls	r0, r2, #31
 80071c6:	d502      	bpl.n	80071ce <_printf_float+0x1a2>
 80071c8:	3301      	adds	r3, #1
 80071ca:	440b      	add	r3, r1
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80071d0:	f04f 0900 	mov.w	r9, #0
 80071d4:	e7de      	b.n	8007194 <_printf_float+0x168>
 80071d6:	b913      	cbnz	r3, 80071de <_printf_float+0x1b2>
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	07d2      	lsls	r2, r2, #31
 80071dc:	d501      	bpl.n	80071e2 <_printf_float+0x1b6>
 80071de:	3302      	adds	r3, #2
 80071e0:	e7f4      	b.n	80071cc <_printf_float+0x1a0>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e7f2      	b.n	80071cc <_printf_float+0x1a0>
 80071e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ec:	4299      	cmp	r1, r3
 80071ee:	db05      	blt.n	80071fc <_printf_float+0x1d0>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	6121      	str	r1, [r4, #16]
 80071f4:	07d8      	lsls	r0, r3, #31
 80071f6:	d5ea      	bpl.n	80071ce <_printf_float+0x1a2>
 80071f8:	1c4b      	adds	r3, r1, #1
 80071fa:	e7e7      	b.n	80071cc <_printf_float+0x1a0>
 80071fc:	2900      	cmp	r1, #0
 80071fe:	bfd4      	ite	le
 8007200:	f1c1 0202 	rsble	r2, r1, #2
 8007204:	2201      	movgt	r2, #1
 8007206:	4413      	add	r3, r2
 8007208:	e7e0      	b.n	80071cc <_printf_float+0x1a0>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	055a      	lsls	r2, r3, #21
 800720e:	d407      	bmi.n	8007220 <_printf_float+0x1f4>
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	4642      	mov	r2, r8
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	d12c      	bne.n	8007278 <_printf_float+0x24c>
 800721e:	e764      	b.n	80070ea <_printf_float+0xbe>
 8007220:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007224:	f240 80e0 	bls.w	80073e8 <_printf_float+0x3bc>
 8007228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800722c:	2200      	movs	r2, #0
 800722e:	2300      	movs	r3, #0
 8007230:	f7f9 fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007234:	2800      	cmp	r0, #0
 8007236:	d034      	beq.n	80072a2 <_printf_float+0x276>
 8007238:	4a37      	ldr	r2, [pc, #220]	; (8007318 <_printf_float+0x2ec>)
 800723a:	2301      	movs	r3, #1
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f af51 	beq.w	80070ea <_printf_float+0xbe>
 8007248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800724c:	429a      	cmp	r2, r3
 800724e:	db02      	blt.n	8007256 <_printf_float+0x22a>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	07d8      	lsls	r0, r3, #31
 8007254:	d510      	bpl.n	8007278 <_printf_float+0x24c>
 8007256:	ee18 3a10 	vmov	r3, s16
 800725a:	4652      	mov	r2, sl
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	f43f af41 	beq.w	80070ea <_printf_float+0xbe>
 8007268:	f04f 0800 	mov.w	r8, #0
 800726c:	f104 091a 	add.w	r9, r4, #26
 8007270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007272:	3b01      	subs	r3, #1
 8007274:	4543      	cmp	r3, r8
 8007276:	dc09      	bgt.n	800728c <_printf_float+0x260>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	079b      	lsls	r3, r3, #30
 800727c:	f100 8107 	bmi.w	800748e <_printf_float+0x462>
 8007280:	68e0      	ldr	r0, [r4, #12]
 8007282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007284:	4298      	cmp	r0, r3
 8007286:	bfb8      	it	lt
 8007288:	4618      	movlt	r0, r3
 800728a:	e730      	b.n	80070ee <_printf_float+0xc2>
 800728c:	2301      	movs	r3, #1
 800728e:	464a      	mov	r2, r9
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	f43f af27 	beq.w	80070ea <_printf_float+0xbe>
 800729c:	f108 0801 	add.w	r8, r8, #1
 80072a0:	e7e6      	b.n	8007270 <_printf_float+0x244>
 80072a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dc39      	bgt.n	800731c <_printf_float+0x2f0>
 80072a8:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <_printf_float+0x2ec>)
 80072aa:	2301      	movs	r3, #1
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af19 	beq.w	80070ea <_printf_float+0xbe>
 80072b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072bc:	4313      	orrs	r3, r2
 80072be:	d102      	bne.n	80072c6 <_printf_float+0x29a>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	07d9      	lsls	r1, r3, #31
 80072c4:	d5d8      	bpl.n	8007278 <_printf_float+0x24c>
 80072c6:	ee18 3a10 	vmov	r3, s16
 80072ca:	4652      	mov	r2, sl
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f af09 	beq.w	80070ea <_printf_float+0xbe>
 80072d8:	f04f 0900 	mov.w	r9, #0
 80072dc:	f104 0a1a 	add.w	sl, r4, #26
 80072e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e2:	425b      	negs	r3, r3
 80072e4:	454b      	cmp	r3, r9
 80072e6:	dc01      	bgt.n	80072ec <_printf_float+0x2c0>
 80072e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ea:	e792      	b.n	8007212 <_printf_float+0x1e6>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4652      	mov	r2, sl
 80072f0:	4631      	mov	r1, r6
 80072f2:	4628      	mov	r0, r5
 80072f4:	47b8      	blx	r7
 80072f6:	3001      	adds	r0, #1
 80072f8:	f43f aef7 	beq.w	80070ea <_printf_float+0xbe>
 80072fc:	f109 0901 	add.w	r9, r9, #1
 8007300:	e7ee      	b.n	80072e0 <_printf_float+0x2b4>
 8007302:	bf00      	nop
 8007304:	7fefffff 	.word	0x7fefffff
 8007308:	0800b970 	.word	0x0800b970
 800730c:	0800b974 	.word	0x0800b974
 8007310:	0800b978 	.word	0x0800b978
 8007314:	0800b97c 	.word	0x0800b97c
 8007318:	0800b980 	.word	0x0800b980
 800731c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800731e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007320:	429a      	cmp	r2, r3
 8007322:	bfa8      	it	ge
 8007324:	461a      	movge	r2, r3
 8007326:	2a00      	cmp	r2, #0
 8007328:	4691      	mov	r9, r2
 800732a:	dc37      	bgt.n	800739c <_printf_float+0x370>
 800732c:	f04f 0b00 	mov.w	fp, #0
 8007330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007334:	f104 021a 	add.w	r2, r4, #26
 8007338:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800733a:	9305      	str	r3, [sp, #20]
 800733c:	eba3 0309 	sub.w	r3, r3, r9
 8007340:	455b      	cmp	r3, fp
 8007342:	dc33      	bgt.n	80073ac <_printf_float+0x380>
 8007344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007348:	429a      	cmp	r2, r3
 800734a:	db3b      	blt.n	80073c4 <_printf_float+0x398>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	07da      	lsls	r2, r3, #31
 8007350:	d438      	bmi.n	80073c4 <_printf_float+0x398>
 8007352:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007356:	eba2 0903 	sub.w	r9, r2, r3
 800735a:	9b05      	ldr	r3, [sp, #20]
 800735c:	1ad2      	subs	r2, r2, r3
 800735e:	4591      	cmp	r9, r2
 8007360:	bfa8      	it	ge
 8007362:	4691      	movge	r9, r2
 8007364:	f1b9 0f00 	cmp.w	r9, #0
 8007368:	dc35      	bgt.n	80073d6 <_printf_float+0x3aa>
 800736a:	f04f 0800 	mov.w	r8, #0
 800736e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007372:	f104 0a1a 	add.w	sl, r4, #26
 8007376:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	eba3 0309 	sub.w	r3, r3, r9
 8007380:	4543      	cmp	r3, r8
 8007382:	f77f af79 	ble.w	8007278 <_printf_float+0x24c>
 8007386:	2301      	movs	r3, #1
 8007388:	4652      	mov	r2, sl
 800738a:	4631      	mov	r1, r6
 800738c:	4628      	mov	r0, r5
 800738e:	47b8      	blx	r7
 8007390:	3001      	adds	r0, #1
 8007392:	f43f aeaa 	beq.w	80070ea <_printf_float+0xbe>
 8007396:	f108 0801 	add.w	r8, r8, #1
 800739a:	e7ec      	b.n	8007376 <_printf_float+0x34a>
 800739c:	4613      	mov	r3, r2
 800739e:	4631      	mov	r1, r6
 80073a0:	4642      	mov	r2, r8
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	d1c0      	bne.n	800732c <_printf_float+0x300>
 80073aa:	e69e      	b.n	80070ea <_printf_float+0xbe>
 80073ac:	2301      	movs	r3, #1
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	9205      	str	r2, [sp, #20]
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f ae97 	beq.w	80070ea <_printf_float+0xbe>
 80073bc:	9a05      	ldr	r2, [sp, #20]
 80073be:	f10b 0b01 	add.w	fp, fp, #1
 80073c2:	e7b9      	b.n	8007338 <_printf_float+0x30c>
 80073c4:	ee18 3a10 	vmov	r3, s16
 80073c8:	4652      	mov	r2, sl
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b8      	blx	r7
 80073d0:	3001      	adds	r0, #1
 80073d2:	d1be      	bne.n	8007352 <_printf_float+0x326>
 80073d4:	e689      	b.n	80070ea <_printf_float+0xbe>
 80073d6:	9a05      	ldr	r2, [sp, #20]
 80073d8:	464b      	mov	r3, r9
 80073da:	4442      	add	r2, r8
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	d1c1      	bne.n	800736a <_printf_float+0x33e>
 80073e6:	e680      	b.n	80070ea <_printf_float+0xbe>
 80073e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ea:	2a01      	cmp	r2, #1
 80073ec:	dc01      	bgt.n	80073f2 <_printf_float+0x3c6>
 80073ee:	07db      	lsls	r3, r3, #31
 80073f0:	d53a      	bpl.n	8007468 <_printf_float+0x43c>
 80073f2:	2301      	movs	r3, #1
 80073f4:	4642      	mov	r2, r8
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f ae74 	beq.w	80070ea <_printf_float+0xbe>
 8007402:	ee18 3a10 	vmov	r3, s16
 8007406:	4652      	mov	r2, sl
 8007408:	4631      	mov	r1, r6
 800740a:	4628      	mov	r0, r5
 800740c:	47b8      	blx	r7
 800740e:	3001      	adds	r0, #1
 8007410:	f43f ae6b 	beq.w	80070ea <_printf_float+0xbe>
 8007414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007418:	2200      	movs	r2, #0
 800741a:	2300      	movs	r3, #0
 800741c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007420:	f7f9 fb5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007424:	b9d8      	cbnz	r0, 800745e <_printf_float+0x432>
 8007426:	f10a 33ff 	add.w	r3, sl, #4294967295
 800742a:	f108 0201 	add.w	r2, r8, #1
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	d10e      	bne.n	8007456 <_printf_float+0x42a>
 8007438:	e657      	b.n	80070ea <_printf_float+0xbe>
 800743a:	2301      	movs	r3, #1
 800743c:	4652      	mov	r2, sl
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	f43f ae50 	beq.w	80070ea <_printf_float+0xbe>
 800744a:	f108 0801 	add.w	r8, r8, #1
 800744e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007450:	3b01      	subs	r3, #1
 8007452:	4543      	cmp	r3, r8
 8007454:	dcf1      	bgt.n	800743a <_printf_float+0x40e>
 8007456:	464b      	mov	r3, r9
 8007458:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800745c:	e6da      	b.n	8007214 <_printf_float+0x1e8>
 800745e:	f04f 0800 	mov.w	r8, #0
 8007462:	f104 0a1a 	add.w	sl, r4, #26
 8007466:	e7f2      	b.n	800744e <_printf_float+0x422>
 8007468:	2301      	movs	r3, #1
 800746a:	4642      	mov	r2, r8
 800746c:	e7df      	b.n	800742e <_printf_float+0x402>
 800746e:	2301      	movs	r3, #1
 8007470:	464a      	mov	r2, r9
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	47b8      	blx	r7
 8007478:	3001      	adds	r0, #1
 800747a:	f43f ae36 	beq.w	80070ea <_printf_float+0xbe>
 800747e:	f108 0801 	add.w	r8, r8, #1
 8007482:	68e3      	ldr	r3, [r4, #12]
 8007484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007486:	1a5b      	subs	r3, r3, r1
 8007488:	4543      	cmp	r3, r8
 800748a:	dcf0      	bgt.n	800746e <_printf_float+0x442>
 800748c:	e6f8      	b.n	8007280 <_printf_float+0x254>
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	f104 0919 	add.w	r9, r4, #25
 8007496:	e7f4      	b.n	8007482 <_printf_float+0x456>

08007498 <_printf_common>:
 8007498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749c:	4616      	mov	r6, r2
 800749e:	4699      	mov	r9, r3
 80074a0:	688a      	ldr	r2, [r1, #8]
 80074a2:	690b      	ldr	r3, [r1, #16]
 80074a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074a8:	4293      	cmp	r3, r2
 80074aa:	bfb8      	it	lt
 80074ac:	4613      	movlt	r3, r2
 80074ae:	6033      	str	r3, [r6, #0]
 80074b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074b4:	4607      	mov	r7, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	b10a      	cbz	r2, 80074be <_printf_common+0x26>
 80074ba:	3301      	adds	r3, #1
 80074bc:	6033      	str	r3, [r6, #0]
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	0699      	lsls	r1, r3, #26
 80074c2:	bf42      	ittt	mi
 80074c4:	6833      	ldrmi	r3, [r6, #0]
 80074c6:	3302      	addmi	r3, #2
 80074c8:	6033      	strmi	r3, [r6, #0]
 80074ca:	6825      	ldr	r5, [r4, #0]
 80074cc:	f015 0506 	ands.w	r5, r5, #6
 80074d0:	d106      	bne.n	80074e0 <_printf_common+0x48>
 80074d2:	f104 0a19 	add.w	sl, r4, #25
 80074d6:	68e3      	ldr	r3, [r4, #12]
 80074d8:	6832      	ldr	r2, [r6, #0]
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	42ab      	cmp	r3, r5
 80074de:	dc26      	bgt.n	800752e <_printf_common+0x96>
 80074e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074e4:	1e13      	subs	r3, r2, #0
 80074e6:	6822      	ldr	r2, [r4, #0]
 80074e8:	bf18      	it	ne
 80074ea:	2301      	movne	r3, #1
 80074ec:	0692      	lsls	r2, r2, #26
 80074ee:	d42b      	bmi.n	8007548 <_printf_common+0xb0>
 80074f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074f4:	4649      	mov	r1, r9
 80074f6:	4638      	mov	r0, r7
 80074f8:	47c0      	blx	r8
 80074fa:	3001      	adds	r0, #1
 80074fc:	d01e      	beq.n	800753c <_printf_common+0xa4>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	6922      	ldr	r2, [r4, #16]
 8007502:	f003 0306 	and.w	r3, r3, #6
 8007506:	2b04      	cmp	r3, #4
 8007508:	bf02      	ittt	eq
 800750a:	68e5      	ldreq	r5, [r4, #12]
 800750c:	6833      	ldreq	r3, [r6, #0]
 800750e:	1aed      	subeq	r5, r5, r3
 8007510:	68a3      	ldr	r3, [r4, #8]
 8007512:	bf0c      	ite	eq
 8007514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007518:	2500      	movne	r5, #0
 800751a:	4293      	cmp	r3, r2
 800751c:	bfc4      	itt	gt
 800751e:	1a9b      	subgt	r3, r3, r2
 8007520:	18ed      	addgt	r5, r5, r3
 8007522:	2600      	movs	r6, #0
 8007524:	341a      	adds	r4, #26
 8007526:	42b5      	cmp	r5, r6
 8007528:	d11a      	bne.n	8007560 <_printf_common+0xc8>
 800752a:	2000      	movs	r0, #0
 800752c:	e008      	b.n	8007540 <_printf_common+0xa8>
 800752e:	2301      	movs	r3, #1
 8007530:	4652      	mov	r2, sl
 8007532:	4649      	mov	r1, r9
 8007534:	4638      	mov	r0, r7
 8007536:	47c0      	blx	r8
 8007538:	3001      	adds	r0, #1
 800753a:	d103      	bne.n	8007544 <_printf_common+0xac>
 800753c:	f04f 30ff 	mov.w	r0, #4294967295
 8007540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007544:	3501      	adds	r5, #1
 8007546:	e7c6      	b.n	80074d6 <_printf_common+0x3e>
 8007548:	18e1      	adds	r1, r4, r3
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	2030      	movs	r0, #48	; 0x30
 800754e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007552:	4422      	add	r2, r4
 8007554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800755c:	3302      	adds	r3, #2
 800755e:	e7c7      	b.n	80074f0 <_printf_common+0x58>
 8007560:	2301      	movs	r3, #1
 8007562:	4622      	mov	r2, r4
 8007564:	4649      	mov	r1, r9
 8007566:	4638      	mov	r0, r7
 8007568:	47c0      	blx	r8
 800756a:	3001      	adds	r0, #1
 800756c:	d0e6      	beq.n	800753c <_printf_common+0xa4>
 800756e:	3601      	adds	r6, #1
 8007570:	e7d9      	b.n	8007526 <_printf_common+0x8e>
	...

08007574 <_printf_i>:
 8007574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	7e0f      	ldrb	r7, [r1, #24]
 800757a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800757c:	2f78      	cmp	r7, #120	; 0x78
 800757e:	4691      	mov	r9, r2
 8007580:	4680      	mov	r8, r0
 8007582:	460c      	mov	r4, r1
 8007584:	469a      	mov	sl, r3
 8007586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800758a:	d807      	bhi.n	800759c <_printf_i+0x28>
 800758c:	2f62      	cmp	r7, #98	; 0x62
 800758e:	d80a      	bhi.n	80075a6 <_printf_i+0x32>
 8007590:	2f00      	cmp	r7, #0
 8007592:	f000 80d4 	beq.w	800773e <_printf_i+0x1ca>
 8007596:	2f58      	cmp	r7, #88	; 0x58
 8007598:	f000 80c0 	beq.w	800771c <_printf_i+0x1a8>
 800759c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075a4:	e03a      	b.n	800761c <_printf_i+0xa8>
 80075a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075aa:	2b15      	cmp	r3, #21
 80075ac:	d8f6      	bhi.n	800759c <_printf_i+0x28>
 80075ae:	a101      	add	r1, pc, #4	; (adr r1, 80075b4 <_printf_i+0x40>)
 80075b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075b4:	0800760d 	.word	0x0800760d
 80075b8:	08007621 	.word	0x08007621
 80075bc:	0800759d 	.word	0x0800759d
 80075c0:	0800759d 	.word	0x0800759d
 80075c4:	0800759d 	.word	0x0800759d
 80075c8:	0800759d 	.word	0x0800759d
 80075cc:	08007621 	.word	0x08007621
 80075d0:	0800759d 	.word	0x0800759d
 80075d4:	0800759d 	.word	0x0800759d
 80075d8:	0800759d 	.word	0x0800759d
 80075dc:	0800759d 	.word	0x0800759d
 80075e0:	08007725 	.word	0x08007725
 80075e4:	0800764d 	.word	0x0800764d
 80075e8:	080076df 	.word	0x080076df
 80075ec:	0800759d 	.word	0x0800759d
 80075f0:	0800759d 	.word	0x0800759d
 80075f4:	08007747 	.word	0x08007747
 80075f8:	0800759d 	.word	0x0800759d
 80075fc:	0800764d 	.word	0x0800764d
 8007600:	0800759d 	.word	0x0800759d
 8007604:	0800759d 	.word	0x0800759d
 8007608:	080076e7 	.word	0x080076e7
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	602a      	str	r2, [r5, #0]
 8007614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800761c:	2301      	movs	r3, #1
 800761e:	e09f      	b.n	8007760 <_printf_i+0x1ec>
 8007620:	6820      	ldr	r0, [r4, #0]
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	0607      	lsls	r7, r0, #24
 8007626:	f103 0104 	add.w	r1, r3, #4
 800762a:	6029      	str	r1, [r5, #0]
 800762c:	d501      	bpl.n	8007632 <_printf_i+0xbe>
 800762e:	681e      	ldr	r6, [r3, #0]
 8007630:	e003      	b.n	800763a <_printf_i+0xc6>
 8007632:	0646      	lsls	r6, r0, #25
 8007634:	d5fb      	bpl.n	800762e <_printf_i+0xba>
 8007636:	f9b3 6000 	ldrsh.w	r6, [r3]
 800763a:	2e00      	cmp	r6, #0
 800763c:	da03      	bge.n	8007646 <_printf_i+0xd2>
 800763e:	232d      	movs	r3, #45	; 0x2d
 8007640:	4276      	negs	r6, r6
 8007642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007646:	485a      	ldr	r0, [pc, #360]	; (80077b0 <_printf_i+0x23c>)
 8007648:	230a      	movs	r3, #10
 800764a:	e012      	b.n	8007672 <_printf_i+0xfe>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	6820      	ldr	r0, [r4, #0]
 8007650:	1d19      	adds	r1, r3, #4
 8007652:	6029      	str	r1, [r5, #0]
 8007654:	0605      	lsls	r5, r0, #24
 8007656:	d501      	bpl.n	800765c <_printf_i+0xe8>
 8007658:	681e      	ldr	r6, [r3, #0]
 800765a:	e002      	b.n	8007662 <_printf_i+0xee>
 800765c:	0641      	lsls	r1, r0, #25
 800765e:	d5fb      	bpl.n	8007658 <_printf_i+0xe4>
 8007660:	881e      	ldrh	r6, [r3, #0]
 8007662:	4853      	ldr	r0, [pc, #332]	; (80077b0 <_printf_i+0x23c>)
 8007664:	2f6f      	cmp	r7, #111	; 0x6f
 8007666:	bf0c      	ite	eq
 8007668:	2308      	moveq	r3, #8
 800766a:	230a      	movne	r3, #10
 800766c:	2100      	movs	r1, #0
 800766e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007672:	6865      	ldr	r5, [r4, #4]
 8007674:	60a5      	str	r5, [r4, #8]
 8007676:	2d00      	cmp	r5, #0
 8007678:	bfa2      	ittt	ge
 800767a:	6821      	ldrge	r1, [r4, #0]
 800767c:	f021 0104 	bicge.w	r1, r1, #4
 8007680:	6021      	strge	r1, [r4, #0]
 8007682:	b90e      	cbnz	r6, 8007688 <_printf_i+0x114>
 8007684:	2d00      	cmp	r5, #0
 8007686:	d04b      	beq.n	8007720 <_printf_i+0x1ac>
 8007688:	4615      	mov	r5, r2
 800768a:	fbb6 f1f3 	udiv	r1, r6, r3
 800768e:	fb03 6711 	mls	r7, r3, r1, r6
 8007692:	5dc7      	ldrb	r7, [r0, r7]
 8007694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007698:	4637      	mov	r7, r6
 800769a:	42bb      	cmp	r3, r7
 800769c:	460e      	mov	r6, r1
 800769e:	d9f4      	bls.n	800768a <_printf_i+0x116>
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d10b      	bne.n	80076bc <_printf_i+0x148>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	07de      	lsls	r6, r3, #31
 80076a8:	d508      	bpl.n	80076bc <_printf_i+0x148>
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	6861      	ldr	r1, [r4, #4]
 80076ae:	4299      	cmp	r1, r3
 80076b0:	bfde      	ittt	le
 80076b2:	2330      	movle	r3, #48	; 0x30
 80076b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076bc:	1b52      	subs	r2, r2, r5
 80076be:	6122      	str	r2, [r4, #16]
 80076c0:	f8cd a000 	str.w	sl, [sp]
 80076c4:	464b      	mov	r3, r9
 80076c6:	aa03      	add	r2, sp, #12
 80076c8:	4621      	mov	r1, r4
 80076ca:	4640      	mov	r0, r8
 80076cc:	f7ff fee4 	bl	8007498 <_printf_common>
 80076d0:	3001      	adds	r0, #1
 80076d2:	d14a      	bne.n	800776a <_printf_i+0x1f6>
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295
 80076d8:	b004      	add	sp, #16
 80076da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f043 0320 	orr.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	4833      	ldr	r0, [pc, #204]	; (80077b4 <_printf_i+0x240>)
 80076e8:	2778      	movs	r7, #120	; 0x78
 80076ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	6829      	ldr	r1, [r5, #0]
 80076f2:	061f      	lsls	r7, r3, #24
 80076f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80076f8:	d402      	bmi.n	8007700 <_printf_i+0x18c>
 80076fa:	065f      	lsls	r7, r3, #25
 80076fc:	bf48      	it	mi
 80076fe:	b2b6      	uxthmi	r6, r6
 8007700:	07df      	lsls	r7, r3, #31
 8007702:	bf48      	it	mi
 8007704:	f043 0320 	orrmi.w	r3, r3, #32
 8007708:	6029      	str	r1, [r5, #0]
 800770a:	bf48      	it	mi
 800770c:	6023      	strmi	r3, [r4, #0]
 800770e:	b91e      	cbnz	r6, 8007718 <_printf_i+0x1a4>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	f023 0320 	bic.w	r3, r3, #32
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	2310      	movs	r3, #16
 800771a:	e7a7      	b.n	800766c <_printf_i+0xf8>
 800771c:	4824      	ldr	r0, [pc, #144]	; (80077b0 <_printf_i+0x23c>)
 800771e:	e7e4      	b.n	80076ea <_printf_i+0x176>
 8007720:	4615      	mov	r5, r2
 8007722:	e7bd      	b.n	80076a0 <_printf_i+0x12c>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	6826      	ldr	r6, [r4, #0]
 8007728:	6961      	ldr	r1, [r4, #20]
 800772a:	1d18      	adds	r0, r3, #4
 800772c:	6028      	str	r0, [r5, #0]
 800772e:	0635      	lsls	r5, r6, #24
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	d501      	bpl.n	8007738 <_printf_i+0x1c4>
 8007734:	6019      	str	r1, [r3, #0]
 8007736:	e002      	b.n	800773e <_printf_i+0x1ca>
 8007738:	0670      	lsls	r0, r6, #25
 800773a:	d5fb      	bpl.n	8007734 <_printf_i+0x1c0>
 800773c:	8019      	strh	r1, [r3, #0]
 800773e:	2300      	movs	r3, #0
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	4615      	mov	r5, r2
 8007744:	e7bc      	b.n	80076c0 <_printf_i+0x14c>
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	602a      	str	r2, [r5, #0]
 800774c:	681d      	ldr	r5, [r3, #0]
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	2100      	movs	r1, #0
 8007752:	4628      	mov	r0, r5
 8007754:	f7f8 fd44 	bl	80001e0 <memchr>
 8007758:	b108      	cbz	r0, 800775e <_printf_i+0x1ea>
 800775a:	1b40      	subs	r0, r0, r5
 800775c:	6060      	str	r0, [r4, #4]
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	2300      	movs	r3, #0
 8007764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007768:	e7aa      	b.n	80076c0 <_printf_i+0x14c>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	462a      	mov	r2, r5
 800776e:	4649      	mov	r1, r9
 8007770:	4640      	mov	r0, r8
 8007772:	47d0      	blx	sl
 8007774:	3001      	adds	r0, #1
 8007776:	d0ad      	beq.n	80076d4 <_printf_i+0x160>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	079b      	lsls	r3, r3, #30
 800777c:	d413      	bmi.n	80077a6 <_printf_i+0x232>
 800777e:	68e0      	ldr	r0, [r4, #12]
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	4298      	cmp	r0, r3
 8007784:	bfb8      	it	lt
 8007786:	4618      	movlt	r0, r3
 8007788:	e7a6      	b.n	80076d8 <_printf_i+0x164>
 800778a:	2301      	movs	r3, #1
 800778c:	4632      	mov	r2, r6
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d09d      	beq.n	80076d4 <_printf_i+0x160>
 8007798:	3501      	adds	r5, #1
 800779a:	68e3      	ldr	r3, [r4, #12]
 800779c:	9903      	ldr	r1, [sp, #12]
 800779e:	1a5b      	subs	r3, r3, r1
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	dcf2      	bgt.n	800778a <_printf_i+0x216>
 80077a4:	e7eb      	b.n	800777e <_printf_i+0x20a>
 80077a6:	2500      	movs	r5, #0
 80077a8:	f104 0619 	add.w	r6, r4, #25
 80077ac:	e7f5      	b.n	800779a <_printf_i+0x226>
 80077ae:	bf00      	nop
 80077b0:	0800b982 	.word	0x0800b982
 80077b4:	0800b993 	.word	0x0800b993

080077b8 <_scanf_float>:
 80077b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	b087      	sub	sp, #28
 80077be:	4617      	mov	r7, r2
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	688b      	ldr	r3, [r1, #8]
 80077c4:	1e5a      	subs	r2, r3, #1
 80077c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077ca:	bf83      	ittte	hi
 80077cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077d0:	195b      	addhi	r3, r3, r5
 80077d2:	9302      	strhi	r3, [sp, #8]
 80077d4:	2300      	movls	r3, #0
 80077d6:	bf86      	itte	hi
 80077d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077dc:	608b      	strhi	r3, [r1, #8]
 80077de:	9302      	strls	r3, [sp, #8]
 80077e0:	680b      	ldr	r3, [r1, #0]
 80077e2:	468b      	mov	fp, r1
 80077e4:	2500      	movs	r5, #0
 80077e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80077ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80077ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077f2:	4680      	mov	r8, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	465e      	mov	r6, fp
 80077f8:	46aa      	mov	sl, r5
 80077fa:	46a9      	mov	r9, r5
 80077fc:	9501      	str	r5, [sp, #4]
 80077fe:	68a2      	ldr	r2, [r4, #8]
 8007800:	b152      	cbz	r2, 8007818 <_scanf_float+0x60>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b4e      	cmp	r3, #78	; 0x4e
 8007808:	d864      	bhi.n	80078d4 <_scanf_float+0x11c>
 800780a:	2b40      	cmp	r3, #64	; 0x40
 800780c:	d83c      	bhi.n	8007888 <_scanf_float+0xd0>
 800780e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007812:	b2c8      	uxtb	r0, r1
 8007814:	280e      	cmp	r0, #14
 8007816:	d93a      	bls.n	800788e <_scanf_float+0xd6>
 8007818:	f1b9 0f00 	cmp.w	r9, #0
 800781c:	d003      	beq.n	8007826 <_scanf_float+0x6e>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	f10a 3aff 	add.w	sl, sl, #4294967295
 800782a:	f1ba 0f01 	cmp.w	sl, #1
 800782e:	f200 8113 	bhi.w	8007a58 <_scanf_float+0x2a0>
 8007832:	455e      	cmp	r6, fp
 8007834:	f200 8105 	bhi.w	8007a42 <_scanf_float+0x28a>
 8007838:	2501      	movs	r5, #1
 800783a:	4628      	mov	r0, r5
 800783c:	b007      	add	sp, #28
 800783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007842:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007846:	2a0d      	cmp	r2, #13
 8007848:	d8e6      	bhi.n	8007818 <_scanf_float+0x60>
 800784a:	a101      	add	r1, pc, #4	; (adr r1, 8007850 <_scanf_float+0x98>)
 800784c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007850:	0800798f 	.word	0x0800798f
 8007854:	08007819 	.word	0x08007819
 8007858:	08007819 	.word	0x08007819
 800785c:	08007819 	.word	0x08007819
 8007860:	080079ef 	.word	0x080079ef
 8007864:	080079c7 	.word	0x080079c7
 8007868:	08007819 	.word	0x08007819
 800786c:	08007819 	.word	0x08007819
 8007870:	0800799d 	.word	0x0800799d
 8007874:	08007819 	.word	0x08007819
 8007878:	08007819 	.word	0x08007819
 800787c:	08007819 	.word	0x08007819
 8007880:	08007819 	.word	0x08007819
 8007884:	08007955 	.word	0x08007955
 8007888:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800788c:	e7db      	b.n	8007846 <_scanf_float+0x8e>
 800788e:	290e      	cmp	r1, #14
 8007890:	d8c2      	bhi.n	8007818 <_scanf_float+0x60>
 8007892:	a001      	add	r0, pc, #4	; (adr r0, 8007898 <_scanf_float+0xe0>)
 8007894:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007898:	08007947 	.word	0x08007947
 800789c:	08007819 	.word	0x08007819
 80078a0:	08007947 	.word	0x08007947
 80078a4:	080079db 	.word	0x080079db
 80078a8:	08007819 	.word	0x08007819
 80078ac:	080078f5 	.word	0x080078f5
 80078b0:	08007931 	.word	0x08007931
 80078b4:	08007931 	.word	0x08007931
 80078b8:	08007931 	.word	0x08007931
 80078bc:	08007931 	.word	0x08007931
 80078c0:	08007931 	.word	0x08007931
 80078c4:	08007931 	.word	0x08007931
 80078c8:	08007931 	.word	0x08007931
 80078cc:	08007931 	.word	0x08007931
 80078d0:	08007931 	.word	0x08007931
 80078d4:	2b6e      	cmp	r3, #110	; 0x6e
 80078d6:	d809      	bhi.n	80078ec <_scanf_float+0x134>
 80078d8:	2b60      	cmp	r3, #96	; 0x60
 80078da:	d8b2      	bhi.n	8007842 <_scanf_float+0x8a>
 80078dc:	2b54      	cmp	r3, #84	; 0x54
 80078de:	d077      	beq.n	80079d0 <_scanf_float+0x218>
 80078e0:	2b59      	cmp	r3, #89	; 0x59
 80078e2:	d199      	bne.n	8007818 <_scanf_float+0x60>
 80078e4:	2d07      	cmp	r5, #7
 80078e6:	d197      	bne.n	8007818 <_scanf_float+0x60>
 80078e8:	2508      	movs	r5, #8
 80078ea:	e029      	b.n	8007940 <_scanf_float+0x188>
 80078ec:	2b74      	cmp	r3, #116	; 0x74
 80078ee:	d06f      	beq.n	80079d0 <_scanf_float+0x218>
 80078f0:	2b79      	cmp	r3, #121	; 0x79
 80078f2:	e7f6      	b.n	80078e2 <_scanf_float+0x12a>
 80078f4:	6821      	ldr	r1, [r4, #0]
 80078f6:	05c8      	lsls	r0, r1, #23
 80078f8:	d51a      	bpl.n	8007930 <_scanf_float+0x178>
 80078fa:	9b02      	ldr	r3, [sp, #8]
 80078fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007900:	6021      	str	r1, [r4, #0]
 8007902:	f109 0901 	add.w	r9, r9, #1
 8007906:	b11b      	cbz	r3, 8007910 <_scanf_float+0x158>
 8007908:	3b01      	subs	r3, #1
 800790a:	3201      	adds	r2, #1
 800790c:	9302      	str	r3, [sp, #8]
 800790e:	60a2      	str	r2, [r4, #8]
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	3b01      	subs	r3, #1
 8007914:	60a3      	str	r3, [r4, #8]
 8007916:	6923      	ldr	r3, [r4, #16]
 8007918:	3301      	adds	r3, #1
 800791a:	6123      	str	r3, [r4, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3b01      	subs	r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	607b      	str	r3, [r7, #4]
 8007924:	f340 8084 	ble.w	8007a30 <_scanf_float+0x278>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	603b      	str	r3, [r7, #0]
 800792e:	e766      	b.n	80077fe <_scanf_float+0x46>
 8007930:	eb1a 0f05 	cmn.w	sl, r5
 8007934:	f47f af70 	bne.w	8007818 <_scanf_float+0x60>
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800793e:	6022      	str	r2, [r4, #0]
 8007940:	f806 3b01 	strb.w	r3, [r6], #1
 8007944:	e7e4      	b.n	8007910 <_scanf_float+0x158>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	0610      	lsls	r0, r2, #24
 800794a:	f57f af65 	bpl.w	8007818 <_scanf_float+0x60>
 800794e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007952:	e7f4      	b.n	800793e <_scanf_float+0x186>
 8007954:	f1ba 0f00 	cmp.w	sl, #0
 8007958:	d10e      	bne.n	8007978 <_scanf_float+0x1c0>
 800795a:	f1b9 0f00 	cmp.w	r9, #0
 800795e:	d10e      	bne.n	800797e <_scanf_float+0x1c6>
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007966:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800796a:	d108      	bne.n	800797e <_scanf_float+0x1c6>
 800796c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007970:	6022      	str	r2, [r4, #0]
 8007972:	f04f 0a01 	mov.w	sl, #1
 8007976:	e7e3      	b.n	8007940 <_scanf_float+0x188>
 8007978:	f1ba 0f02 	cmp.w	sl, #2
 800797c:	d055      	beq.n	8007a2a <_scanf_float+0x272>
 800797e:	2d01      	cmp	r5, #1
 8007980:	d002      	beq.n	8007988 <_scanf_float+0x1d0>
 8007982:	2d04      	cmp	r5, #4
 8007984:	f47f af48 	bne.w	8007818 <_scanf_float+0x60>
 8007988:	3501      	adds	r5, #1
 800798a:	b2ed      	uxtb	r5, r5
 800798c:	e7d8      	b.n	8007940 <_scanf_float+0x188>
 800798e:	f1ba 0f01 	cmp.w	sl, #1
 8007992:	f47f af41 	bne.w	8007818 <_scanf_float+0x60>
 8007996:	f04f 0a02 	mov.w	sl, #2
 800799a:	e7d1      	b.n	8007940 <_scanf_float+0x188>
 800799c:	b97d      	cbnz	r5, 80079be <_scanf_float+0x206>
 800799e:	f1b9 0f00 	cmp.w	r9, #0
 80079a2:	f47f af3c 	bne.w	800781e <_scanf_float+0x66>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079b0:	f47f af39 	bne.w	8007826 <_scanf_float+0x6e>
 80079b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	2501      	movs	r5, #1
 80079bc:	e7c0      	b.n	8007940 <_scanf_float+0x188>
 80079be:	2d03      	cmp	r5, #3
 80079c0:	d0e2      	beq.n	8007988 <_scanf_float+0x1d0>
 80079c2:	2d05      	cmp	r5, #5
 80079c4:	e7de      	b.n	8007984 <_scanf_float+0x1cc>
 80079c6:	2d02      	cmp	r5, #2
 80079c8:	f47f af26 	bne.w	8007818 <_scanf_float+0x60>
 80079cc:	2503      	movs	r5, #3
 80079ce:	e7b7      	b.n	8007940 <_scanf_float+0x188>
 80079d0:	2d06      	cmp	r5, #6
 80079d2:	f47f af21 	bne.w	8007818 <_scanf_float+0x60>
 80079d6:	2507      	movs	r5, #7
 80079d8:	e7b2      	b.n	8007940 <_scanf_float+0x188>
 80079da:	6822      	ldr	r2, [r4, #0]
 80079dc:	0591      	lsls	r1, r2, #22
 80079de:	f57f af1b 	bpl.w	8007818 <_scanf_float+0x60>
 80079e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80079e6:	6022      	str	r2, [r4, #0]
 80079e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80079ec:	e7a8      	b.n	8007940 <_scanf_float+0x188>
 80079ee:	6822      	ldr	r2, [r4, #0]
 80079f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80079f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80079f8:	d006      	beq.n	8007a08 <_scanf_float+0x250>
 80079fa:	0550      	lsls	r0, r2, #21
 80079fc:	f57f af0c 	bpl.w	8007818 <_scanf_float+0x60>
 8007a00:	f1b9 0f00 	cmp.w	r9, #0
 8007a04:	f43f af0f 	beq.w	8007826 <_scanf_float+0x6e>
 8007a08:	0591      	lsls	r1, r2, #22
 8007a0a:	bf58      	it	pl
 8007a0c:	9901      	ldrpl	r1, [sp, #4]
 8007a0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a12:	bf58      	it	pl
 8007a14:	eba9 0101 	subpl.w	r1, r9, r1
 8007a18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a1c:	bf58      	it	pl
 8007a1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	f04f 0900 	mov.w	r9, #0
 8007a28:	e78a      	b.n	8007940 <_scanf_float+0x188>
 8007a2a:	f04f 0a03 	mov.w	sl, #3
 8007a2e:	e787      	b.n	8007940 <_scanf_float+0x188>
 8007a30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a34:	4639      	mov	r1, r7
 8007a36:	4640      	mov	r0, r8
 8007a38:	4798      	blx	r3
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f43f aedf 	beq.w	80077fe <_scanf_float+0x46>
 8007a40:	e6ea      	b.n	8007818 <_scanf_float+0x60>
 8007a42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a4a:	463a      	mov	r2, r7
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	4798      	blx	r3
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	6123      	str	r3, [r4, #16]
 8007a56:	e6ec      	b.n	8007832 <_scanf_float+0x7a>
 8007a58:	1e6b      	subs	r3, r5, #1
 8007a5a:	2b06      	cmp	r3, #6
 8007a5c:	d825      	bhi.n	8007aaa <_scanf_float+0x2f2>
 8007a5e:	2d02      	cmp	r5, #2
 8007a60:	d836      	bhi.n	8007ad0 <_scanf_float+0x318>
 8007a62:	455e      	cmp	r6, fp
 8007a64:	f67f aee8 	bls.w	8007838 <_scanf_float+0x80>
 8007a68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a70:	463a      	mov	r2, r7
 8007a72:	4640      	mov	r0, r8
 8007a74:	4798      	blx	r3
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	6123      	str	r3, [r4, #16]
 8007a7c:	e7f1      	b.n	8007a62 <_scanf_float+0x2aa>
 8007a7e:	9802      	ldr	r0, [sp, #8]
 8007a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a88:	9002      	str	r0, [sp, #8]
 8007a8a:	463a      	mov	r2, r7
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	4798      	blx	r3
 8007a90:	6923      	ldr	r3, [r4, #16]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	6123      	str	r3, [r4, #16]
 8007a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a9a:	fa5f fa8a 	uxtb.w	sl, sl
 8007a9e:	f1ba 0f02 	cmp.w	sl, #2
 8007aa2:	d1ec      	bne.n	8007a7e <_scanf_float+0x2c6>
 8007aa4:	3d03      	subs	r5, #3
 8007aa6:	b2ed      	uxtb	r5, r5
 8007aa8:	1b76      	subs	r6, r6, r5
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	05da      	lsls	r2, r3, #23
 8007aae:	d52f      	bpl.n	8007b10 <_scanf_float+0x358>
 8007ab0:	055b      	lsls	r3, r3, #21
 8007ab2:	d510      	bpl.n	8007ad6 <_scanf_float+0x31e>
 8007ab4:	455e      	cmp	r6, fp
 8007ab6:	f67f aebf 	bls.w	8007838 <_scanf_float+0x80>
 8007aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007abe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ac2:	463a      	mov	r2, r7
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	4798      	blx	r3
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	e7f1      	b.n	8007ab4 <_scanf_float+0x2fc>
 8007ad0:	46aa      	mov	sl, r5
 8007ad2:	9602      	str	r6, [sp, #8]
 8007ad4:	e7df      	b.n	8007a96 <_scanf_float+0x2de>
 8007ad6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	2965      	cmp	r1, #101	; 0x65
 8007ade:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ae2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	d00c      	beq.n	8007b04 <_scanf_float+0x34c>
 8007aea:	2945      	cmp	r1, #69	; 0x45
 8007aec:	d00a      	beq.n	8007b04 <_scanf_float+0x34c>
 8007aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007af2:	463a      	mov	r2, r7
 8007af4:	4640      	mov	r0, r8
 8007af6:	4798      	blx	r3
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	1eb5      	subs	r5, r6, #2
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b08:	463a      	mov	r2, r7
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	4798      	blx	r3
 8007b0e:	462e      	mov	r6, r5
 8007b10:	6825      	ldr	r5, [r4, #0]
 8007b12:	f015 0510 	ands.w	r5, r5, #16
 8007b16:	d158      	bne.n	8007bca <_scanf_float+0x412>
 8007b18:	7035      	strb	r5, [r6, #0]
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b24:	d11c      	bne.n	8007b60 <_scanf_float+0x3a8>
 8007b26:	9b01      	ldr	r3, [sp, #4]
 8007b28:	454b      	cmp	r3, r9
 8007b2a:	eba3 0209 	sub.w	r2, r3, r9
 8007b2e:	d124      	bne.n	8007b7a <_scanf_float+0x3c2>
 8007b30:	2200      	movs	r2, #0
 8007b32:	4659      	mov	r1, fp
 8007b34:	4640      	mov	r0, r8
 8007b36:	f002 fd97 	bl	800a668 <_strtod_r>
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	6821      	ldr	r1, [r4, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f011 0f02 	tst.w	r1, #2
 8007b44:	ec57 6b10 	vmov	r6, r7, d0
 8007b48:	f103 0204 	add.w	r2, r3, #4
 8007b4c:	d020      	beq.n	8007b90 <_scanf_float+0x3d8>
 8007b4e:	9903      	ldr	r1, [sp, #12]
 8007b50:	600a      	str	r2, [r1, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	e9c3 6700 	strd	r6, r7, [r3]
 8007b58:	68e3      	ldr	r3, [r4, #12]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	60e3      	str	r3, [r4, #12]
 8007b5e:	e66c      	b.n	800783a <_scanf_float+0x82>
 8007b60:	9b04      	ldr	r3, [sp, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0e4      	beq.n	8007b30 <_scanf_float+0x378>
 8007b66:	9905      	ldr	r1, [sp, #20]
 8007b68:	230a      	movs	r3, #10
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	3101      	adds	r1, #1
 8007b6e:	4640      	mov	r0, r8
 8007b70:	f002 fe02 	bl	800a778 <_strtol_r>
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	9e05      	ldr	r6, [sp, #20]
 8007b78:	1ac2      	subs	r2, r0, r3
 8007b7a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b7e:	429e      	cmp	r6, r3
 8007b80:	bf28      	it	cs
 8007b82:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b86:	4912      	ldr	r1, [pc, #72]	; (8007bd0 <_scanf_float+0x418>)
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 f955 	bl	8007e38 <siprintf>
 8007b8e:	e7cf      	b.n	8007b30 <_scanf_float+0x378>
 8007b90:	f011 0f04 	tst.w	r1, #4
 8007b94:	9903      	ldr	r1, [sp, #12]
 8007b96:	600a      	str	r2, [r1, #0]
 8007b98:	d1db      	bne.n	8007b52 <_scanf_float+0x39a>
 8007b9a:	f8d3 8000 	ldr.w	r8, [r3]
 8007b9e:	ee10 2a10 	vmov	r2, s0
 8007ba2:	ee10 0a10 	vmov	r0, s0
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 ffc7 	bl	8000b3c <__aeabi_dcmpun>
 8007bae:	b128      	cbz	r0, 8007bbc <_scanf_float+0x404>
 8007bb0:	4808      	ldr	r0, [pc, #32]	; (8007bd4 <_scanf_float+0x41c>)
 8007bb2:	f000 fb1d 	bl	80081f0 <nanf>
 8007bb6:	ed88 0a00 	vstr	s0, [r8]
 8007bba:	e7cd      	b.n	8007b58 <_scanf_float+0x3a0>
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f9 f81a 	bl	8000bf8 <__aeabi_d2f>
 8007bc4:	f8c8 0000 	str.w	r0, [r8]
 8007bc8:	e7c6      	b.n	8007b58 <_scanf_float+0x3a0>
 8007bca:	2500      	movs	r5, #0
 8007bcc:	e635      	b.n	800783a <_scanf_float+0x82>
 8007bce:	bf00      	nop
 8007bd0:	0800b9a4 	.word	0x0800b9a4
 8007bd4:	0800bd35 	.word	0x0800bd35

08007bd8 <std>:
 8007bd8:	2300      	movs	r3, #0
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	4604      	mov	r4, r0
 8007bde:	e9c0 3300 	strd	r3, r3, [r0]
 8007be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007be6:	6083      	str	r3, [r0, #8]
 8007be8:	8181      	strh	r1, [r0, #12]
 8007bea:	6643      	str	r3, [r0, #100]	; 0x64
 8007bec:	81c2      	strh	r2, [r0, #14]
 8007bee:	6183      	str	r3, [r0, #24]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	2208      	movs	r2, #8
 8007bf4:	305c      	adds	r0, #92	; 0x5c
 8007bf6:	f000 fa17 	bl	8008028 <memset>
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <std+0x58>)
 8007bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <std+0x5c>)
 8007c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <std+0x60>)
 8007c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c06:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <std+0x64>)
 8007c08:	6323      	str	r3, [r4, #48]	; 0x30
 8007c0a:	4b0d      	ldr	r3, [pc, #52]	; (8007c40 <std+0x68>)
 8007c0c:	6224      	str	r4, [r4, #32]
 8007c0e:	429c      	cmp	r4, r3
 8007c10:	d006      	beq.n	8007c20 <std+0x48>
 8007c12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c16:	4294      	cmp	r4, r2
 8007c18:	d002      	beq.n	8007c20 <std+0x48>
 8007c1a:	33d0      	adds	r3, #208	; 0xd0
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	d105      	bne.n	8007c2c <std+0x54>
 8007c20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c28:	f000 bad0 	b.w	80081cc <__retarget_lock_init_recursive>
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	bf00      	nop
 8007c30:	08007e79 	.word	0x08007e79
 8007c34:	08007e9b 	.word	0x08007e9b
 8007c38:	08007ed3 	.word	0x08007ed3
 8007c3c:	08007ef7 	.word	0x08007ef7
 8007c40:	2000436c 	.word	0x2000436c

08007c44 <stdio_exit_handler>:
 8007c44:	4a02      	ldr	r2, [pc, #8]	; (8007c50 <stdio_exit_handler+0xc>)
 8007c46:	4903      	ldr	r1, [pc, #12]	; (8007c54 <stdio_exit_handler+0x10>)
 8007c48:	4803      	ldr	r0, [pc, #12]	; (8007c58 <stdio_exit_handler+0x14>)
 8007c4a:	f000 b869 	b.w	8007d20 <_fwalk_sglue>
 8007c4e:	bf00      	nop
 8007c50:	20000010 	.word	0x20000010
 8007c54:	0800adc1 	.word	0x0800adc1
 8007c58:	2000001c 	.word	0x2000001c

08007c5c <cleanup_stdio>:
 8007c5c:	6841      	ldr	r1, [r0, #4]
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <cleanup_stdio+0x34>)
 8007c60:	4299      	cmp	r1, r3
 8007c62:	b510      	push	{r4, lr}
 8007c64:	4604      	mov	r4, r0
 8007c66:	d001      	beq.n	8007c6c <cleanup_stdio+0x10>
 8007c68:	f003 f8aa 	bl	800adc0 <_fflush_r>
 8007c6c:	68a1      	ldr	r1, [r4, #8]
 8007c6e:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <cleanup_stdio+0x38>)
 8007c70:	4299      	cmp	r1, r3
 8007c72:	d002      	beq.n	8007c7a <cleanup_stdio+0x1e>
 8007c74:	4620      	mov	r0, r4
 8007c76:	f003 f8a3 	bl	800adc0 <_fflush_r>
 8007c7a:	68e1      	ldr	r1, [r4, #12]
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <cleanup_stdio+0x3c>)
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	d004      	beq.n	8007c8c <cleanup_stdio+0x30>
 8007c82:	4620      	mov	r0, r4
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f003 b89a 	b.w	800adc0 <_fflush_r>
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	2000436c 	.word	0x2000436c
 8007c94:	200043d4 	.word	0x200043d4
 8007c98:	2000443c 	.word	0x2000443c

08007c9c <global_stdio_init.part.0>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <global_stdio_init.part.0+0x30>)
 8007ca0:	4c0b      	ldr	r4, [pc, #44]	; (8007cd0 <global_stdio_init.part.0+0x34>)
 8007ca2:	4a0c      	ldr	r2, [pc, #48]	; (8007cd4 <global_stdio_init.part.0+0x38>)
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2104      	movs	r1, #4
 8007cac:	f7ff ff94 	bl	8007bd8 <std>
 8007cb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	2109      	movs	r1, #9
 8007cb8:	f7ff ff8e 	bl	8007bd8 <std>
 8007cbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc6:	2112      	movs	r1, #18
 8007cc8:	f7ff bf86 	b.w	8007bd8 <std>
 8007ccc:	200044a4 	.word	0x200044a4
 8007cd0:	2000436c 	.word	0x2000436c
 8007cd4:	08007c45 	.word	0x08007c45

08007cd8 <__sfp_lock_acquire>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sfp_lock_acquire+0x8>)
 8007cda:	f000 ba78 	b.w	80081ce <__retarget_lock_acquire_recursive>
 8007cde:	bf00      	nop
 8007ce0:	200044ad 	.word	0x200044ad

08007ce4 <__sfp_lock_release>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__sfp_lock_release+0x8>)
 8007ce6:	f000 ba73 	b.w	80081d0 <__retarget_lock_release_recursive>
 8007cea:	bf00      	nop
 8007cec:	200044ad 	.word	0x200044ad

08007cf0 <__sinit>:
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	f7ff fff0 	bl	8007cd8 <__sfp_lock_acquire>
 8007cf8:	6a23      	ldr	r3, [r4, #32]
 8007cfa:	b11b      	cbz	r3, 8007d04 <__sinit+0x14>
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f7ff bff0 	b.w	8007ce4 <__sfp_lock_release>
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <__sinit+0x28>)
 8007d06:	6223      	str	r3, [r4, #32]
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <__sinit+0x2c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1f5      	bne.n	8007cfc <__sinit+0xc>
 8007d10:	f7ff ffc4 	bl	8007c9c <global_stdio_init.part.0>
 8007d14:	e7f2      	b.n	8007cfc <__sinit+0xc>
 8007d16:	bf00      	nop
 8007d18:	08007c5d 	.word	0x08007c5d
 8007d1c:	200044a4 	.word	0x200044a4

08007d20 <_fwalk_sglue>:
 8007d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d24:	4607      	mov	r7, r0
 8007d26:	4688      	mov	r8, r1
 8007d28:	4614      	mov	r4, r2
 8007d2a:	2600      	movs	r6, #0
 8007d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d30:	f1b9 0901 	subs.w	r9, r9, #1
 8007d34:	d505      	bpl.n	8007d42 <_fwalk_sglue+0x22>
 8007d36:	6824      	ldr	r4, [r4, #0]
 8007d38:	2c00      	cmp	r4, #0
 8007d3a:	d1f7      	bne.n	8007d2c <_fwalk_sglue+0xc>
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d907      	bls.n	8007d58 <_fwalk_sglue+0x38>
 8007d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	d003      	beq.n	8007d58 <_fwalk_sglue+0x38>
 8007d50:	4629      	mov	r1, r5
 8007d52:	4638      	mov	r0, r7
 8007d54:	47c0      	blx	r8
 8007d56:	4306      	orrs	r6, r0
 8007d58:	3568      	adds	r5, #104	; 0x68
 8007d5a:	e7e9      	b.n	8007d30 <_fwalk_sglue+0x10>

08007d5c <iprintf>:
 8007d5c:	b40f      	push	{r0, r1, r2, r3}
 8007d5e:	b507      	push	{r0, r1, r2, lr}
 8007d60:	4906      	ldr	r1, [pc, #24]	; (8007d7c <iprintf+0x20>)
 8007d62:	ab04      	add	r3, sp, #16
 8007d64:	6808      	ldr	r0, [r1, #0]
 8007d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6a:	6881      	ldr	r1, [r0, #8]
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	f002 fe87 	bl	800aa80 <_vfiprintf_r>
 8007d72:	b003      	add	sp, #12
 8007d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d78:	b004      	add	sp, #16
 8007d7a:	4770      	bx	lr
 8007d7c:	20000068 	.word	0x20000068

08007d80 <_puts_r>:
 8007d80:	6a03      	ldr	r3, [r0, #32]
 8007d82:	b570      	push	{r4, r5, r6, lr}
 8007d84:	6884      	ldr	r4, [r0, #8]
 8007d86:	4605      	mov	r5, r0
 8007d88:	460e      	mov	r6, r1
 8007d8a:	b90b      	cbnz	r3, 8007d90 <_puts_r+0x10>
 8007d8c:	f7ff ffb0 	bl	8007cf0 <__sinit>
 8007d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d92:	07db      	lsls	r3, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <_puts_r+0x22>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	0598      	lsls	r0, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_puts_r+0x22>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9e:	f000 fa16 	bl	80081ce <__retarget_lock_acquire_recursive>
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	0719      	lsls	r1, r3, #28
 8007da6:	d513      	bpl.n	8007dd0 <_puts_r+0x50>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	b18b      	cbz	r3, 8007dd0 <_puts_r+0x50>
 8007dac:	3e01      	subs	r6, #1
 8007dae:	68a3      	ldr	r3, [r4, #8]
 8007db0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007db4:	3b01      	subs	r3, #1
 8007db6:	60a3      	str	r3, [r4, #8]
 8007db8:	b9e9      	cbnz	r1, 8007df6 <_puts_r+0x76>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	da2e      	bge.n	8007e1c <_puts_r+0x9c>
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	210a      	movs	r1, #10
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 f89b 	bl	8007efe <__swbuf_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d007      	beq.n	8007ddc <_puts_r+0x5c>
 8007dcc:	250a      	movs	r5, #10
 8007dce:	e007      	b.n	8007de0 <_puts_r+0x60>
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 f8d0 	bl	8007f78 <__swsetup_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d0e7      	beq.n	8007dac <_puts_r+0x2c>
 8007ddc:	f04f 35ff 	mov.w	r5, #4294967295
 8007de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de2:	07da      	lsls	r2, r3, #31
 8007de4:	d405      	bmi.n	8007df2 <_puts_r+0x72>
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	059b      	lsls	r3, r3, #22
 8007dea:	d402      	bmi.n	8007df2 <_puts_r+0x72>
 8007dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dee:	f000 f9ef 	bl	80081d0 <__retarget_lock_release_recursive>
 8007df2:	4628      	mov	r0, r5
 8007df4:	bd70      	pop	{r4, r5, r6, pc}
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da04      	bge.n	8007e04 <_puts_r+0x84>
 8007dfa:	69a2      	ldr	r2, [r4, #24]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	dc06      	bgt.n	8007e0e <_puts_r+0x8e>
 8007e00:	290a      	cmp	r1, #10
 8007e02:	d004      	beq.n	8007e0e <_puts_r+0x8e>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	7019      	strb	r1, [r3, #0]
 8007e0c:	e7cf      	b.n	8007dae <_puts_r+0x2e>
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 f874 	bl	8007efe <__swbuf_r>
 8007e16:	3001      	adds	r0, #1
 8007e18:	d1c9      	bne.n	8007dae <_puts_r+0x2e>
 8007e1a:	e7df      	b.n	8007ddc <_puts_r+0x5c>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	250a      	movs	r5, #10
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	6022      	str	r2, [r4, #0]
 8007e24:	701d      	strb	r5, [r3, #0]
 8007e26:	e7db      	b.n	8007de0 <_puts_r+0x60>

08007e28 <puts>:
 8007e28:	4b02      	ldr	r3, [pc, #8]	; (8007e34 <puts+0xc>)
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	f7ff bfa7 	b.w	8007d80 <_puts_r>
 8007e32:	bf00      	nop
 8007e34:	20000068 	.word	0x20000068

08007e38 <siprintf>:
 8007e38:	b40e      	push	{r1, r2, r3}
 8007e3a:	b500      	push	{lr}
 8007e3c:	b09c      	sub	sp, #112	; 0x70
 8007e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e40:	9002      	str	r0, [sp, #8]
 8007e42:	9006      	str	r0, [sp, #24]
 8007e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e48:	4809      	ldr	r0, [pc, #36]	; (8007e70 <siprintf+0x38>)
 8007e4a:	9107      	str	r1, [sp, #28]
 8007e4c:	9104      	str	r1, [sp, #16]
 8007e4e:	4909      	ldr	r1, [pc, #36]	; (8007e74 <siprintf+0x3c>)
 8007e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e54:	9105      	str	r1, [sp, #20]
 8007e56:	6800      	ldr	r0, [r0, #0]
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	a902      	add	r1, sp, #8
 8007e5c:	f002 fce8 	bl	800a830 <_svfiprintf_r>
 8007e60:	9b02      	ldr	r3, [sp, #8]
 8007e62:	2200      	movs	r2, #0
 8007e64:	701a      	strb	r2, [r3, #0]
 8007e66:	b01c      	add	sp, #112	; 0x70
 8007e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e6c:	b003      	add	sp, #12
 8007e6e:	4770      	bx	lr
 8007e70:	20000068 	.word	0x20000068
 8007e74:	ffff0208 	.word	0xffff0208

08007e78 <__sread>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e80:	f000 f956 	bl	8008130 <_read_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	bfab      	itete	ge
 8007e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e8c:	181b      	addge	r3, r3, r0
 8007e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e92:	bfac      	ite	ge
 8007e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e96:	81a3      	strhlt	r3, [r4, #12]
 8007e98:	bd10      	pop	{r4, pc}

08007e9a <__swrite>:
 8007e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e9e:	461f      	mov	r7, r3
 8007ea0:	898b      	ldrh	r3, [r1, #12]
 8007ea2:	05db      	lsls	r3, r3, #23
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	d505      	bpl.n	8007eb8 <__swrite+0x1e>
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f000 f92a 	bl	800810c <_lseek_r>
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ec2:	81a3      	strh	r3, [r4, #12]
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	4628      	mov	r0, r5
 8007eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ece:	f000 b941 	b.w	8008154 <_write_r>

08007ed2 <__sseek>:
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eda:	f000 f917 	bl	800810c <_lseek_r>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	bf15      	itete	ne
 8007ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eee:	81a3      	strheq	r3, [r4, #12]
 8007ef0:	bf18      	it	ne
 8007ef2:	81a3      	strhne	r3, [r4, #12]
 8007ef4:	bd10      	pop	{r4, pc}

08007ef6 <__sclose>:
 8007ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efa:	f000 b8a1 	b.w	8008040 <_close_r>

08007efe <__swbuf_r>:
 8007efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f00:	460e      	mov	r6, r1
 8007f02:	4614      	mov	r4, r2
 8007f04:	4605      	mov	r5, r0
 8007f06:	b118      	cbz	r0, 8007f10 <__swbuf_r+0x12>
 8007f08:	6a03      	ldr	r3, [r0, #32]
 8007f0a:	b90b      	cbnz	r3, 8007f10 <__swbuf_r+0x12>
 8007f0c:	f7ff fef0 	bl	8007cf0 <__sinit>
 8007f10:	69a3      	ldr	r3, [r4, #24]
 8007f12:	60a3      	str	r3, [r4, #8]
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	071a      	lsls	r2, r3, #28
 8007f18:	d525      	bpl.n	8007f66 <__swbuf_r+0x68>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	b31b      	cbz	r3, 8007f66 <__swbuf_r+0x68>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	6922      	ldr	r2, [r4, #16]
 8007f22:	1a98      	subs	r0, r3, r2
 8007f24:	6963      	ldr	r3, [r4, #20]
 8007f26:	b2f6      	uxtb	r6, r6
 8007f28:	4283      	cmp	r3, r0
 8007f2a:	4637      	mov	r7, r6
 8007f2c:	dc04      	bgt.n	8007f38 <__swbuf_r+0x3a>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4628      	mov	r0, r5
 8007f32:	f002 ff45 	bl	800adc0 <_fflush_r>
 8007f36:	b9e0      	cbnz	r0, 8007f72 <__swbuf_r+0x74>
 8007f38:	68a3      	ldr	r3, [r4, #8]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	60a3      	str	r3, [r4, #8]
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	6022      	str	r2, [r4, #0]
 8007f44:	701e      	strb	r6, [r3, #0]
 8007f46:	6962      	ldr	r2, [r4, #20]
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d004      	beq.n	8007f58 <__swbuf_r+0x5a>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	07db      	lsls	r3, r3, #31
 8007f52:	d506      	bpl.n	8007f62 <__swbuf_r+0x64>
 8007f54:	2e0a      	cmp	r6, #10
 8007f56:	d104      	bne.n	8007f62 <__swbuf_r+0x64>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f002 ff30 	bl	800adc0 <_fflush_r>
 8007f60:	b938      	cbnz	r0, 8007f72 <__swbuf_r+0x74>
 8007f62:	4638      	mov	r0, r7
 8007f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f66:	4621      	mov	r1, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f000 f805 	bl	8007f78 <__swsetup_r>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d0d5      	beq.n	8007f1e <__swbuf_r+0x20>
 8007f72:	f04f 37ff 	mov.w	r7, #4294967295
 8007f76:	e7f4      	b.n	8007f62 <__swbuf_r+0x64>

08007f78 <__swsetup_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <__swsetup_r+0xac>)
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	460c      	mov	r4, r1
 8007f82:	b118      	cbz	r0, 8007f8c <__swsetup_r+0x14>
 8007f84:	6a03      	ldr	r3, [r0, #32]
 8007f86:	b90b      	cbnz	r3, 8007f8c <__swsetup_r+0x14>
 8007f88:	f7ff feb2 	bl	8007cf0 <__sinit>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f92:	0718      	lsls	r0, r3, #28
 8007f94:	d422      	bmi.n	8007fdc <__swsetup_r+0x64>
 8007f96:	06d9      	lsls	r1, r3, #27
 8007f98:	d407      	bmi.n	8007faa <__swsetup_r+0x32>
 8007f9a:	2309      	movs	r3, #9
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	e034      	b.n	8008014 <__swsetup_r+0x9c>
 8007faa:	0758      	lsls	r0, r3, #29
 8007fac:	d512      	bpl.n	8007fd4 <__swsetup_r+0x5c>
 8007fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fb0:	b141      	cbz	r1, 8007fc4 <__swsetup_r+0x4c>
 8007fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fb6:	4299      	cmp	r1, r3
 8007fb8:	d002      	beq.n	8007fc0 <__swsetup_r+0x48>
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 ff9a 	bl	8008ef4 <_free_r>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	6363      	str	r3, [r4, #52]	; 0x34
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6063      	str	r3, [r4, #4]
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f043 0308 	orr.w	r3, r3, #8
 8007fda:	81a3      	strh	r3, [r4, #12]
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	b94b      	cbnz	r3, 8007ff4 <__swsetup_r+0x7c>
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fea:	d003      	beq.n	8007ff4 <__swsetup_r+0x7c>
 8007fec:	4621      	mov	r1, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f002 ff34 	bl	800ae5c <__smakebuf_r>
 8007ff4:	89a0      	ldrh	r0, [r4, #12]
 8007ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ffa:	f010 0301 	ands.w	r3, r0, #1
 8007ffe:	d00a      	beq.n	8008016 <__swsetup_r+0x9e>
 8008000:	2300      	movs	r3, #0
 8008002:	60a3      	str	r3, [r4, #8]
 8008004:	6963      	ldr	r3, [r4, #20]
 8008006:	425b      	negs	r3, r3
 8008008:	61a3      	str	r3, [r4, #24]
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	b943      	cbnz	r3, 8008020 <__swsetup_r+0xa8>
 800800e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008012:	d1c4      	bne.n	8007f9e <__swsetup_r+0x26>
 8008014:	bd38      	pop	{r3, r4, r5, pc}
 8008016:	0781      	lsls	r1, r0, #30
 8008018:	bf58      	it	pl
 800801a:	6963      	ldrpl	r3, [r4, #20]
 800801c:	60a3      	str	r3, [r4, #8]
 800801e:	e7f4      	b.n	800800a <__swsetup_r+0x92>
 8008020:	2000      	movs	r0, #0
 8008022:	e7f7      	b.n	8008014 <__swsetup_r+0x9c>
 8008024:	20000068 	.word	0x20000068

08008028 <memset>:
 8008028:	4402      	add	r2, r0
 800802a:	4603      	mov	r3, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <_localeconv_r>:
 8008038:	4800      	ldr	r0, [pc, #0]	; (800803c <_localeconv_r+0x4>)
 800803a:	4770      	bx	lr
 800803c:	2000015c 	.word	0x2000015c

08008040 <_close_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d06      	ldr	r5, [pc, #24]	; (800805c <_close_r+0x1c>)
 8008044:	2300      	movs	r3, #0
 8008046:	4604      	mov	r4, r0
 8008048:	4608      	mov	r0, r1
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	f7f9 fded 	bl	8001c2a <_close>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_close_r+0x1a>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_close_r+0x1a>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	200044a8 	.word	0x200044a8

08008060 <_reclaim_reent>:
 8008060:	4b29      	ldr	r3, [pc, #164]	; (8008108 <_reclaim_reent+0xa8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4283      	cmp	r3, r0
 8008066:	b570      	push	{r4, r5, r6, lr}
 8008068:	4604      	mov	r4, r0
 800806a:	d04b      	beq.n	8008104 <_reclaim_reent+0xa4>
 800806c:	69c3      	ldr	r3, [r0, #28]
 800806e:	b143      	cbz	r3, 8008082 <_reclaim_reent+0x22>
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d144      	bne.n	8008100 <_reclaim_reent+0xa0>
 8008076:	69e3      	ldr	r3, [r4, #28]
 8008078:	6819      	ldr	r1, [r3, #0]
 800807a:	b111      	cbz	r1, 8008082 <_reclaim_reent+0x22>
 800807c:	4620      	mov	r0, r4
 800807e:	f000 ff39 	bl	8008ef4 <_free_r>
 8008082:	6961      	ldr	r1, [r4, #20]
 8008084:	b111      	cbz	r1, 800808c <_reclaim_reent+0x2c>
 8008086:	4620      	mov	r0, r4
 8008088:	f000 ff34 	bl	8008ef4 <_free_r>
 800808c:	69e1      	ldr	r1, [r4, #28]
 800808e:	b111      	cbz	r1, 8008096 <_reclaim_reent+0x36>
 8008090:	4620      	mov	r0, r4
 8008092:	f000 ff2f 	bl	8008ef4 <_free_r>
 8008096:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008098:	b111      	cbz	r1, 80080a0 <_reclaim_reent+0x40>
 800809a:	4620      	mov	r0, r4
 800809c:	f000 ff2a 	bl	8008ef4 <_free_r>
 80080a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080a2:	b111      	cbz	r1, 80080aa <_reclaim_reent+0x4a>
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 ff25 	bl	8008ef4 <_free_r>
 80080aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080ac:	b111      	cbz	r1, 80080b4 <_reclaim_reent+0x54>
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 ff20 	bl	8008ef4 <_free_r>
 80080b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080b6:	b111      	cbz	r1, 80080be <_reclaim_reent+0x5e>
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 ff1b 	bl	8008ef4 <_free_r>
 80080be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080c0:	b111      	cbz	r1, 80080c8 <_reclaim_reent+0x68>
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 ff16 	bl	8008ef4 <_free_r>
 80080c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80080ca:	b111      	cbz	r1, 80080d2 <_reclaim_reent+0x72>
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 ff11 	bl	8008ef4 <_free_r>
 80080d2:	6a23      	ldr	r3, [r4, #32]
 80080d4:	b1b3      	cbz	r3, 8008104 <_reclaim_reent+0xa4>
 80080d6:	4620      	mov	r0, r4
 80080d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080dc:	4718      	bx	r3
 80080de:	5949      	ldr	r1, [r1, r5]
 80080e0:	b941      	cbnz	r1, 80080f4 <_reclaim_reent+0x94>
 80080e2:	3504      	adds	r5, #4
 80080e4:	69e3      	ldr	r3, [r4, #28]
 80080e6:	2d80      	cmp	r5, #128	; 0x80
 80080e8:	68d9      	ldr	r1, [r3, #12]
 80080ea:	d1f8      	bne.n	80080de <_reclaim_reent+0x7e>
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 ff01 	bl	8008ef4 <_free_r>
 80080f2:	e7c0      	b.n	8008076 <_reclaim_reent+0x16>
 80080f4:	680e      	ldr	r6, [r1, #0]
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 fefc 	bl	8008ef4 <_free_r>
 80080fc:	4631      	mov	r1, r6
 80080fe:	e7ef      	b.n	80080e0 <_reclaim_reent+0x80>
 8008100:	2500      	movs	r5, #0
 8008102:	e7ef      	b.n	80080e4 <_reclaim_reent+0x84>
 8008104:	bd70      	pop	{r4, r5, r6, pc}
 8008106:	bf00      	nop
 8008108:	20000068 	.word	0x20000068

0800810c <_lseek_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d07      	ldr	r5, [pc, #28]	; (800812c <_lseek_r+0x20>)
 8008110:	4604      	mov	r4, r0
 8008112:	4608      	mov	r0, r1
 8008114:	4611      	mov	r1, r2
 8008116:	2200      	movs	r2, #0
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f7f9 fdac 	bl	8001c78 <_lseek>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_lseek_r+0x1e>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_lseek_r+0x1e>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	200044a8 	.word	0x200044a8

08008130 <_read_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	; (8008150 <_read_r+0x20>)
 8008134:	4604      	mov	r4, r0
 8008136:	4608      	mov	r0, r1
 8008138:	4611      	mov	r1, r2
 800813a:	2200      	movs	r2, #0
 800813c:	602a      	str	r2, [r5, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	f7f9 fd3a 	bl	8001bb8 <_read>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_read_r+0x1e>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_read_r+0x1e>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	200044a8 	.word	0x200044a8

08008154 <_write_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d07      	ldr	r5, [pc, #28]	; (8008174 <_write_r+0x20>)
 8008158:	4604      	mov	r4, r0
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	2200      	movs	r2, #0
 8008160:	602a      	str	r2, [r5, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f7f9 fd45 	bl	8001bf2 <_write>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_write_r+0x1e>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_write_r+0x1e>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	200044a8 	.word	0x200044a8

08008178 <__errno>:
 8008178:	4b01      	ldr	r3, [pc, #4]	; (8008180 <__errno+0x8>)
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20000068 	.word	0x20000068

08008184 <__libc_init_array>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4d0d      	ldr	r5, [pc, #52]	; (80081bc <__libc_init_array+0x38>)
 8008188:	4c0d      	ldr	r4, [pc, #52]	; (80081c0 <__libc_init_array+0x3c>)
 800818a:	1b64      	subs	r4, r4, r5
 800818c:	10a4      	asrs	r4, r4, #2
 800818e:	2600      	movs	r6, #0
 8008190:	42a6      	cmp	r6, r4
 8008192:	d109      	bne.n	80081a8 <__libc_init_array+0x24>
 8008194:	4d0b      	ldr	r5, [pc, #44]	; (80081c4 <__libc_init_array+0x40>)
 8008196:	4c0c      	ldr	r4, [pc, #48]	; (80081c8 <__libc_init_array+0x44>)
 8008198:	f003 fb42 	bl	800b820 <_init>
 800819c:	1b64      	subs	r4, r4, r5
 800819e:	10a4      	asrs	r4, r4, #2
 80081a0:	2600      	movs	r6, #0
 80081a2:	42a6      	cmp	r6, r4
 80081a4:	d105      	bne.n	80081b2 <__libc_init_array+0x2e>
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ac:	4798      	blx	r3
 80081ae:	3601      	adds	r6, #1
 80081b0:	e7ee      	b.n	8008190 <__libc_init_array+0xc>
 80081b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b6:	4798      	blx	r3
 80081b8:	3601      	adds	r6, #1
 80081ba:	e7f2      	b.n	80081a2 <__libc_init_array+0x1e>
 80081bc:	0800bda0 	.word	0x0800bda0
 80081c0:	0800bda0 	.word	0x0800bda0
 80081c4:	0800bda0 	.word	0x0800bda0
 80081c8:	0800bda4 	.word	0x0800bda4

080081cc <__retarget_lock_init_recursive>:
 80081cc:	4770      	bx	lr

080081ce <__retarget_lock_acquire_recursive>:
 80081ce:	4770      	bx	lr

080081d0 <__retarget_lock_release_recursive>:
 80081d0:	4770      	bx	lr

080081d2 <memcpy>:
 80081d2:	440a      	add	r2, r1
 80081d4:	4291      	cmp	r1, r2
 80081d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80081da:	d100      	bne.n	80081de <memcpy+0xc>
 80081dc:	4770      	bx	lr
 80081de:	b510      	push	{r4, lr}
 80081e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e8:	4291      	cmp	r1, r2
 80081ea:	d1f9      	bne.n	80081e0 <memcpy+0xe>
 80081ec:	bd10      	pop	{r4, pc}
	...

080081f0 <nanf>:
 80081f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80081f8 <nanf+0x8>
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	7fc00000 	.word	0x7fc00000

080081fc <quorem>:
 80081fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	6903      	ldr	r3, [r0, #16]
 8008202:	690c      	ldr	r4, [r1, #16]
 8008204:	42a3      	cmp	r3, r4
 8008206:	4607      	mov	r7, r0
 8008208:	db7e      	blt.n	8008308 <quorem+0x10c>
 800820a:	3c01      	subs	r4, #1
 800820c:	f101 0814 	add.w	r8, r1, #20
 8008210:	f100 0514 	add.w	r5, r0, #20
 8008214:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800821e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008222:	3301      	adds	r3, #1
 8008224:	429a      	cmp	r2, r3
 8008226:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800822a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800822e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008232:	d331      	bcc.n	8008298 <quorem+0x9c>
 8008234:	f04f 0e00 	mov.w	lr, #0
 8008238:	4640      	mov	r0, r8
 800823a:	46ac      	mov	ip, r5
 800823c:	46f2      	mov	sl, lr
 800823e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008242:	b293      	uxth	r3, r2
 8008244:	fb06 e303 	mla	r3, r6, r3, lr
 8008248:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800824c:	0c1a      	lsrs	r2, r3, #16
 800824e:	b29b      	uxth	r3, r3
 8008250:	ebaa 0303 	sub.w	r3, sl, r3
 8008254:	f8dc a000 	ldr.w	sl, [ip]
 8008258:	fa13 f38a 	uxtah	r3, r3, sl
 800825c:	fb06 220e 	mla	r2, r6, lr, r2
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	9b00      	ldr	r3, [sp, #0]
 8008264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008268:	b292      	uxth	r2, r2
 800826a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800826e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008272:	f8bd 3000 	ldrh.w	r3, [sp]
 8008276:	4581      	cmp	r9, r0
 8008278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800827c:	f84c 3b04 	str.w	r3, [ip], #4
 8008280:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008284:	d2db      	bcs.n	800823e <quorem+0x42>
 8008286:	f855 300b 	ldr.w	r3, [r5, fp]
 800828a:	b92b      	cbnz	r3, 8008298 <quorem+0x9c>
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	3b04      	subs	r3, #4
 8008290:	429d      	cmp	r5, r3
 8008292:	461a      	mov	r2, r3
 8008294:	d32c      	bcc.n	80082f0 <quorem+0xf4>
 8008296:	613c      	str	r4, [r7, #16]
 8008298:	4638      	mov	r0, r7
 800829a:	f001 f9f1 	bl	8009680 <__mcmp>
 800829e:	2800      	cmp	r0, #0
 80082a0:	db22      	blt.n	80082e8 <quorem+0xec>
 80082a2:	3601      	adds	r6, #1
 80082a4:	4629      	mov	r1, r5
 80082a6:	2000      	movs	r0, #0
 80082a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80082ac:	f8d1 c000 	ldr.w	ip, [r1]
 80082b0:	b293      	uxth	r3, r2
 80082b2:	1ac3      	subs	r3, r0, r3
 80082b4:	0c12      	lsrs	r2, r2, #16
 80082b6:	fa13 f38c 	uxtah	r3, r3, ip
 80082ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80082be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c8:	45c1      	cmp	r9, r8
 80082ca:	f841 3b04 	str.w	r3, [r1], #4
 80082ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082d2:	d2e9      	bcs.n	80082a8 <quorem+0xac>
 80082d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082dc:	b922      	cbnz	r2, 80082e8 <quorem+0xec>
 80082de:	3b04      	subs	r3, #4
 80082e0:	429d      	cmp	r5, r3
 80082e2:	461a      	mov	r2, r3
 80082e4:	d30a      	bcc.n	80082fc <quorem+0x100>
 80082e6:	613c      	str	r4, [r7, #16]
 80082e8:	4630      	mov	r0, r6
 80082ea:	b003      	add	sp, #12
 80082ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	3b04      	subs	r3, #4
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	d1ce      	bne.n	8008296 <quorem+0x9a>
 80082f8:	3c01      	subs	r4, #1
 80082fa:	e7c9      	b.n	8008290 <quorem+0x94>
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	3b04      	subs	r3, #4
 8008300:	2a00      	cmp	r2, #0
 8008302:	d1f0      	bne.n	80082e6 <quorem+0xea>
 8008304:	3c01      	subs	r4, #1
 8008306:	e7eb      	b.n	80082e0 <quorem+0xe4>
 8008308:	2000      	movs	r0, #0
 800830a:	e7ee      	b.n	80082ea <quorem+0xee>
 800830c:	0000      	movs	r0, r0
	...

08008310 <_dtoa_r>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	ed2d 8b04 	vpush	{d8-d9}
 8008318:	69c5      	ldr	r5, [r0, #28]
 800831a:	b093      	sub	sp, #76	; 0x4c
 800831c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008320:	ec57 6b10 	vmov	r6, r7, d0
 8008324:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008328:	9107      	str	r1, [sp, #28]
 800832a:	4604      	mov	r4, r0
 800832c:	920a      	str	r2, [sp, #40]	; 0x28
 800832e:	930d      	str	r3, [sp, #52]	; 0x34
 8008330:	b975      	cbnz	r5, 8008350 <_dtoa_r+0x40>
 8008332:	2010      	movs	r0, #16
 8008334:	f000 fe2a 	bl	8008f8c <malloc>
 8008338:	4602      	mov	r2, r0
 800833a:	61e0      	str	r0, [r4, #28]
 800833c:	b920      	cbnz	r0, 8008348 <_dtoa_r+0x38>
 800833e:	4bae      	ldr	r3, [pc, #696]	; (80085f8 <_dtoa_r+0x2e8>)
 8008340:	21ef      	movs	r1, #239	; 0xef
 8008342:	48ae      	ldr	r0, [pc, #696]	; (80085fc <_dtoa_r+0x2ec>)
 8008344:	f002 fe2c 	bl	800afa0 <__assert_func>
 8008348:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800834c:	6005      	str	r5, [r0, #0]
 800834e:	60c5      	str	r5, [r0, #12]
 8008350:	69e3      	ldr	r3, [r4, #28]
 8008352:	6819      	ldr	r1, [r3, #0]
 8008354:	b151      	cbz	r1, 800836c <_dtoa_r+0x5c>
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	604a      	str	r2, [r1, #4]
 800835a:	2301      	movs	r3, #1
 800835c:	4093      	lsls	r3, r2
 800835e:	608b      	str	r3, [r1, #8]
 8008360:	4620      	mov	r0, r4
 8008362:	f000 ff07 	bl	8009174 <_Bfree>
 8008366:	69e3      	ldr	r3, [r4, #28]
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	1e3b      	subs	r3, r7, #0
 800836e:	bfbb      	ittet	lt
 8008370:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008374:	9303      	strlt	r3, [sp, #12]
 8008376:	2300      	movge	r3, #0
 8008378:	2201      	movlt	r2, #1
 800837a:	bfac      	ite	ge
 800837c:	f8c8 3000 	strge.w	r3, [r8]
 8008380:	f8c8 2000 	strlt.w	r2, [r8]
 8008384:	4b9e      	ldr	r3, [pc, #632]	; (8008600 <_dtoa_r+0x2f0>)
 8008386:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800838a:	ea33 0308 	bics.w	r3, r3, r8
 800838e:	d11b      	bne.n	80083c8 <_dtoa_r+0xb8>
 8008390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008392:	f242 730f 	movw	r3, #9999	; 0x270f
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800839c:	4333      	orrs	r3, r6
 800839e:	f000 8593 	beq.w	8008ec8 <_dtoa_r+0xbb8>
 80083a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a4:	b963      	cbnz	r3, 80083c0 <_dtoa_r+0xb0>
 80083a6:	4b97      	ldr	r3, [pc, #604]	; (8008604 <_dtoa_r+0x2f4>)
 80083a8:	e027      	b.n	80083fa <_dtoa_r+0xea>
 80083aa:	4b97      	ldr	r3, [pc, #604]	; (8008608 <_dtoa_r+0x2f8>)
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	3308      	adds	r3, #8
 80083b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	9800      	ldr	r0, [sp, #0]
 80083b6:	b013      	add	sp, #76	; 0x4c
 80083b8:	ecbd 8b04 	vpop	{d8-d9}
 80083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	4b90      	ldr	r3, [pc, #576]	; (8008604 <_dtoa_r+0x2f4>)
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	3303      	adds	r3, #3
 80083c6:	e7f3      	b.n	80083b0 <_dtoa_r+0xa0>
 80083c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083cc:	2200      	movs	r2, #0
 80083ce:	ec51 0b17 	vmov	r0, r1, d7
 80083d2:	eeb0 8a47 	vmov.f32	s16, s14
 80083d6:	eef0 8a67 	vmov.f32	s17, s15
 80083da:	2300      	movs	r3, #0
 80083dc:	f7f8 fb7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80083e0:	4681      	mov	r9, r0
 80083e2:	b160      	cbz	r0, 80083fe <_dtoa_r+0xee>
 80083e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083e6:	2301      	movs	r3, #1
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8568 	beq.w	8008ec2 <_dtoa_r+0xbb2>
 80083f2:	4b86      	ldr	r3, [pc, #536]	; (800860c <_dtoa_r+0x2fc>)
 80083f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	e7da      	b.n	80083b4 <_dtoa_r+0xa4>
 80083fe:	aa10      	add	r2, sp, #64	; 0x40
 8008400:	a911      	add	r1, sp, #68	; 0x44
 8008402:	4620      	mov	r0, r4
 8008404:	eeb0 0a48 	vmov.f32	s0, s16
 8008408:	eef0 0a68 	vmov.f32	s1, s17
 800840c:	f001 fa4e 	bl	80098ac <__d2b>
 8008410:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008414:	4682      	mov	sl, r0
 8008416:	2d00      	cmp	r5, #0
 8008418:	d07f      	beq.n	800851a <_dtoa_r+0x20a>
 800841a:	ee18 3a90 	vmov	r3, s17
 800841e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008422:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008426:	ec51 0b18 	vmov	r0, r1, d8
 800842a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800842e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008432:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008436:	4619      	mov	r1, r3
 8008438:	2200      	movs	r2, #0
 800843a:	4b75      	ldr	r3, [pc, #468]	; (8008610 <_dtoa_r+0x300>)
 800843c:	f7f7 ff2c 	bl	8000298 <__aeabi_dsub>
 8008440:	a367      	add	r3, pc, #412	; (adr r3, 80085e0 <_dtoa_r+0x2d0>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f7f8 f8df 	bl	8000608 <__aeabi_dmul>
 800844a:	a367      	add	r3, pc, #412	; (adr r3, 80085e8 <_dtoa_r+0x2d8>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f7f7 ff24 	bl	800029c <__adddf3>
 8008454:	4606      	mov	r6, r0
 8008456:	4628      	mov	r0, r5
 8008458:	460f      	mov	r7, r1
 800845a:	f7f8 f86b 	bl	8000534 <__aeabi_i2d>
 800845e:	a364      	add	r3, pc, #400	; (adr r3, 80085f0 <_dtoa_r+0x2e0>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f7f8 f8d0 	bl	8000608 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4630      	mov	r0, r6
 800846e:	4639      	mov	r1, r7
 8008470:	f7f7 ff14 	bl	800029c <__adddf3>
 8008474:	4606      	mov	r6, r0
 8008476:	460f      	mov	r7, r1
 8008478:	f7f8 fb76 	bl	8000b68 <__aeabi_d2iz>
 800847c:	2200      	movs	r2, #0
 800847e:	4683      	mov	fp, r0
 8008480:	2300      	movs	r3, #0
 8008482:	4630      	mov	r0, r6
 8008484:	4639      	mov	r1, r7
 8008486:	f7f8 fb31 	bl	8000aec <__aeabi_dcmplt>
 800848a:	b148      	cbz	r0, 80084a0 <_dtoa_r+0x190>
 800848c:	4658      	mov	r0, fp
 800848e:	f7f8 f851 	bl	8000534 <__aeabi_i2d>
 8008492:	4632      	mov	r2, r6
 8008494:	463b      	mov	r3, r7
 8008496:	f7f8 fb1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800849a:	b908      	cbnz	r0, 80084a0 <_dtoa_r+0x190>
 800849c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084a0:	f1bb 0f16 	cmp.w	fp, #22
 80084a4:	d857      	bhi.n	8008556 <_dtoa_r+0x246>
 80084a6:	4b5b      	ldr	r3, [pc, #364]	; (8008614 <_dtoa_r+0x304>)
 80084a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	ec51 0b18 	vmov	r0, r1, d8
 80084b4:	f7f8 fb1a 	bl	8000aec <__aeabi_dcmplt>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d04e      	beq.n	800855a <_dtoa_r+0x24a>
 80084bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084c0:	2300      	movs	r3, #0
 80084c2:	930c      	str	r3, [sp, #48]	; 0x30
 80084c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084c6:	1b5b      	subs	r3, r3, r5
 80084c8:	1e5a      	subs	r2, r3, #1
 80084ca:	bf45      	ittet	mi
 80084cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80084d0:	9305      	strmi	r3, [sp, #20]
 80084d2:	2300      	movpl	r3, #0
 80084d4:	2300      	movmi	r3, #0
 80084d6:	9206      	str	r2, [sp, #24]
 80084d8:	bf54      	ite	pl
 80084da:	9305      	strpl	r3, [sp, #20]
 80084dc:	9306      	strmi	r3, [sp, #24]
 80084de:	f1bb 0f00 	cmp.w	fp, #0
 80084e2:	db3c      	blt.n	800855e <_dtoa_r+0x24e>
 80084e4:	9b06      	ldr	r3, [sp, #24]
 80084e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80084ea:	445b      	add	r3, fp
 80084ec:	9306      	str	r3, [sp, #24]
 80084ee:	2300      	movs	r3, #0
 80084f0:	9308      	str	r3, [sp, #32]
 80084f2:	9b07      	ldr	r3, [sp, #28]
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	d868      	bhi.n	80085ca <_dtoa_r+0x2ba>
 80084f8:	2b05      	cmp	r3, #5
 80084fa:	bfc4      	itt	gt
 80084fc:	3b04      	subgt	r3, #4
 80084fe:	9307      	strgt	r3, [sp, #28]
 8008500:	9b07      	ldr	r3, [sp, #28]
 8008502:	f1a3 0302 	sub.w	r3, r3, #2
 8008506:	bfcc      	ite	gt
 8008508:	2500      	movgt	r5, #0
 800850a:	2501      	movle	r5, #1
 800850c:	2b03      	cmp	r3, #3
 800850e:	f200 8085 	bhi.w	800861c <_dtoa_r+0x30c>
 8008512:	e8df f003 	tbb	[pc, r3]
 8008516:	3b2e      	.short	0x3b2e
 8008518:	5839      	.short	0x5839
 800851a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800851e:	441d      	add	r5, r3
 8008520:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008524:	2b20      	cmp	r3, #32
 8008526:	bfc1      	itttt	gt
 8008528:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800852c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008530:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008534:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008538:	bfd6      	itet	le
 800853a:	f1c3 0320 	rsble	r3, r3, #32
 800853e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008542:	fa06 f003 	lslle.w	r0, r6, r3
 8008546:	f7f7 ffe5 	bl	8000514 <__aeabi_ui2d>
 800854a:	2201      	movs	r2, #1
 800854c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008550:	3d01      	subs	r5, #1
 8008552:	920e      	str	r2, [sp, #56]	; 0x38
 8008554:	e76f      	b.n	8008436 <_dtoa_r+0x126>
 8008556:	2301      	movs	r3, #1
 8008558:	e7b3      	b.n	80084c2 <_dtoa_r+0x1b2>
 800855a:	900c      	str	r0, [sp, #48]	; 0x30
 800855c:	e7b2      	b.n	80084c4 <_dtoa_r+0x1b4>
 800855e:	9b05      	ldr	r3, [sp, #20]
 8008560:	eba3 030b 	sub.w	r3, r3, fp
 8008564:	9305      	str	r3, [sp, #20]
 8008566:	f1cb 0300 	rsb	r3, fp, #0
 800856a:	9308      	str	r3, [sp, #32]
 800856c:	2300      	movs	r3, #0
 800856e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008570:	e7bf      	b.n	80084f2 <_dtoa_r+0x1e2>
 8008572:	2300      	movs	r3, #0
 8008574:	9309      	str	r3, [sp, #36]	; 0x24
 8008576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008578:	2b00      	cmp	r3, #0
 800857a:	dc52      	bgt.n	8008622 <_dtoa_r+0x312>
 800857c:	2301      	movs	r3, #1
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	461a      	mov	r2, r3
 8008584:	920a      	str	r2, [sp, #40]	; 0x28
 8008586:	e00b      	b.n	80085a0 <_dtoa_r+0x290>
 8008588:	2301      	movs	r3, #1
 800858a:	e7f3      	b.n	8008574 <_dtoa_r+0x264>
 800858c:	2300      	movs	r3, #0
 800858e:	9309      	str	r3, [sp, #36]	; 0x24
 8008590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008592:	445b      	add	r3, fp
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	3301      	adds	r3, #1
 8008598:	2b01      	cmp	r3, #1
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	bfb8      	it	lt
 800859e:	2301      	movlt	r3, #1
 80085a0:	69e0      	ldr	r0, [r4, #28]
 80085a2:	2100      	movs	r1, #0
 80085a4:	2204      	movs	r2, #4
 80085a6:	f102 0614 	add.w	r6, r2, #20
 80085aa:	429e      	cmp	r6, r3
 80085ac:	d93d      	bls.n	800862a <_dtoa_r+0x31a>
 80085ae:	6041      	str	r1, [r0, #4]
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fd9f 	bl	80090f4 <_Balloc>
 80085b6:	9000      	str	r0, [sp, #0]
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d139      	bne.n	8008630 <_dtoa_r+0x320>
 80085bc:	4b16      	ldr	r3, [pc, #88]	; (8008618 <_dtoa_r+0x308>)
 80085be:	4602      	mov	r2, r0
 80085c0:	f240 11af 	movw	r1, #431	; 0x1af
 80085c4:	e6bd      	b.n	8008342 <_dtoa_r+0x32>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e7e1      	b.n	800858e <_dtoa_r+0x27e>
 80085ca:	2501      	movs	r5, #1
 80085cc:	2300      	movs	r3, #0
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	9509      	str	r5, [sp, #36]	; 0x24
 80085d2:	f04f 33ff 	mov.w	r3, #4294967295
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	2200      	movs	r2, #0
 80085dc:	2312      	movs	r3, #18
 80085de:	e7d1      	b.n	8008584 <_dtoa_r+0x274>
 80085e0:	636f4361 	.word	0x636f4361
 80085e4:	3fd287a7 	.word	0x3fd287a7
 80085e8:	8b60c8b3 	.word	0x8b60c8b3
 80085ec:	3fc68a28 	.word	0x3fc68a28
 80085f0:	509f79fb 	.word	0x509f79fb
 80085f4:	3fd34413 	.word	0x3fd34413
 80085f8:	0800b9b6 	.word	0x0800b9b6
 80085fc:	0800b9cd 	.word	0x0800b9cd
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	0800b9b2 	.word	0x0800b9b2
 8008608:	0800b9a9 	.word	0x0800b9a9
 800860c:	0800b981 	.word	0x0800b981
 8008610:	3ff80000 	.word	0x3ff80000
 8008614:	0800bab8 	.word	0x0800bab8
 8008618:	0800ba25 	.word	0x0800ba25
 800861c:	2301      	movs	r3, #1
 800861e:	9309      	str	r3, [sp, #36]	; 0x24
 8008620:	e7d7      	b.n	80085d2 <_dtoa_r+0x2c2>
 8008622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	9304      	str	r3, [sp, #16]
 8008628:	e7ba      	b.n	80085a0 <_dtoa_r+0x290>
 800862a:	3101      	adds	r1, #1
 800862c:	0052      	lsls	r2, r2, #1
 800862e:	e7ba      	b.n	80085a6 <_dtoa_r+0x296>
 8008630:	69e3      	ldr	r3, [r4, #28]
 8008632:	9a00      	ldr	r2, [sp, #0]
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	9b04      	ldr	r3, [sp, #16]
 8008638:	2b0e      	cmp	r3, #14
 800863a:	f200 80a8 	bhi.w	800878e <_dtoa_r+0x47e>
 800863e:	2d00      	cmp	r5, #0
 8008640:	f000 80a5 	beq.w	800878e <_dtoa_r+0x47e>
 8008644:	f1bb 0f00 	cmp.w	fp, #0
 8008648:	dd38      	ble.n	80086bc <_dtoa_r+0x3ac>
 800864a:	4bc0      	ldr	r3, [pc, #768]	; (800894c <_dtoa_r+0x63c>)
 800864c:	f00b 020f 	and.w	r2, fp, #15
 8008650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008654:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008658:	e9d3 6700 	ldrd	r6, r7, [r3]
 800865c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008660:	d019      	beq.n	8008696 <_dtoa_r+0x386>
 8008662:	4bbb      	ldr	r3, [pc, #748]	; (8008950 <_dtoa_r+0x640>)
 8008664:	ec51 0b18 	vmov	r0, r1, d8
 8008668:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800866c:	f7f8 f8f6 	bl	800085c <__aeabi_ddiv>
 8008670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008674:	f008 080f 	and.w	r8, r8, #15
 8008678:	2503      	movs	r5, #3
 800867a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008950 <_dtoa_r+0x640>
 800867e:	f1b8 0f00 	cmp.w	r8, #0
 8008682:	d10a      	bne.n	800869a <_dtoa_r+0x38a>
 8008684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008688:	4632      	mov	r2, r6
 800868a:	463b      	mov	r3, r7
 800868c:	f7f8 f8e6 	bl	800085c <__aeabi_ddiv>
 8008690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008694:	e02b      	b.n	80086ee <_dtoa_r+0x3de>
 8008696:	2502      	movs	r5, #2
 8008698:	e7ef      	b.n	800867a <_dtoa_r+0x36a>
 800869a:	f018 0f01 	tst.w	r8, #1
 800869e:	d008      	beq.n	80086b2 <_dtoa_r+0x3a2>
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80086a8:	f7f7 ffae 	bl	8000608 <__aeabi_dmul>
 80086ac:	3501      	adds	r5, #1
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80086b6:	f109 0908 	add.w	r9, r9, #8
 80086ba:	e7e0      	b.n	800867e <_dtoa_r+0x36e>
 80086bc:	f000 809f 	beq.w	80087fe <_dtoa_r+0x4ee>
 80086c0:	f1cb 0600 	rsb	r6, fp, #0
 80086c4:	4ba1      	ldr	r3, [pc, #644]	; (800894c <_dtoa_r+0x63c>)
 80086c6:	4fa2      	ldr	r7, [pc, #648]	; (8008950 <_dtoa_r+0x640>)
 80086c8:	f006 020f 	and.w	r2, r6, #15
 80086cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	ec51 0b18 	vmov	r0, r1, d8
 80086d8:	f7f7 ff96 	bl	8000608 <__aeabi_dmul>
 80086dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e0:	1136      	asrs	r6, r6, #4
 80086e2:	2300      	movs	r3, #0
 80086e4:	2502      	movs	r5, #2
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	d17e      	bne.n	80087e8 <_dtoa_r+0x4d8>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1d0      	bne.n	8008690 <_dtoa_r+0x380>
 80086ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 8084 	beq.w	8008802 <_dtoa_r+0x4f2>
 80086fa:	4b96      	ldr	r3, [pc, #600]	; (8008954 <_dtoa_r+0x644>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f8 f9f3 	bl	8000aec <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	d07b      	beq.n	8008802 <_dtoa_r+0x4f2>
 800870a:	9b04      	ldr	r3, [sp, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d078      	beq.n	8008802 <_dtoa_r+0x4f2>
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	dd39      	ble.n	800878a <_dtoa_r+0x47a>
 8008716:	4b90      	ldr	r3, [pc, #576]	; (8008958 <_dtoa_r+0x648>)
 8008718:	2200      	movs	r2, #0
 800871a:	4640      	mov	r0, r8
 800871c:	4649      	mov	r1, r9
 800871e:	f7f7 ff73 	bl	8000608 <__aeabi_dmul>
 8008722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008726:	9e01      	ldr	r6, [sp, #4]
 8008728:	f10b 37ff 	add.w	r7, fp, #4294967295
 800872c:	3501      	adds	r5, #1
 800872e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008732:	4628      	mov	r0, r5
 8008734:	f7f7 fefe 	bl	8000534 <__aeabi_i2d>
 8008738:	4642      	mov	r2, r8
 800873a:	464b      	mov	r3, r9
 800873c:	f7f7 ff64 	bl	8000608 <__aeabi_dmul>
 8008740:	4b86      	ldr	r3, [pc, #536]	; (800895c <_dtoa_r+0x64c>)
 8008742:	2200      	movs	r2, #0
 8008744:	f7f7 fdaa 	bl	800029c <__adddf3>
 8008748:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800874c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008750:	9303      	str	r3, [sp, #12]
 8008752:	2e00      	cmp	r6, #0
 8008754:	d158      	bne.n	8008808 <_dtoa_r+0x4f8>
 8008756:	4b82      	ldr	r3, [pc, #520]	; (8008960 <_dtoa_r+0x650>)
 8008758:	2200      	movs	r2, #0
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f7 fd9b 	bl	8000298 <__aeabi_dsub>
 8008762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008766:	4680      	mov	r8, r0
 8008768:	4689      	mov	r9, r1
 800876a:	f7f8 f9dd 	bl	8000b28 <__aeabi_dcmpgt>
 800876e:	2800      	cmp	r0, #0
 8008770:	f040 8296 	bne.w	8008ca0 <_dtoa_r+0x990>
 8008774:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008778:	4640      	mov	r0, r8
 800877a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 f9b4 	bl	8000aec <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	f040 8289 	bne.w	8008c9c <_dtoa_r+0x98c>
 800878a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800878e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008790:	2b00      	cmp	r3, #0
 8008792:	f2c0 814e 	blt.w	8008a32 <_dtoa_r+0x722>
 8008796:	f1bb 0f0e 	cmp.w	fp, #14
 800879a:	f300 814a 	bgt.w	8008a32 <_dtoa_r+0x722>
 800879e:	4b6b      	ldr	r3, [pc, #428]	; (800894c <_dtoa_r+0x63c>)
 80087a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f280 80dc 	bge.w	8008968 <_dtoa_r+0x658>
 80087b0:	9b04      	ldr	r3, [sp, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f300 80d8 	bgt.w	8008968 <_dtoa_r+0x658>
 80087b8:	f040 826f 	bne.w	8008c9a <_dtoa_r+0x98a>
 80087bc:	4b68      	ldr	r3, [pc, #416]	; (8008960 <_dtoa_r+0x650>)
 80087be:	2200      	movs	r2, #0
 80087c0:	4640      	mov	r0, r8
 80087c2:	4649      	mov	r1, r9
 80087c4:	f7f7 ff20 	bl	8000608 <__aeabi_dmul>
 80087c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087cc:	f7f8 f9a2 	bl	8000b14 <__aeabi_dcmpge>
 80087d0:	9e04      	ldr	r6, [sp, #16]
 80087d2:	4637      	mov	r7, r6
 80087d4:	2800      	cmp	r0, #0
 80087d6:	f040 8245 	bne.w	8008c64 <_dtoa_r+0x954>
 80087da:	9d00      	ldr	r5, [sp, #0]
 80087dc:	2331      	movs	r3, #49	; 0x31
 80087de:	f805 3b01 	strb.w	r3, [r5], #1
 80087e2:	f10b 0b01 	add.w	fp, fp, #1
 80087e6:	e241      	b.n	8008c6c <_dtoa_r+0x95c>
 80087e8:	07f2      	lsls	r2, r6, #31
 80087ea:	d505      	bpl.n	80087f8 <_dtoa_r+0x4e8>
 80087ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f0:	f7f7 ff0a 	bl	8000608 <__aeabi_dmul>
 80087f4:	3501      	adds	r5, #1
 80087f6:	2301      	movs	r3, #1
 80087f8:	1076      	asrs	r6, r6, #1
 80087fa:	3708      	adds	r7, #8
 80087fc:	e773      	b.n	80086e6 <_dtoa_r+0x3d6>
 80087fe:	2502      	movs	r5, #2
 8008800:	e775      	b.n	80086ee <_dtoa_r+0x3de>
 8008802:	9e04      	ldr	r6, [sp, #16]
 8008804:	465f      	mov	r7, fp
 8008806:	e792      	b.n	800872e <_dtoa_r+0x41e>
 8008808:	9900      	ldr	r1, [sp, #0]
 800880a:	4b50      	ldr	r3, [pc, #320]	; (800894c <_dtoa_r+0x63c>)
 800880c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008810:	4431      	add	r1, r6
 8008812:	9102      	str	r1, [sp, #8]
 8008814:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008816:	eeb0 9a47 	vmov.f32	s18, s14
 800881a:	eef0 9a67 	vmov.f32	s19, s15
 800881e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008822:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008826:	2900      	cmp	r1, #0
 8008828:	d044      	beq.n	80088b4 <_dtoa_r+0x5a4>
 800882a:	494e      	ldr	r1, [pc, #312]	; (8008964 <_dtoa_r+0x654>)
 800882c:	2000      	movs	r0, #0
 800882e:	f7f8 f815 	bl	800085c <__aeabi_ddiv>
 8008832:	ec53 2b19 	vmov	r2, r3, d9
 8008836:	f7f7 fd2f 	bl	8000298 <__aeabi_dsub>
 800883a:	9d00      	ldr	r5, [sp, #0]
 800883c:	ec41 0b19 	vmov	d9, r0, r1
 8008840:	4649      	mov	r1, r9
 8008842:	4640      	mov	r0, r8
 8008844:	f7f8 f990 	bl	8000b68 <__aeabi_d2iz>
 8008848:	4606      	mov	r6, r0
 800884a:	f7f7 fe73 	bl	8000534 <__aeabi_i2d>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4640      	mov	r0, r8
 8008854:	4649      	mov	r1, r9
 8008856:	f7f7 fd1f 	bl	8000298 <__aeabi_dsub>
 800885a:	3630      	adds	r6, #48	; 0x30
 800885c:	f805 6b01 	strb.w	r6, [r5], #1
 8008860:	ec53 2b19 	vmov	r2, r3, d9
 8008864:	4680      	mov	r8, r0
 8008866:	4689      	mov	r9, r1
 8008868:	f7f8 f940 	bl	8000aec <__aeabi_dcmplt>
 800886c:	2800      	cmp	r0, #0
 800886e:	d164      	bne.n	800893a <_dtoa_r+0x62a>
 8008870:	4642      	mov	r2, r8
 8008872:	464b      	mov	r3, r9
 8008874:	4937      	ldr	r1, [pc, #220]	; (8008954 <_dtoa_r+0x644>)
 8008876:	2000      	movs	r0, #0
 8008878:	f7f7 fd0e 	bl	8000298 <__aeabi_dsub>
 800887c:	ec53 2b19 	vmov	r2, r3, d9
 8008880:	f7f8 f934 	bl	8000aec <__aeabi_dcmplt>
 8008884:	2800      	cmp	r0, #0
 8008886:	f040 80b6 	bne.w	80089f6 <_dtoa_r+0x6e6>
 800888a:	9b02      	ldr	r3, [sp, #8]
 800888c:	429d      	cmp	r5, r3
 800888e:	f43f af7c 	beq.w	800878a <_dtoa_r+0x47a>
 8008892:	4b31      	ldr	r3, [pc, #196]	; (8008958 <_dtoa_r+0x648>)
 8008894:	ec51 0b19 	vmov	r0, r1, d9
 8008898:	2200      	movs	r2, #0
 800889a:	f7f7 feb5 	bl	8000608 <__aeabi_dmul>
 800889e:	4b2e      	ldr	r3, [pc, #184]	; (8008958 <_dtoa_r+0x648>)
 80088a0:	ec41 0b19 	vmov	d9, r0, r1
 80088a4:	2200      	movs	r2, #0
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f7 fead 	bl	8000608 <__aeabi_dmul>
 80088ae:	4680      	mov	r8, r0
 80088b0:	4689      	mov	r9, r1
 80088b2:	e7c5      	b.n	8008840 <_dtoa_r+0x530>
 80088b4:	ec51 0b17 	vmov	r0, r1, d7
 80088b8:	f7f7 fea6 	bl	8000608 <__aeabi_dmul>
 80088bc:	9b02      	ldr	r3, [sp, #8]
 80088be:	9d00      	ldr	r5, [sp, #0]
 80088c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c2:	ec41 0b19 	vmov	d9, r0, r1
 80088c6:	4649      	mov	r1, r9
 80088c8:	4640      	mov	r0, r8
 80088ca:	f7f8 f94d 	bl	8000b68 <__aeabi_d2iz>
 80088ce:	4606      	mov	r6, r0
 80088d0:	f7f7 fe30 	bl	8000534 <__aeabi_i2d>
 80088d4:	3630      	adds	r6, #48	; 0x30
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4640      	mov	r0, r8
 80088dc:	4649      	mov	r1, r9
 80088de:	f7f7 fcdb 	bl	8000298 <__aeabi_dsub>
 80088e2:	f805 6b01 	strb.w	r6, [r5], #1
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	429d      	cmp	r5, r3
 80088ea:	4680      	mov	r8, r0
 80088ec:	4689      	mov	r9, r1
 80088ee:	f04f 0200 	mov.w	r2, #0
 80088f2:	d124      	bne.n	800893e <_dtoa_r+0x62e>
 80088f4:	4b1b      	ldr	r3, [pc, #108]	; (8008964 <_dtoa_r+0x654>)
 80088f6:	ec51 0b19 	vmov	r0, r1, d9
 80088fa:	f7f7 fccf 	bl	800029c <__adddf3>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f8 f90f 	bl	8000b28 <__aeabi_dcmpgt>
 800890a:	2800      	cmp	r0, #0
 800890c:	d173      	bne.n	80089f6 <_dtoa_r+0x6e6>
 800890e:	ec53 2b19 	vmov	r2, r3, d9
 8008912:	4914      	ldr	r1, [pc, #80]	; (8008964 <_dtoa_r+0x654>)
 8008914:	2000      	movs	r0, #0
 8008916:	f7f7 fcbf 	bl	8000298 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4640      	mov	r0, r8
 8008920:	4649      	mov	r1, r9
 8008922:	f7f8 f8e3 	bl	8000aec <__aeabi_dcmplt>
 8008926:	2800      	cmp	r0, #0
 8008928:	f43f af2f 	beq.w	800878a <_dtoa_r+0x47a>
 800892c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800892e:	1e6b      	subs	r3, r5, #1
 8008930:	930f      	str	r3, [sp, #60]	; 0x3c
 8008932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008936:	2b30      	cmp	r3, #48	; 0x30
 8008938:	d0f8      	beq.n	800892c <_dtoa_r+0x61c>
 800893a:	46bb      	mov	fp, r7
 800893c:	e04a      	b.n	80089d4 <_dtoa_r+0x6c4>
 800893e:	4b06      	ldr	r3, [pc, #24]	; (8008958 <_dtoa_r+0x648>)
 8008940:	f7f7 fe62 	bl	8000608 <__aeabi_dmul>
 8008944:	4680      	mov	r8, r0
 8008946:	4689      	mov	r9, r1
 8008948:	e7bd      	b.n	80088c6 <_dtoa_r+0x5b6>
 800894a:	bf00      	nop
 800894c:	0800bab8 	.word	0x0800bab8
 8008950:	0800ba90 	.word	0x0800ba90
 8008954:	3ff00000 	.word	0x3ff00000
 8008958:	40240000 	.word	0x40240000
 800895c:	401c0000 	.word	0x401c0000
 8008960:	40140000 	.word	0x40140000
 8008964:	3fe00000 	.word	0x3fe00000
 8008968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800896c:	9d00      	ldr	r5, [sp, #0]
 800896e:	4642      	mov	r2, r8
 8008970:	464b      	mov	r3, r9
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	f7f7 ff71 	bl	800085c <__aeabi_ddiv>
 800897a:	f7f8 f8f5 	bl	8000b68 <__aeabi_d2iz>
 800897e:	9001      	str	r0, [sp, #4]
 8008980:	f7f7 fdd8 	bl	8000534 <__aeabi_i2d>
 8008984:	4642      	mov	r2, r8
 8008986:	464b      	mov	r3, r9
 8008988:	f7f7 fe3e 	bl	8000608 <__aeabi_dmul>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fc80 	bl	8000298 <__aeabi_dsub>
 8008998:	9e01      	ldr	r6, [sp, #4]
 800899a:	9f04      	ldr	r7, [sp, #16]
 800899c:	3630      	adds	r6, #48	; 0x30
 800899e:	f805 6b01 	strb.w	r6, [r5], #1
 80089a2:	9e00      	ldr	r6, [sp, #0]
 80089a4:	1bae      	subs	r6, r5, r6
 80089a6:	42b7      	cmp	r7, r6
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	d134      	bne.n	8008a18 <_dtoa_r+0x708>
 80089ae:	f7f7 fc75 	bl	800029c <__adddf3>
 80089b2:	4642      	mov	r2, r8
 80089b4:	464b      	mov	r3, r9
 80089b6:	4606      	mov	r6, r0
 80089b8:	460f      	mov	r7, r1
 80089ba:	f7f8 f8b5 	bl	8000b28 <__aeabi_dcmpgt>
 80089be:	b9c8      	cbnz	r0, 80089f4 <_dtoa_r+0x6e4>
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	4630      	mov	r0, r6
 80089c6:	4639      	mov	r1, r7
 80089c8:	f7f8 f886 	bl	8000ad8 <__aeabi_dcmpeq>
 80089cc:	b110      	cbz	r0, 80089d4 <_dtoa_r+0x6c4>
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	07db      	lsls	r3, r3, #31
 80089d2:	d40f      	bmi.n	80089f4 <_dtoa_r+0x6e4>
 80089d4:	4651      	mov	r1, sl
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 fbcc 	bl	8009174 <_Bfree>
 80089dc:	2300      	movs	r3, #0
 80089de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089e0:	702b      	strb	r3, [r5, #0]
 80089e2:	f10b 0301 	add.w	r3, fp, #1
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f43f ace2 	beq.w	80083b4 <_dtoa_r+0xa4>
 80089f0:	601d      	str	r5, [r3, #0]
 80089f2:	e4df      	b.n	80083b4 <_dtoa_r+0xa4>
 80089f4:	465f      	mov	r7, fp
 80089f6:	462b      	mov	r3, r5
 80089f8:	461d      	mov	r5, r3
 80089fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089fe:	2a39      	cmp	r2, #57	; 0x39
 8008a00:	d106      	bne.n	8008a10 <_dtoa_r+0x700>
 8008a02:	9a00      	ldr	r2, [sp, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d1f7      	bne.n	80089f8 <_dtoa_r+0x6e8>
 8008a08:	9900      	ldr	r1, [sp, #0]
 8008a0a:	2230      	movs	r2, #48	; 0x30
 8008a0c:	3701      	adds	r7, #1
 8008a0e:	700a      	strb	r2, [r1, #0]
 8008a10:	781a      	ldrb	r2, [r3, #0]
 8008a12:	3201      	adds	r2, #1
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e790      	b.n	800893a <_dtoa_r+0x62a>
 8008a18:	4ba3      	ldr	r3, [pc, #652]	; (8008ca8 <_dtoa_r+0x998>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f7f7 fdf4 	bl	8000608 <__aeabi_dmul>
 8008a20:	2200      	movs	r2, #0
 8008a22:	2300      	movs	r3, #0
 8008a24:	4606      	mov	r6, r0
 8008a26:	460f      	mov	r7, r1
 8008a28:	f7f8 f856 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d09e      	beq.n	800896e <_dtoa_r+0x65e>
 8008a30:	e7d0      	b.n	80089d4 <_dtoa_r+0x6c4>
 8008a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	f000 80ca 	beq.w	8008bce <_dtoa_r+0x8be>
 8008a3a:	9a07      	ldr	r2, [sp, #28]
 8008a3c:	2a01      	cmp	r2, #1
 8008a3e:	f300 80ad 	bgt.w	8008b9c <_dtoa_r+0x88c>
 8008a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	f000 80a5 	beq.w	8008b94 <_dtoa_r+0x884>
 8008a4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a4e:	9e08      	ldr	r6, [sp, #32]
 8008a50:	9d05      	ldr	r5, [sp, #20]
 8008a52:	9a05      	ldr	r2, [sp, #20]
 8008a54:	441a      	add	r2, r3
 8008a56:	9205      	str	r2, [sp, #20]
 8008a58:	9a06      	ldr	r2, [sp, #24]
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	441a      	add	r2, r3
 8008a5e:	4620      	mov	r0, r4
 8008a60:	9206      	str	r2, [sp, #24]
 8008a62:	f000 fc87 	bl	8009374 <__i2b>
 8008a66:	4607      	mov	r7, r0
 8008a68:	b165      	cbz	r5, 8008a84 <_dtoa_r+0x774>
 8008a6a:	9b06      	ldr	r3, [sp, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd09      	ble.n	8008a84 <_dtoa_r+0x774>
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	9a05      	ldr	r2, [sp, #20]
 8008a74:	bfa8      	it	ge
 8008a76:	462b      	movge	r3, r5
 8008a78:	1ad2      	subs	r2, r2, r3
 8008a7a:	9205      	str	r2, [sp, #20]
 8008a7c:	9a06      	ldr	r2, [sp, #24]
 8008a7e:	1aed      	subs	r5, r5, r3
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	9306      	str	r3, [sp, #24]
 8008a84:	9b08      	ldr	r3, [sp, #32]
 8008a86:	b1f3      	cbz	r3, 8008ac6 <_dtoa_r+0x7b6>
 8008a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 80a3 	beq.w	8008bd6 <_dtoa_r+0x8c6>
 8008a90:	2e00      	cmp	r6, #0
 8008a92:	dd10      	ble.n	8008ab6 <_dtoa_r+0x7a6>
 8008a94:	4639      	mov	r1, r7
 8008a96:	4632      	mov	r2, r6
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fd2b 	bl	80094f4 <__pow5mult>
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 fc7b 	bl	80093a0 <__multiply>
 8008aaa:	4651      	mov	r1, sl
 8008aac:	4680      	mov	r8, r0
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fb60 	bl	8009174 <_Bfree>
 8008ab4:	46c2      	mov	sl, r8
 8008ab6:	9b08      	ldr	r3, [sp, #32]
 8008ab8:	1b9a      	subs	r2, r3, r6
 8008aba:	d004      	beq.n	8008ac6 <_dtoa_r+0x7b6>
 8008abc:	4651      	mov	r1, sl
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fd18 	bl	80094f4 <__pow5mult>
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fc53 	bl	8009374 <__i2b>
 8008ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	f340 8081 	ble.w	8008bda <_dtoa_r+0x8ca>
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4601      	mov	r1, r0
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 fd09 	bl	80094f4 <__pow5mult>
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	dd7a      	ble.n	8008be0 <_dtoa_r+0x8d0>
 8008aea:	f04f 0800 	mov.w	r8, #0
 8008aee:	6933      	ldr	r3, [r6, #16]
 8008af0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008af4:	6918      	ldr	r0, [r3, #16]
 8008af6:	f000 fbef 	bl	80092d8 <__hi0bits>
 8008afa:	f1c0 0020 	rsb	r0, r0, #32
 8008afe:	9b06      	ldr	r3, [sp, #24]
 8008b00:	4418      	add	r0, r3
 8008b02:	f010 001f 	ands.w	r0, r0, #31
 8008b06:	f000 8094 	beq.w	8008c32 <_dtoa_r+0x922>
 8008b0a:	f1c0 0320 	rsb	r3, r0, #32
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	f340 8085 	ble.w	8008c1e <_dtoa_r+0x90e>
 8008b14:	9b05      	ldr	r3, [sp, #20]
 8008b16:	f1c0 001c 	rsb	r0, r0, #28
 8008b1a:	4403      	add	r3, r0
 8008b1c:	9305      	str	r3, [sp, #20]
 8008b1e:	9b06      	ldr	r3, [sp, #24]
 8008b20:	4403      	add	r3, r0
 8008b22:	4405      	add	r5, r0
 8008b24:	9306      	str	r3, [sp, #24]
 8008b26:	9b05      	ldr	r3, [sp, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dd05      	ble.n	8008b38 <_dtoa_r+0x828>
 8008b2c:	4651      	mov	r1, sl
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fd39 	bl	80095a8 <__lshift>
 8008b36:	4682      	mov	sl, r0
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dd05      	ble.n	8008b4a <_dtoa_r+0x83a>
 8008b3e:	4631      	mov	r1, r6
 8008b40:	461a      	mov	r2, r3
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 fd30 	bl	80095a8 <__lshift>
 8008b48:	4606      	mov	r6, r0
 8008b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d072      	beq.n	8008c36 <_dtoa_r+0x926>
 8008b50:	4631      	mov	r1, r6
 8008b52:	4650      	mov	r0, sl
 8008b54:	f000 fd94 	bl	8009680 <__mcmp>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	da6c      	bge.n	8008c36 <_dtoa_r+0x926>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4651      	mov	r1, sl
 8008b60:	220a      	movs	r2, #10
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 fb28 	bl	80091b8 <__multadd>
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b6e:	4682      	mov	sl, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 81b0 	beq.w	8008ed6 <_dtoa_r+0xbc6>
 8008b76:	2300      	movs	r3, #0
 8008b78:	4639      	mov	r1, r7
 8008b7a:	220a      	movs	r2, #10
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fb1b 	bl	80091b8 <__multadd>
 8008b82:	9b01      	ldr	r3, [sp, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	4607      	mov	r7, r0
 8008b88:	f300 8096 	bgt.w	8008cb8 <_dtoa_r+0x9a8>
 8008b8c:	9b07      	ldr	r3, [sp, #28]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	dc59      	bgt.n	8008c46 <_dtoa_r+0x936>
 8008b92:	e091      	b.n	8008cb8 <_dtoa_r+0x9a8>
 8008b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b9a:	e758      	b.n	8008a4e <_dtoa_r+0x73e>
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	1e5e      	subs	r6, r3, #1
 8008ba0:	9b08      	ldr	r3, [sp, #32]
 8008ba2:	42b3      	cmp	r3, r6
 8008ba4:	bfbf      	itttt	lt
 8008ba6:	9b08      	ldrlt	r3, [sp, #32]
 8008ba8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008baa:	9608      	strlt	r6, [sp, #32]
 8008bac:	1af3      	sublt	r3, r6, r3
 8008bae:	bfb4      	ite	lt
 8008bb0:	18d2      	addlt	r2, r2, r3
 8008bb2:	1b9e      	subge	r6, r3, r6
 8008bb4:	9b04      	ldr	r3, [sp, #16]
 8008bb6:	bfbc      	itt	lt
 8008bb8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008bba:	2600      	movlt	r6, #0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bfb7      	itett	lt
 8008bc0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008bc4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008bc8:	1a9d      	sublt	r5, r3, r2
 8008bca:	2300      	movlt	r3, #0
 8008bcc:	e741      	b.n	8008a52 <_dtoa_r+0x742>
 8008bce:	9e08      	ldr	r6, [sp, #32]
 8008bd0:	9d05      	ldr	r5, [sp, #20]
 8008bd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008bd4:	e748      	b.n	8008a68 <_dtoa_r+0x758>
 8008bd6:	9a08      	ldr	r2, [sp, #32]
 8008bd8:	e770      	b.n	8008abc <_dtoa_r+0x7ac>
 8008bda:	9b07      	ldr	r3, [sp, #28]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	dc19      	bgt.n	8008c14 <_dtoa_r+0x904>
 8008be0:	9b02      	ldr	r3, [sp, #8]
 8008be2:	b9bb      	cbnz	r3, 8008c14 <_dtoa_r+0x904>
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bea:	b99b      	cbnz	r3, 8008c14 <_dtoa_r+0x904>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bf2:	0d1b      	lsrs	r3, r3, #20
 8008bf4:	051b      	lsls	r3, r3, #20
 8008bf6:	b183      	cbz	r3, 8008c1a <_dtoa_r+0x90a>
 8008bf8:	9b05      	ldr	r3, [sp, #20]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	9305      	str	r3, [sp, #20]
 8008bfe:	9b06      	ldr	r3, [sp, #24]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9306      	str	r3, [sp, #24]
 8008c04:	f04f 0801 	mov.w	r8, #1
 8008c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f47f af6f 	bne.w	8008aee <_dtoa_r+0x7de>
 8008c10:	2001      	movs	r0, #1
 8008c12:	e774      	b.n	8008afe <_dtoa_r+0x7ee>
 8008c14:	f04f 0800 	mov.w	r8, #0
 8008c18:	e7f6      	b.n	8008c08 <_dtoa_r+0x8f8>
 8008c1a:	4698      	mov	r8, r3
 8008c1c:	e7f4      	b.n	8008c08 <_dtoa_r+0x8f8>
 8008c1e:	d082      	beq.n	8008b26 <_dtoa_r+0x816>
 8008c20:	9a05      	ldr	r2, [sp, #20]
 8008c22:	331c      	adds	r3, #28
 8008c24:	441a      	add	r2, r3
 8008c26:	9205      	str	r2, [sp, #20]
 8008c28:	9a06      	ldr	r2, [sp, #24]
 8008c2a:	441a      	add	r2, r3
 8008c2c:	441d      	add	r5, r3
 8008c2e:	9206      	str	r2, [sp, #24]
 8008c30:	e779      	b.n	8008b26 <_dtoa_r+0x816>
 8008c32:	4603      	mov	r3, r0
 8008c34:	e7f4      	b.n	8008c20 <_dtoa_r+0x910>
 8008c36:	9b04      	ldr	r3, [sp, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc37      	bgt.n	8008cac <_dtoa_r+0x99c>
 8008c3c:	9b07      	ldr	r3, [sp, #28]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	dd34      	ble.n	8008cac <_dtoa_r+0x99c>
 8008c42:	9b04      	ldr	r3, [sp, #16]
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	b963      	cbnz	r3, 8008c64 <_dtoa_r+0x954>
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	2205      	movs	r2, #5
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fab2 	bl	80091b8 <__multadd>
 8008c54:	4601      	mov	r1, r0
 8008c56:	4606      	mov	r6, r0
 8008c58:	4650      	mov	r0, sl
 8008c5a:	f000 fd11 	bl	8009680 <__mcmp>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f73f adbb 	bgt.w	80087da <_dtoa_r+0x4ca>
 8008c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c66:	9d00      	ldr	r5, [sp, #0]
 8008c68:	ea6f 0b03 	mvn.w	fp, r3
 8008c6c:	f04f 0800 	mov.w	r8, #0
 8008c70:	4631      	mov	r1, r6
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 fa7e 	bl	8009174 <_Bfree>
 8008c78:	2f00      	cmp	r7, #0
 8008c7a:	f43f aeab 	beq.w	80089d4 <_dtoa_r+0x6c4>
 8008c7e:	f1b8 0f00 	cmp.w	r8, #0
 8008c82:	d005      	beq.n	8008c90 <_dtoa_r+0x980>
 8008c84:	45b8      	cmp	r8, r7
 8008c86:	d003      	beq.n	8008c90 <_dtoa_r+0x980>
 8008c88:	4641      	mov	r1, r8
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 fa72 	bl	8009174 <_Bfree>
 8008c90:	4639      	mov	r1, r7
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 fa6e 	bl	8009174 <_Bfree>
 8008c98:	e69c      	b.n	80089d4 <_dtoa_r+0x6c4>
 8008c9a:	2600      	movs	r6, #0
 8008c9c:	4637      	mov	r7, r6
 8008c9e:	e7e1      	b.n	8008c64 <_dtoa_r+0x954>
 8008ca0:	46bb      	mov	fp, r7
 8008ca2:	4637      	mov	r7, r6
 8008ca4:	e599      	b.n	80087da <_dtoa_r+0x4ca>
 8008ca6:	bf00      	nop
 8008ca8:	40240000 	.word	0x40240000
 8008cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80c8 	beq.w	8008e44 <_dtoa_r+0xb34>
 8008cb4:	9b04      	ldr	r3, [sp, #16]
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	2d00      	cmp	r5, #0
 8008cba:	dd05      	ble.n	8008cc8 <_dtoa_r+0x9b8>
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 fc71 	bl	80095a8 <__lshift>
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	f1b8 0f00 	cmp.w	r8, #0
 8008ccc:	d05b      	beq.n	8008d86 <_dtoa_r+0xa76>
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fa0f 	bl	80090f4 <_Balloc>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b928      	cbnz	r0, 8008ce6 <_dtoa_r+0x9d6>
 8008cda:	4b83      	ldr	r3, [pc, #524]	; (8008ee8 <_dtoa_r+0xbd8>)
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008ce2:	f7ff bb2e 	b.w	8008342 <_dtoa_r+0x32>
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	3202      	adds	r2, #2
 8008cea:	0092      	lsls	r2, r2, #2
 8008cec:	f107 010c 	add.w	r1, r7, #12
 8008cf0:	300c      	adds	r0, #12
 8008cf2:	f7ff fa6e 	bl	80081d2 <memcpy>
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fc54 	bl	80095a8 <__lshift>
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	9304      	str	r3, [sp, #16]
 8008d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	9308      	str	r3, [sp, #32]
 8008d0e:	9b02      	ldr	r3, [sp, #8]
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	46b8      	mov	r8, r7
 8008d16:	9306      	str	r3, [sp, #24]
 8008d18:	4607      	mov	r7, r0
 8008d1a:	9b04      	ldr	r3, [sp, #16]
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	4650      	mov	r0, sl
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	f7ff fa6a 	bl	80081fc <quorem>
 8008d28:	4641      	mov	r1, r8
 8008d2a:	9002      	str	r0, [sp, #8]
 8008d2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d30:	4650      	mov	r0, sl
 8008d32:	f000 fca5 	bl	8009680 <__mcmp>
 8008d36:	463a      	mov	r2, r7
 8008d38:	9005      	str	r0, [sp, #20]
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 fcbb 	bl	80096b8 <__mdiff>
 8008d42:	68c2      	ldr	r2, [r0, #12]
 8008d44:	4605      	mov	r5, r0
 8008d46:	bb02      	cbnz	r2, 8008d8a <_dtoa_r+0xa7a>
 8008d48:	4601      	mov	r1, r0
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	f000 fc98 	bl	8009680 <__mcmp>
 8008d50:	4602      	mov	r2, r0
 8008d52:	4629      	mov	r1, r5
 8008d54:	4620      	mov	r0, r4
 8008d56:	9209      	str	r2, [sp, #36]	; 0x24
 8008d58:	f000 fa0c 	bl	8009174 <_Bfree>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d60:	9d04      	ldr	r5, [sp, #16]
 8008d62:	ea43 0102 	orr.w	r1, r3, r2
 8008d66:	9b06      	ldr	r3, [sp, #24]
 8008d68:	4319      	orrs	r1, r3
 8008d6a:	d110      	bne.n	8008d8e <_dtoa_r+0xa7e>
 8008d6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d70:	d029      	beq.n	8008dc6 <_dtoa_r+0xab6>
 8008d72:	9b05      	ldr	r3, [sp, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	dd02      	ble.n	8008d7e <_dtoa_r+0xa6e>
 8008d78:	9b02      	ldr	r3, [sp, #8]
 8008d7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	f883 9000 	strb.w	r9, [r3]
 8008d84:	e774      	b.n	8008c70 <_dtoa_r+0x960>
 8008d86:	4638      	mov	r0, r7
 8008d88:	e7ba      	b.n	8008d00 <_dtoa_r+0x9f0>
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	e7e1      	b.n	8008d52 <_dtoa_r+0xa42>
 8008d8e:	9b05      	ldr	r3, [sp, #20]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	db04      	blt.n	8008d9e <_dtoa_r+0xa8e>
 8008d94:	9907      	ldr	r1, [sp, #28]
 8008d96:	430b      	orrs	r3, r1
 8008d98:	9906      	ldr	r1, [sp, #24]
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	d120      	bne.n	8008de0 <_dtoa_r+0xad0>
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	dded      	ble.n	8008d7e <_dtoa_r+0xa6e>
 8008da2:	4651      	mov	r1, sl
 8008da4:	2201      	movs	r2, #1
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 fbfe 	bl	80095a8 <__lshift>
 8008dac:	4631      	mov	r1, r6
 8008dae:	4682      	mov	sl, r0
 8008db0:	f000 fc66 	bl	8009680 <__mcmp>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	dc03      	bgt.n	8008dc0 <_dtoa_r+0xab0>
 8008db8:	d1e1      	bne.n	8008d7e <_dtoa_r+0xa6e>
 8008dba:	f019 0f01 	tst.w	r9, #1
 8008dbe:	d0de      	beq.n	8008d7e <_dtoa_r+0xa6e>
 8008dc0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008dc4:	d1d8      	bne.n	8008d78 <_dtoa_r+0xa68>
 8008dc6:	9a01      	ldr	r2, [sp, #4]
 8008dc8:	2339      	movs	r3, #57	; 0x39
 8008dca:	7013      	strb	r3, [r2, #0]
 8008dcc:	462b      	mov	r3, r5
 8008dce:	461d      	mov	r5, r3
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dd6:	2a39      	cmp	r2, #57	; 0x39
 8008dd8:	d06c      	beq.n	8008eb4 <_dtoa_r+0xba4>
 8008dda:	3201      	adds	r2, #1
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	e747      	b.n	8008c70 <_dtoa_r+0x960>
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	dd07      	ble.n	8008df4 <_dtoa_r+0xae4>
 8008de4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008de8:	d0ed      	beq.n	8008dc6 <_dtoa_r+0xab6>
 8008dea:	9a01      	ldr	r2, [sp, #4]
 8008dec:	f109 0301 	add.w	r3, r9, #1
 8008df0:	7013      	strb	r3, [r2, #0]
 8008df2:	e73d      	b.n	8008c70 <_dtoa_r+0x960>
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	9a08      	ldr	r2, [sp, #32]
 8008df8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d043      	beq.n	8008e88 <_dtoa_r+0xb78>
 8008e00:	4651      	mov	r1, sl
 8008e02:	2300      	movs	r3, #0
 8008e04:	220a      	movs	r2, #10
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 f9d6 	bl	80091b8 <__multadd>
 8008e0c:	45b8      	cmp	r8, r7
 8008e0e:	4682      	mov	sl, r0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	f04f 020a 	mov.w	r2, #10
 8008e18:	4641      	mov	r1, r8
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	d107      	bne.n	8008e2e <_dtoa_r+0xb1e>
 8008e1e:	f000 f9cb 	bl	80091b8 <__multadd>
 8008e22:	4680      	mov	r8, r0
 8008e24:	4607      	mov	r7, r0
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	9304      	str	r3, [sp, #16]
 8008e2c:	e775      	b.n	8008d1a <_dtoa_r+0xa0a>
 8008e2e:	f000 f9c3 	bl	80091b8 <__multadd>
 8008e32:	4639      	mov	r1, r7
 8008e34:	4680      	mov	r8, r0
 8008e36:	2300      	movs	r3, #0
 8008e38:	220a      	movs	r2, #10
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 f9bc 	bl	80091b8 <__multadd>
 8008e40:	4607      	mov	r7, r0
 8008e42:	e7f0      	b.n	8008e26 <_dtoa_r+0xb16>
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	9d00      	ldr	r5, [sp, #0]
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	f7ff f9d5 	bl	80081fc <quorem>
 8008e52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e56:	9b00      	ldr	r3, [sp, #0]
 8008e58:	f805 9b01 	strb.w	r9, [r5], #1
 8008e5c:	1aea      	subs	r2, r5, r3
 8008e5e:	9b01      	ldr	r3, [sp, #4]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	dd07      	ble.n	8008e74 <_dtoa_r+0xb64>
 8008e64:	4651      	mov	r1, sl
 8008e66:	2300      	movs	r3, #0
 8008e68:	220a      	movs	r2, #10
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f000 f9a4 	bl	80091b8 <__multadd>
 8008e70:	4682      	mov	sl, r0
 8008e72:	e7ea      	b.n	8008e4a <_dtoa_r+0xb3a>
 8008e74:	9b01      	ldr	r3, [sp, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	bfc8      	it	gt
 8008e7a:	461d      	movgt	r5, r3
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	bfd8      	it	le
 8008e80:	2501      	movle	r5, #1
 8008e82:	441d      	add	r5, r3
 8008e84:	f04f 0800 	mov.w	r8, #0
 8008e88:	4651      	mov	r1, sl
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fb8b 	bl	80095a8 <__lshift>
 8008e92:	4631      	mov	r1, r6
 8008e94:	4682      	mov	sl, r0
 8008e96:	f000 fbf3 	bl	8009680 <__mcmp>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	dc96      	bgt.n	8008dcc <_dtoa_r+0xabc>
 8008e9e:	d102      	bne.n	8008ea6 <_dtoa_r+0xb96>
 8008ea0:	f019 0f01 	tst.w	r9, #1
 8008ea4:	d192      	bne.n	8008dcc <_dtoa_r+0xabc>
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eae:	2a30      	cmp	r2, #48	; 0x30
 8008eb0:	d0fa      	beq.n	8008ea8 <_dtoa_r+0xb98>
 8008eb2:	e6dd      	b.n	8008c70 <_dtoa_r+0x960>
 8008eb4:	9a00      	ldr	r2, [sp, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d189      	bne.n	8008dce <_dtoa_r+0xabe>
 8008eba:	f10b 0b01 	add.w	fp, fp, #1
 8008ebe:	2331      	movs	r3, #49	; 0x31
 8008ec0:	e796      	b.n	8008df0 <_dtoa_r+0xae0>
 8008ec2:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <_dtoa_r+0xbdc>)
 8008ec4:	f7ff ba99 	b.w	80083fa <_dtoa_r+0xea>
 8008ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f47f aa6d 	bne.w	80083aa <_dtoa_r+0x9a>
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <_dtoa_r+0xbe0>)
 8008ed2:	f7ff ba92 	b.w	80083fa <_dtoa_r+0xea>
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dcb5      	bgt.n	8008e48 <_dtoa_r+0xb38>
 8008edc:	9b07      	ldr	r3, [sp, #28]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	f73f aeb1 	bgt.w	8008c46 <_dtoa_r+0x936>
 8008ee4:	e7b0      	b.n	8008e48 <_dtoa_r+0xb38>
 8008ee6:	bf00      	nop
 8008ee8:	0800ba25 	.word	0x0800ba25
 8008eec:	0800b980 	.word	0x0800b980
 8008ef0:	0800b9a9 	.word	0x0800b9a9

08008ef4 <_free_r>:
 8008ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	d044      	beq.n	8008f84 <_free_r+0x90>
 8008efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008efe:	9001      	str	r0, [sp, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f1a1 0404 	sub.w	r4, r1, #4
 8008f06:	bfb8      	it	lt
 8008f08:	18e4      	addlt	r4, r4, r3
 8008f0a:	f000 f8e7 	bl	80090dc <__malloc_lock>
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <_free_r+0x94>)
 8008f10:	9801      	ldr	r0, [sp, #4]
 8008f12:	6813      	ldr	r3, [r2, #0]
 8008f14:	b933      	cbnz	r3, 8008f24 <_free_r+0x30>
 8008f16:	6063      	str	r3, [r4, #4]
 8008f18:	6014      	str	r4, [r2, #0]
 8008f1a:	b003      	add	sp, #12
 8008f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f20:	f000 b8e2 	b.w	80090e8 <__malloc_unlock>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d908      	bls.n	8008f3a <_free_r+0x46>
 8008f28:	6825      	ldr	r5, [r4, #0]
 8008f2a:	1961      	adds	r1, r4, r5
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf01      	itttt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	1949      	addeq	r1, r1, r5
 8008f36:	6021      	streq	r1, [r4, #0]
 8008f38:	e7ed      	b.n	8008f16 <_free_r+0x22>
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	b10b      	cbz	r3, 8008f44 <_free_r+0x50>
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	d9fa      	bls.n	8008f3a <_free_r+0x46>
 8008f44:	6811      	ldr	r1, [r2, #0]
 8008f46:	1855      	adds	r5, r2, r1
 8008f48:	42a5      	cmp	r5, r4
 8008f4a:	d10b      	bne.n	8008f64 <_free_r+0x70>
 8008f4c:	6824      	ldr	r4, [r4, #0]
 8008f4e:	4421      	add	r1, r4
 8008f50:	1854      	adds	r4, r2, r1
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	d1e0      	bne.n	8008f1a <_free_r+0x26>
 8008f58:	681c      	ldr	r4, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	6053      	str	r3, [r2, #4]
 8008f5e:	440c      	add	r4, r1
 8008f60:	6014      	str	r4, [r2, #0]
 8008f62:	e7da      	b.n	8008f1a <_free_r+0x26>
 8008f64:	d902      	bls.n	8008f6c <_free_r+0x78>
 8008f66:	230c      	movs	r3, #12
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	e7d6      	b.n	8008f1a <_free_r+0x26>
 8008f6c:	6825      	ldr	r5, [r4, #0]
 8008f6e:	1961      	adds	r1, r4, r5
 8008f70:	428b      	cmp	r3, r1
 8008f72:	bf04      	itt	eq
 8008f74:	6819      	ldreq	r1, [r3, #0]
 8008f76:	685b      	ldreq	r3, [r3, #4]
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	bf04      	itt	eq
 8008f7c:	1949      	addeq	r1, r1, r5
 8008f7e:	6021      	streq	r1, [r4, #0]
 8008f80:	6054      	str	r4, [r2, #4]
 8008f82:	e7ca      	b.n	8008f1a <_free_r+0x26>
 8008f84:	b003      	add	sp, #12
 8008f86:	bd30      	pop	{r4, r5, pc}
 8008f88:	200044b0 	.word	0x200044b0

08008f8c <malloc>:
 8008f8c:	4b02      	ldr	r3, [pc, #8]	; (8008f98 <malloc+0xc>)
 8008f8e:	4601      	mov	r1, r0
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f000 b823 	b.w	8008fdc <_malloc_r>
 8008f96:	bf00      	nop
 8008f98:	20000068 	.word	0x20000068

08008f9c <sbrk_aligned>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	4e0e      	ldr	r6, [pc, #56]	; (8008fd8 <sbrk_aligned+0x3c>)
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	6831      	ldr	r1, [r6, #0]
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	b911      	cbnz	r1, 8008fae <sbrk_aligned+0x12>
 8008fa8:	f001 ffe2 	bl	800af70 <_sbrk_r>
 8008fac:	6030      	str	r0, [r6, #0]
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f001 ffdd 	bl	800af70 <_sbrk_r>
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	d00a      	beq.n	8008fd0 <sbrk_aligned+0x34>
 8008fba:	1cc4      	adds	r4, r0, #3
 8008fbc:	f024 0403 	bic.w	r4, r4, #3
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d007      	beq.n	8008fd4 <sbrk_aligned+0x38>
 8008fc4:	1a21      	subs	r1, r4, r0
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f001 ffd2 	bl	800af70 <_sbrk_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d101      	bne.n	8008fd4 <sbrk_aligned+0x38>
 8008fd0:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	200044b4 	.word	0x200044b4

08008fdc <_malloc_r>:
 8008fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe0:	1ccd      	adds	r5, r1, #3
 8008fe2:	f025 0503 	bic.w	r5, r5, #3
 8008fe6:	3508      	adds	r5, #8
 8008fe8:	2d0c      	cmp	r5, #12
 8008fea:	bf38      	it	cc
 8008fec:	250c      	movcc	r5, #12
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	db01      	blt.n	8008ff8 <_malloc_r+0x1c>
 8008ff4:	42a9      	cmp	r1, r5
 8008ff6:	d905      	bls.n	8009004 <_malloc_r+0x28>
 8008ff8:	230c      	movs	r3, #12
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	2600      	movs	r6, #0
 8008ffe:	4630      	mov	r0, r6
 8009000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009004:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090d8 <_malloc_r+0xfc>
 8009008:	f000 f868 	bl	80090dc <__malloc_lock>
 800900c:	f8d8 3000 	ldr.w	r3, [r8]
 8009010:	461c      	mov	r4, r3
 8009012:	bb5c      	cbnz	r4, 800906c <_malloc_r+0x90>
 8009014:	4629      	mov	r1, r5
 8009016:	4638      	mov	r0, r7
 8009018:	f7ff ffc0 	bl	8008f9c <sbrk_aligned>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	4604      	mov	r4, r0
 8009020:	d155      	bne.n	80090ce <_malloc_r+0xf2>
 8009022:	f8d8 4000 	ldr.w	r4, [r8]
 8009026:	4626      	mov	r6, r4
 8009028:	2e00      	cmp	r6, #0
 800902a:	d145      	bne.n	80090b8 <_malloc_r+0xdc>
 800902c:	2c00      	cmp	r4, #0
 800902e:	d048      	beq.n	80090c2 <_malloc_r+0xe6>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	4631      	mov	r1, r6
 8009034:	4638      	mov	r0, r7
 8009036:	eb04 0903 	add.w	r9, r4, r3
 800903a:	f001 ff99 	bl	800af70 <_sbrk_r>
 800903e:	4581      	cmp	r9, r0
 8009040:	d13f      	bne.n	80090c2 <_malloc_r+0xe6>
 8009042:	6821      	ldr	r1, [r4, #0]
 8009044:	1a6d      	subs	r5, r5, r1
 8009046:	4629      	mov	r1, r5
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff ffa7 	bl	8008f9c <sbrk_aligned>
 800904e:	3001      	adds	r0, #1
 8009050:	d037      	beq.n	80090c2 <_malloc_r+0xe6>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	442b      	add	r3, r5
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	f8d8 3000 	ldr.w	r3, [r8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d038      	beq.n	80090d2 <_malloc_r+0xf6>
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	42a2      	cmp	r2, r4
 8009064:	d12b      	bne.n	80090be <_malloc_r+0xe2>
 8009066:	2200      	movs	r2, #0
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	e00f      	b.n	800908c <_malloc_r+0xb0>
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	1b52      	subs	r2, r2, r5
 8009070:	d41f      	bmi.n	80090b2 <_malloc_r+0xd6>
 8009072:	2a0b      	cmp	r2, #11
 8009074:	d917      	bls.n	80090a6 <_malloc_r+0xca>
 8009076:	1961      	adds	r1, r4, r5
 8009078:	42a3      	cmp	r3, r4
 800907a:	6025      	str	r5, [r4, #0]
 800907c:	bf18      	it	ne
 800907e:	6059      	strne	r1, [r3, #4]
 8009080:	6863      	ldr	r3, [r4, #4]
 8009082:	bf08      	it	eq
 8009084:	f8c8 1000 	streq.w	r1, [r8]
 8009088:	5162      	str	r2, [r4, r5]
 800908a:	604b      	str	r3, [r1, #4]
 800908c:	4638      	mov	r0, r7
 800908e:	f104 060b 	add.w	r6, r4, #11
 8009092:	f000 f829 	bl	80090e8 <__malloc_unlock>
 8009096:	f026 0607 	bic.w	r6, r6, #7
 800909a:	1d23      	adds	r3, r4, #4
 800909c:	1af2      	subs	r2, r6, r3
 800909e:	d0ae      	beq.n	8008ffe <_malloc_r+0x22>
 80090a0:	1b9b      	subs	r3, r3, r6
 80090a2:	50a3      	str	r3, [r4, r2]
 80090a4:	e7ab      	b.n	8008ffe <_malloc_r+0x22>
 80090a6:	42a3      	cmp	r3, r4
 80090a8:	6862      	ldr	r2, [r4, #4]
 80090aa:	d1dd      	bne.n	8009068 <_malloc_r+0x8c>
 80090ac:	f8c8 2000 	str.w	r2, [r8]
 80090b0:	e7ec      	b.n	800908c <_malloc_r+0xb0>
 80090b2:	4623      	mov	r3, r4
 80090b4:	6864      	ldr	r4, [r4, #4]
 80090b6:	e7ac      	b.n	8009012 <_malloc_r+0x36>
 80090b8:	4634      	mov	r4, r6
 80090ba:	6876      	ldr	r6, [r6, #4]
 80090bc:	e7b4      	b.n	8009028 <_malloc_r+0x4c>
 80090be:	4613      	mov	r3, r2
 80090c0:	e7cc      	b.n	800905c <_malloc_r+0x80>
 80090c2:	230c      	movs	r3, #12
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	4638      	mov	r0, r7
 80090c8:	f000 f80e 	bl	80090e8 <__malloc_unlock>
 80090cc:	e797      	b.n	8008ffe <_malloc_r+0x22>
 80090ce:	6025      	str	r5, [r4, #0]
 80090d0:	e7dc      	b.n	800908c <_malloc_r+0xb0>
 80090d2:	605b      	str	r3, [r3, #4]
 80090d4:	deff      	udf	#255	; 0xff
 80090d6:	bf00      	nop
 80090d8:	200044b0 	.word	0x200044b0

080090dc <__malloc_lock>:
 80090dc:	4801      	ldr	r0, [pc, #4]	; (80090e4 <__malloc_lock+0x8>)
 80090de:	f7ff b876 	b.w	80081ce <__retarget_lock_acquire_recursive>
 80090e2:	bf00      	nop
 80090e4:	200044ac 	.word	0x200044ac

080090e8 <__malloc_unlock>:
 80090e8:	4801      	ldr	r0, [pc, #4]	; (80090f0 <__malloc_unlock+0x8>)
 80090ea:	f7ff b871 	b.w	80081d0 <__retarget_lock_release_recursive>
 80090ee:	bf00      	nop
 80090f0:	200044ac 	.word	0x200044ac

080090f4 <_Balloc>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	69c6      	ldr	r6, [r0, #28]
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	b976      	cbnz	r6, 800911c <_Balloc+0x28>
 80090fe:	2010      	movs	r0, #16
 8009100:	f7ff ff44 	bl	8008f8c <malloc>
 8009104:	4602      	mov	r2, r0
 8009106:	61e0      	str	r0, [r4, #28]
 8009108:	b920      	cbnz	r0, 8009114 <_Balloc+0x20>
 800910a:	4b18      	ldr	r3, [pc, #96]	; (800916c <_Balloc+0x78>)
 800910c:	4818      	ldr	r0, [pc, #96]	; (8009170 <_Balloc+0x7c>)
 800910e:	216b      	movs	r1, #107	; 0x6b
 8009110:	f001 ff46 	bl	800afa0 <__assert_func>
 8009114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009118:	6006      	str	r6, [r0, #0]
 800911a:	60c6      	str	r6, [r0, #12]
 800911c:	69e6      	ldr	r6, [r4, #28]
 800911e:	68f3      	ldr	r3, [r6, #12]
 8009120:	b183      	cbz	r3, 8009144 <_Balloc+0x50>
 8009122:	69e3      	ldr	r3, [r4, #28]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800912a:	b9b8      	cbnz	r0, 800915c <_Balloc+0x68>
 800912c:	2101      	movs	r1, #1
 800912e:	fa01 f605 	lsl.w	r6, r1, r5
 8009132:	1d72      	adds	r2, r6, #5
 8009134:	0092      	lsls	r2, r2, #2
 8009136:	4620      	mov	r0, r4
 8009138:	f001 ff50 	bl	800afdc <_calloc_r>
 800913c:	b160      	cbz	r0, 8009158 <_Balloc+0x64>
 800913e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009142:	e00e      	b.n	8009162 <_Balloc+0x6e>
 8009144:	2221      	movs	r2, #33	; 0x21
 8009146:	2104      	movs	r1, #4
 8009148:	4620      	mov	r0, r4
 800914a:	f001 ff47 	bl	800afdc <_calloc_r>
 800914e:	69e3      	ldr	r3, [r4, #28]
 8009150:	60f0      	str	r0, [r6, #12]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e4      	bne.n	8009122 <_Balloc+0x2e>
 8009158:	2000      	movs	r0, #0
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	6802      	ldr	r2, [r0, #0]
 800915e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009162:	2300      	movs	r3, #0
 8009164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009168:	e7f7      	b.n	800915a <_Balloc+0x66>
 800916a:	bf00      	nop
 800916c:	0800b9b6 	.word	0x0800b9b6
 8009170:	0800ba36 	.word	0x0800ba36

08009174 <_Bfree>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	69c6      	ldr	r6, [r0, #28]
 8009178:	4605      	mov	r5, r0
 800917a:	460c      	mov	r4, r1
 800917c:	b976      	cbnz	r6, 800919c <_Bfree+0x28>
 800917e:	2010      	movs	r0, #16
 8009180:	f7ff ff04 	bl	8008f8c <malloc>
 8009184:	4602      	mov	r2, r0
 8009186:	61e8      	str	r0, [r5, #28]
 8009188:	b920      	cbnz	r0, 8009194 <_Bfree+0x20>
 800918a:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <_Bfree+0x3c>)
 800918c:	4809      	ldr	r0, [pc, #36]	; (80091b4 <_Bfree+0x40>)
 800918e:	218f      	movs	r1, #143	; 0x8f
 8009190:	f001 ff06 	bl	800afa0 <__assert_func>
 8009194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009198:	6006      	str	r6, [r0, #0]
 800919a:	60c6      	str	r6, [r0, #12]
 800919c:	b13c      	cbz	r4, 80091ae <_Bfree+0x3a>
 800919e:	69eb      	ldr	r3, [r5, #28]
 80091a0:	6862      	ldr	r2, [r4, #4]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091a8:	6021      	str	r1, [r4, #0]
 80091aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	0800b9b6 	.word	0x0800b9b6
 80091b4:	0800ba36 	.word	0x0800ba36

080091b8 <__multadd>:
 80091b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091bc:	690d      	ldr	r5, [r1, #16]
 80091be:	4607      	mov	r7, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	461e      	mov	r6, r3
 80091c4:	f101 0c14 	add.w	ip, r1, #20
 80091c8:	2000      	movs	r0, #0
 80091ca:	f8dc 3000 	ldr.w	r3, [ip]
 80091ce:	b299      	uxth	r1, r3
 80091d0:	fb02 6101 	mla	r1, r2, r1, r6
 80091d4:	0c1e      	lsrs	r6, r3, #16
 80091d6:	0c0b      	lsrs	r3, r1, #16
 80091d8:	fb02 3306 	mla	r3, r2, r6, r3
 80091dc:	b289      	uxth	r1, r1
 80091de:	3001      	adds	r0, #1
 80091e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091e4:	4285      	cmp	r5, r0
 80091e6:	f84c 1b04 	str.w	r1, [ip], #4
 80091ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091ee:	dcec      	bgt.n	80091ca <__multadd+0x12>
 80091f0:	b30e      	cbz	r6, 8009236 <__multadd+0x7e>
 80091f2:	68a3      	ldr	r3, [r4, #8]
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	dc19      	bgt.n	800922c <__multadd+0x74>
 80091f8:	6861      	ldr	r1, [r4, #4]
 80091fa:	4638      	mov	r0, r7
 80091fc:	3101      	adds	r1, #1
 80091fe:	f7ff ff79 	bl	80090f4 <_Balloc>
 8009202:	4680      	mov	r8, r0
 8009204:	b928      	cbnz	r0, 8009212 <__multadd+0x5a>
 8009206:	4602      	mov	r2, r0
 8009208:	4b0c      	ldr	r3, [pc, #48]	; (800923c <__multadd+0x84>)
 800920a:	480d      	ldr	r0, [pc, #52]	; (8009240 <__multadd+0x88>)
 800920c:	21ba      	movs	r1, #186	; 0xba
 800920e:	f001 fec7 	bl	800afa0 <__assert_func>
 8009212:	6922      	ldr	r2, [r4, #16]
 8009214:	3202      	adds	r2, #2
 8009216:	f104 010c 	add.w	r1, r4, #12
 800921a:	0092      	lsls	r2, r2, #2
 800921c:	300c      	adds	r0, #12
 800921e:	f7fe ffd8 	bl	80081d2 <memcpy>
 8009222:	4621      	mov	r1, r4
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff ffa5 	bl	8009174 <_Bfree>
 800922a:	4644      	mov	r4, r8
 800922c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009230:	3501      	adds	r5, #1
 8009232:	615e      	str	r6, [r3, #20]
 8009234:	6125      	str	r5, [r4, #16]
 8009236:	4620      	mov	r0, r4
 8009238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800923c:	0800ba25 	.word	0x0800ba25
 8009240:	0800ba36 	.word	0x0800ba36

08009244 <__s2b>:
 8009244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	4615      	mov	r5, r2
 800924c:	461f      	mov	r7, r3
 800924e:	2209      	movs	r2, #9
 8009250:	3308      	adds	r3, #8
 8009252:	4606      	mov	r6, r0
 8009254:	fb93 f3f2 	sdiv	r3, r3, r2
 8009258:	2100      	movs	r1, #0
 800925a:	2201      	movs	r2, #1
 800925c:	429a      	cmp	r2, r3
 800925e:	db09      	blt.n	8009274 <__s2b+0x30>
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff ff47 	bl	80090f4 <_Balloc>
 8009266:	b940      	cbnz	r0, 800927a <__s2b+0x36>
 8009268:	4602      	mov	r2, r0
 800926a:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <__s2b+0x8c>)
 800926c:	4819      	ldr	r0, [pc, #100]	; (80092d4 <__s2b+0x90>)
 800926e:	21d3      	movs	r1, #211	; 0xd3
 8009270:	f001 fe96 	bl	800afa0 <__assert_func>
 8009274:	0052      	lsls	r2, r2, #1
 8009276:	3101      	adds	r1, #1
 8009278:	e7f0      	b.n	800925c <__s2b+0x18>
 800927a:	9b08      	ldr	r3, [sp, #32]
 800927c:	6143      	str	r3, [r0, #20]
 800927e:	2d09      	cmp	r5, #9
 8009280:	f04f 0301 	mov.w	r3, #1
 8009284:	6103      	str	r3, [r0, #16]
 8009286:	dd16      	ble.n	80092b6 <__s2b+0x72>
 8009288:	f104 0909 	add.w	r9, r4, #9
 800928c:	46c8      	mov	r8, r9
 800928e:	442c      	add	r4, r5
 8009290:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009294:	4601      	mov	r1, r0
 8009296:	3b30      	subs	r3, #48	; 0x30
 8009298:	220a      	movs	r2, #10
 800929a:	4630      	mov	r0, r6
 800929c:	f7ff ff8c 	bl	80091b8 <__multadd>
 80092a0:	45a0      	cmp	r8, r4
 80092a2:	d1f5      	bne.n	8009290 <__s2b+0x4c>
 80092a4:	f1a5 0408 	sub.w	r4, r5, #8
 80092a8:	444c      	add	r4, r9
 80092aa:	1b2d      	subs	r5, r5, r4
 80092ac:	1963      	adds	r3, r4, r5
 80092ae:	42bb      	cmp	r3, r7
 80092b0:	db04      	blt.n	80092bc <__s2b+0x78>
 80092b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b6:	340a      	adds	r4, #10
 80092b8:	2509      	movs	r5, #9
 80092ba:	e7f6      	b.n	80092aa <__s2b+0x66>
 80092bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092c0:	4601      	mov	r1, r0
 80092c2:	3b30      	subs	r3, #48	; 0x30
 80092c4:	220a      	movs	r2, #10
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7ff ff76 	bl	80091b8 <__multadd>
 80092cc:	e7ee      	b.n	80092ac <__s2b+0x68>
 80092ce:	bf00      	nop
 80092d0:	0800ba25 	.word	0x0800ba25
 80092d4:	0800ba36 	.word	0x0800ba36

080092d8 <__hi0bits>:
 80092d8:	0c03      	lsrs	r3, r0, #16
 80092da:	041b      	lsls	r3, r3, #16
 80092dc:	b9d3      	cbnz	r3, 8009314 <__hi0bits+0x3c>
 80092de:	0400      	lsls	r0, r0, #16
 80092e0:	2310      	movs	r3, #16
 80092e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092e6:	bf04      	itt	eq
 80092e8:	0200      	lsleq	r0, r0, #8
 80092ea:	3308      	addeq	r3, #8
 80092ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092f0:	bf04      	itt	eq
 80092f2:	0100      	lsleq	r0, r0, #4
 80092f4:	3304      	addeq	r3, #4
 80092f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092fa:	bf04      	itt	eq
 80092fc:	0080      	lsleq	r0, r0, #2
 80092fe:	3302      	addeq	r3, #2
 8009300:	2800      	cmp	r0, #0
 8009302:	db05      	blt.n	8009310 <__hi0bits+0x38>
 8009304:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009308:	f103 0301 	add.w	r3, r3, #1
 800930c:	bf08      	it	eq
 800930e:	2320      	moveq	r3, #32
 8009310:	4618      	mov	r0, r3
 8009312:	4770      	bx	lr
 8009314:	2300      	movs	r3, #0
 8009316:	e7e4      	b.n	80092e2 <__hi0bits+0xa>

08009318 <__lo0bits>:
 8009318:	6803      	ldr	r3, [r0, #0]
 800931a:	f013 0207 	ands.w	r2, r3, #7
 800931e:	d00c      	beq.n	800933a <__lo0bits+0x22>
 8009320:	07d9      	lsls	r1, r3, #31
 8009322:	d422      	bmi.n	800936a <__lo0bits+0x52>
 8009324:	079a      	lsls	r2, r3, #30
 8009326:	bf49      	itett	mi
 8009328:	085b      	lsrmi	r3, r3, #1
 800932a:	089b      	lsrpl	r3, r3, #2
 800932c:	6003      	strmi	r3, [r0, #0]
 800932e:	2201      	movmi	r2, #1
 8009330:	bf5c      	itt	pl
 8009332:	6003      	strpl	r3, [r0, #0]
 8009334:	2202      	movpl	r2, #2
 8009336:	4610      	mov	r0, r2
 8009338:	4770      	bx	lr
 800933a:	b299      	uxth	r1, r3
 800933c:	b909      	cbnz	r1, 8009342 <__lo0bits+0x2a>
 800933e:	0c1b      	lsrs	r3, r3, #16
 8009340:	2210      	movs	r2, #16
 8009342:	b2d9      	uxtb	r1, r3
 8009344:	b909      	cbnz	r1, 800934a <__lo0bits+0x32>
 8009346:	3208      	adds	r2, #8
 8009348:	0a1b      	lsrs	r3, r3, #8
 800934a:	0719      	lsls	r1, r3, #28
 800934c:	bf04      	itt	eq
 800934e:	091b      	lsreq	r3, r3, #4
 8009350:	3204      	addeq	r2, #4
 8009352:	0799      	lsls	r1, r3, #30
 8009354:	bf04      	itt	eq
 8009356:	089b      	lsreq	r3, r3, #2
 8009358:	3202      	addeq	r2, #2
 800935a:	07d9      	lsls	r1, r3, #31
 800935c:	d403      	bmi.n	8009366 <__lo0bits+0x4e>
 800935e:	085b      	lsrs	r3, r3, #1
 8009360:	f102 0201 	add.w	r2, r2, #1
 8009364:	d003      	beq.n	800936e <__lo0bits+0x56>
 8009366:	6003      	str	r3, [r0, #0]
 8009368:	e7e5      	b.n	8009336 <__lo0bits+0x1e>
 800936a:	2200      	movs	r2, #0
 800936c:	e7e3      	b.n	8009336 <__lo0bits+0x1e>
 800936e:	2220      	movs	r2, #32
 8009370:	e7e1      	b.n	8009336 <__lo0bits+0x1e>
	...

08009374 <__i2b>:
 8009374:	b510      	push	{r4, lr}
 8009376:	460c      	mov	r4, r1
 8009378:	2101      	movs	r1, #1
 800937a:	f7ff febb 	bl	80090f4 <_Balloc>
 800937e:	4602      	mov	r2, r0
 8009380:	b928      	cbnz	r0, 800938e <__i2b+0x1a>
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <__i2b+0x24>)
 8009384:	4805      	ldr	r0, [pc, #20]	; (800939c <__i2b+0x28>)
 8009386:	f240 1145 	movw	r1, #325	; 0x145
 800938a:	f001 fe09 	bl	800afa0 <__assert_func>
 800938e:	2301      	movs	r3, #1
 8009390:	6144      	str	r4, [r0, #20]
 8009392:	6103      	str	r3, [r0, #16]
 8009394:	bd10      	pop	{r4, pc}
 8009396:	bf00      	nop
 8009398:	0800ba25 	.word	0x0800ba25
 800939c:	0800ba36 	.word	0x0800ba36

080093a0 <__multiply>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	4691      	mov	r9, r2
 80093a6:	690a      	ldr	r2, [r1, #16]
 80093a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	bfb8      	it	lt
 80093b0:	460b      	movlt	r3, r1
 80093b2:	460c      	mov	r4, r1
 80093b4:	bfbc      	itt	lt
 80093b6:	464c      	movlt	r4, r9
 80093b8:	4699      	movlt	r9, r3
 80093ba:	6927      	ldr	r7, [r4, #16]
 80093bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093c0:	68a3      	ldr	r3, [r4, #8]
 80093c2:	6861      	ldr	r1, [r4, #4]
 80093c4:	eb07 060a 	add.w	r6, r7, sl
 80093c8:	42b3      	cmp	r3, r6
 80093ca:	b085      	sub	sp, #20
 80093cc:	bfb8      	it	lt
 80093ce:	3101      	addlt	r1, #1
 80093d0:	f7ff fe90 	bl	80090f4 <_Balloc>
 80093d4:	b930      	cbnz	r0, 80093e4 <__multiply+0x44>
 80093d6:	4602      	mov	r2, r0
 80093d8:	4b44      	ldr	r3, [pc, #272]	; (80094ec <__multiply+0x14c>)
 80093da:	4845      	ldr	r0, [pc, #276]	; (80094f0 <__multiply+0x150>)
 80093dc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80093e0:	f001 fdde 	bl	800afa0 <__assert_func>
 80093e4:	f100 0514 	add.w	r5, r0, #20
 80093e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093ec:	462b      	mov	r3, r5
 80093ee:	2200      	movs	r2, #0
 80093f0:	4543      	cmp	r3, r8
 80093f2:	d321      	bcc.n	8009438 <__multiply+0x98>
 80093f4:	f104 0314 	add.w	r3, r4, #20
 80093f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093fc:	f109 0314 	add.w	r3, r9, #20
 8009400:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009404:	9202      	str	r2, [sp, #8]
 8009406:	1b3a      	subs	r2, r7, r4
 8009408:	3a15      	subs	r2, #21
 800940a:	f022 0203 	bic.w	r2, r2, #3
 800940e:	3204      	adds	r2, #4
 8009410:	f104 0115 	add.w	r1, r4, #21
 8009414:	428f      	cmp	r7, r1
 8009416:	bf38      	it	cc
 8009418:	2204      	movcc	r2, #4
 800941a:	9201      	str	r2, [sp, #4]
 800941c:	9a02      	ldr	r2, [sp, #8]
 800941e:	9303      	str	r3, [sp, #12]
 8009420:	429a      	cmp	r2, r3
 8009422:	d80c      	bhi.n	800943e <__multiply+0x9e>
 8009424:	2e00      	cmp	r6, #0
 8009426:	dd03      	ble.n	8009430 <__multiply+0x90>
 8009428:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800942c:	2b00      	cmp	r3, #0
 800942e:	d05b      	beq.n	80094e8 <__multiply+0x148>
 8009430:	6106      	str	r6, [r0, #16]
 8009432:	b005      	add	sp, #20
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	f843 2b04 	str.w	r2, [r3], #4
 800943c:	e7d8      	b.n	80093f0 <__multiply+0x50>
 800943e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009442:	f1ba 0f00 	cmp.w	sl, #0
 8009446:	d024      	beq.n	8009492 <__multiply+0xf2>
 8009448:	f104 0e14 	add.w	lr, r4, #20
 800944c:	46a9      	mov	r9, r5
 800944e:	f04f 0c00 	mov.w	ip, #0
 8009452:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009456:	f8d9 1000 	ldr.w	r1, [r9]
 800945a:	fa1f fb82 	uxth.w	fp, r2
 800945e:	b289      	uxth	r1, r1
 8009460:	fb0a 110b 	mla	r1, sl, fp, r1
 8009464:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009468:	f8d9 2000 	ldr.w	r2, [r9]
 800946c:	4461      	add	r1, ip
 800946e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009472:	fb0a c20b 	mla	r2, sl, fp, ip
 8009476:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800947a:	b289      	uxth	r1, r1
 800947c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009480:	4577      	cmp	r7, lr
 8009482:	f849 1b04 	str.w	r1, [r9], #4
 8009486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800948a:	d8e2      	bhi.n	8009452 <__multiply+0xb2>
 800948c:	9a01      	ldr	r2, [sp, #4]
 800948e:	f845 c002 	str.w	ip, [r5, r2]
 8009492:	9a03      	ldr	r2, [sp, #12]
 8009494:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009498:	3304      	adds	r3, #4
 800949a:	f1b9 0f00 	cmp.w	r9, #0
 800949e:	d021      	beq.n	80094e4 <__multiply+0x144>
 80094a0:	6829      	ldr	r1, [r5, #0]
 80094a2:	f104 0c14 	add.w	ip, r4, #20
 80094a6:	46ae      	mov	lr, r5
 80094a8:	f04f 0a00 	mov.w	sl, #0
 80094ac:	f8bc b000 	ldrh.w	fp, [ip]
 80094b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80094b4:	fb09 220b 	mla	r2, r9, fp, r2
 80094b8:	4452      	add	r2, sl
 80094ba:	b289      	uxth	r1, r1
 80094bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094c0:	f84e 1b04 	str.w	r1, [lr], #4
 80094c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80094c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094cc:	f8be 1000 	ldrh.w	r1, [lr]
 80094d0:	fb09 110a 	mla	r1, r9, sl, r1
 80094d4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80094d8:	4567      	cmp	r7, ip
 80094da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094de:	d8e5      	bhi.n	80094ac <__multiply+0x10c>
 80094e0:	9a01      	ldr	r2, [sp, #4]
 80094e2:	50a9      	str	r1, [r5, r2]
 80094e4:	3504      	adds	r5, #4
 80094e6:	e799      	b.n	800941c <__multiply+0x7c>
 80094e8:	3e01      	subs	r6, #1
 80094ea:	e79b      	b.n	8009424 <__multiply+0x84>
 80094ec:	0800ba25 	.word	0x0800ba25
 80094f0:	0800ba36 	.word	0x0800ba36

080094f4 <__pow5mult>:
 80094f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f8:	4615      	mov	r5, r2
 80094fa:	f012 0203 	ands.w	r2, r2, #3
 80094fe:	4606      	mov	r6, r0
 8009500:	460f      	mov	r7, r1
 8009502:	d007      	beq.n	8009514 <__pow5mult+0x20>
 8009504:	4c25      	ldr	r4, [pc, #148]	; (800959c <__pow5mult+0xa8>)
 8009506:	3a01      	subs	r2, #1
 8009508:	2300      	movs	r3, #0
 800950a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800950e:	f7ff fe53 	bl	80091b8 <__multadd>
 8009512:	4607      	mov	r7, r0
 8009514:	10ad      	asrs	r5, r5, #2
 8009516:	d03d      	beq.n	8009594 <__pow5mult+0xa0>
 8009518:	69f4      	ldr	r4, [r6, #28]
 800951a:	b97c      	cbnz	r4, 800953c <__pow5mult+0x48>
 800951c:	2010      	movs	r0, #16
 800951e:	f7ff fd35 	bl	8008f8c <malloc>
 8009522:	4602      	mov	r2, r0
 8009524:	61f0      	str	r0, [r6, #28]
 8009526:	b928      	cbnz	r0, 8009534 <__pow5mult+0x40>
 8009528:	4b1d      	ldr	r3, [pc, #116]	; (80095a0 <__pow5mult+0xac>)
 800952a:	481e      	ldr	r0, [pc, #120]	; (80095a4 <__pow5mult+0xb0>)
 800952c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009530:	f001 fd36 	bl	800afa0 <__assert_func>
 8009534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009538:	6004      	str	r4, [r0, #0]
 800953a:	60c4      	str	r4, [r0, #12]
 800953c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009544:	b94c      	cbnz	r4, 800955a <__pow5mult+0x66>
 8009546:	f240 2171 	movw	r1, #625	; 0x271
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ff12 	bl	8009374 <__i2b>
 8009550:	2300      	movs	r3, #0
 8009552:	f8c8 0008 	str.w	r0, [r8, #8]
 8009556:	4604      	mov	r4, r0
 8009558:	6003      	str	r3, [r0, #0]
 800955a:	f04f 0900 	mov.w	r9, #0
 800955e:	07eb      	lsls	r3, r5, #31
 8009560:	d50a      	bpl.n	8009578 <__pow5mult+0x84>
 8009562:	4639      	mov	r1, r7
 8009564:	4622      	mov	r2, r4
 8009566:	4630      	mov	r0, r6
 8009568:	f7ff ff1a 	bl	80093a0 <__multiply>
 800956c:	4639      	mov	r1, r7
 800956e:	4680      	mov	r8, r0
 8009570:	4630      	mov	r0, r6
 8009572:	f7ff fdff 	bl	8009174 <_Bfree>
 8009576:	4647      	mov	r7, r8
 8009578:	106d      	asrs	r5, r5, #1
 800957a:	d00b      	beq.n	8009594 <__pow5mult+0xa0>
 800957c:	6820      	ldr	r0, [r4, #0]
 800957e:	b938      	cbnz	r0, 8009590 <__pow5mult+0x9c>
 8009580:	4622      	mov	r2, r4
 8009582:	4621      	mov	r1, r4
 8009584:	4630      	mov	r0, r6
 8009586:	f7ff ff0b 	bl	80093a0 <__multiply>
 800958a:	6020      	str	r0, [r4, #0]
 800958c:	f8c0 9000 	str.w	r9, [r0]
 8009590:	4604      	mov	r4, r0
 8009592:	e7e4      	b.n	800955e <__pow5mult+0x6a>
 8009594:	4638      	mov	r0, r7
 8009596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800959a:	bf00      	nop
 800959c:	0800bb80 	.word	0x0800bb80
 80095a0:	0800b9b6 	.word	0x0800b9b6
 80095a4:	0800ba36 	.word	0x0800ba36

080095a8 <__lshift>:
 80095a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	460c      	mov	r4, r1
 80095ae:	6849      	ldr	r1, [r1, #4]
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	4607      	mov	r7, r0
 80095ba:	4691      	mov	r9, r2
 80095bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095c0:	f108 0601 	add.w	r6, r8, #1
 80095c4:	42b3      	cmp	r3, r6
 80095c6:	db0b      	blt.n	80095e0 <__lshift+0x38>
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff fd93 	bl	80090f4 <_Balloc>
 80095ce:	4605      	mov	r5, r0
 80095d0:	b948      	cbnz	r0, 80095e6 <__lshift+0x3e>
 80095d2:	4602      	mov	r2, r0
 80095d4:	4b28      	ldr	r3, [pc, #160]	; (8009678 <__lshift+0xd0>)
 80095d6:	4829      	ldr	r0, [pc, #164]	; (800967c <__lshift+0xd4>)
 80095d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80095dc:	f001 fce0 	bl	800afa0 <__assert_func>
 80095e0:	3101      	adds	r1, #1
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	e7ee      	b.n	80095c4 <__lshift+0x1c>
 80095e6:	2300      	movs	r3, #0
 80095e8:	f100 0114 	add.w	r1, r0, #20
 80095ec:	f100 0210 	add.w	r2, r0, #16
 80095f0:	4618      	mov	r0, r3
 80095f2:	4553      	cmp	r3, sl
 80095f4:	db33      	blt.n	800965e <__lshift+0xb6>
 80095f6:	6920      	ldr	r0, [r4, #16]
 80095f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095fc:	f104 0314 	add.w	r3, r4, #20
 8009600:	f019 091f 	ands.w	r9, r9, #31
 8009604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800960c:	d02b      	beq.n	8009666 <__lshift+0xbe>
 800960e:	f1c9 0e20 	rsb	lr, r9, #32
 8009612:	468a      	mov	sl, r1
 8009614:	2200      	movs	r2, #0
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	fa00 f009 	lsl.w	r0, r0, r9
 800961c:	4310      	orrs	r0, r2
 800961e:	f84a 0b04 	str.w	r0, [sl], #4
 8009622:	f853 2b04 	ldr.w	r2, [r3], #4
 8009626:	459c      	cmp	ip, r3
 8009628:	fa22 f20e 	lsr.w	r2, r2, lr
 800962c:	d8f3      	bhi.n	8009616 <__lshift+0x6e>
 800962e:	ebac 0304 	sub.w	r3, ip, r4
 8009632:	3b15      	subs	r3, #21
 8009634:	f023 0303 	bic.w	r3, r3, #3
 8009638:	3304      	adds	r3, #4
 800963a:	f104 0015 	add.w	r0, r4, #21
 800963e:	4584      	cmp	ip, r0
 8009640:	bf38      	it	cc
 8009642:	2304      	movcc	r3, #4
 8009644:	50ca      	str	r2, [r1, r3]
 8009646:	b10a      	cbz	r2, 800964c <__lshift+0xa4>
 8009648:	f108 0602 	add.w	r6, r8, #2
 800964c:	3e01      	subs	r6, #1
 800964e:	4638      	mov	r0, r7
 8009650:	612e      	str	r6, [r5, #16]
 8009652:	4621      	mov	r1, r4
 8009654:	f7ff fd8e 	bl	8009174 <_Bfree>
 8009658:	4628      	mov	r0, r5
 800965a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009662:	3301      	adds	r3, #1
 8009664:	e7c5      	b.n	80095f2 <__lshift+0x4a>
 8009666:	3904      	subs	r1, #4
 8009668:	f853 2b04 	ldr.w	r2, [r3], #4
 800966c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009670:	459c      	cmp	ip, r3
 8009672:	d8f9      	bhi.n	8009668 <__lshift+0xc0>
 8009674:	e7ea      	b.n	800964c <__lshift+0xa4>
 8009676:	bf00      	nop
 8009678:	0800ba25 	.word	0x0800ba25
 800967c:	0800ba36 	.word	0x0800ba36

08009680 <__mcmp>:
 8009680:	b530      	push	{r4, r5, lr}
 8009682:	6902      	ldr	r2, [r0, #16]
 8009684:	690c      	ldr	r4, [r1, #16]
 8009686:	1b12      	subs	r2, r2, r4
 8009688:	d10e      	bne.n	80096a8 <__mcmp+0x28>
 800968a:	f100 0314 	add.w	r3, r0, #20
 800968e:	3114      	adds	r1, #20
 8009690:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009698:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800969c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096a0:	42a5      	cmp	r5, r4
 80096a2:	d003      	beq.n	80096ac <__mcmp+0x2c>
 80096a4:	d305      	bcc.n	80096b2 <__mcmp+0x32>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4610      	mov	r0, r2
 80096aa:	bd30      	pop	{r4, r5, pc}
 80096ac:	4283      	cmp	r3, r0
 80096ae:	d3f3      	bcc.n	8009698 <__mcmp+0x18>
 80096b0:	e7fa      	b.n	80096a8 <__mcmp+0x28>
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	e7f7      	b.n	80096a8 <__mcmp+0x28>

080096b8 <__mdiff>:
 80096b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	460c      	mov	r4, r1
 80096be:	4606      	mov	r6, r0
 80096c0:	4611      	mov	r1, r2
 80096c2:	4620      	mov	r0, r4
 80096c4:	4690      	mov	r8, r2
 80096c6:	f7ff ffdb 	bl	8009680 <__mcmp>
 80096ca:	1e05      	subs	r5, r0, #0
 80096cc:	d110      	bne.n	80096f0 <__mdiff+0x38>
 80096ce:	4629      	mov	r1, r5
 80096d0:	4630      	mov	r0, r6
 80096d2:	f7ff fd0f 	bl	80090f4 <_Balloc>
 80096d6:	b930      	cbnz	r0, 80096e6 <__mdiff+0x2e>
 80096d8:	4b3a      	ldr	r3, [pc, #232]	; (80097c4 <__mdiff+0x10c>)
 80096da:	4602      	mov	r2, r0
 80096dc:	f240 2137 	movw	r1, #567	; 0x237
 80096e0:	4839      	ldr	r0, [pc, #228]	; (80097c8 <__mdiff+0x110>)
 80096e2:	f001 fc5d 	bl	800afa0 <__assert_func>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f0:	bfa4      	itt	ge
 80096f2:	4643      	movge	r3, r8
 80096f4:	46a0      	movge	r8, r4
 80096f6:	4630      	mov	r0, r6
 80096f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096fc:	bfa6      	itte	ge
 80096fe:	461c      	movge	r4, r3
 8009700:	2500      	movge	r5, #0
 8009702:	2501      	movlt	r5, #1
 8009704:	f7ff fcf6 	bl	80090f4 <_Balloc>
 8009708:	b920      	cbnz	r0, 8009714 <__mdiff+0x5c>
 800970a:	4b2e      	ldr	r3, [pc, #184]	; (80097c4 <__mdiff+0x10c>)
 800970c:	4602      	mov	r2, r0
 800970e:	f240 2145 	movw	r1, #581	; 0x245
 8009712:	e7e5      	b.n	80096e0 <__mdiff+0x28>
 8009714:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009718:	6926      	ldr	r6, [r4, #16]
 800971a:	60c5      	str	r5, [r0, #12]
 800971c:	f104 0914 	add.w	r9, r4, #20
 8009720:	f108 0514 	add.w	r5, r8, #20
 8009724:	f100 0e14 	add.w	lr, r0, #20
 8009728:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800972c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009730:	f108 0210 	add.w	r2, r8, #16
 8009734:	46f2      	mov	sl, lr
 8009736:	2100      	movs	r1, #0
 8009738:	f859 3b04 	ldr.w	r3, [r9], #4
 800973c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009740:	fa11 f88b 	uxtah	r8, r1, fp
 8009744:	b299      	uxth	r1, r3
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	eba8 0801 	sub.w	r8, r8, r1
 800974c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009750:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009754:	fa1f f888 	uxth.w	r8, r8
 8009758:	1419      	asrs	r1, r3, #16
 800975a:	454e      	cmp	r6, r9
 800975c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009760:	f84a 3b04 	str.w	r3, [sl], #4
 8009764:	d8e8      	bhi.n	8009738 <__mdiff+0x80>
 8009766:	1b33      	subs	r3, r6, r4
 8009768:	3b15      	subs	r3, #21
 800976a:	f023 0303 	bic.w	r3, r3, #3
 800976e:	3304      	adds	r3, #4
 8009770:	3415      	adds	r4, #21
 8009772:	42a6      	cmp	r6, r4
 8009774:	bf38      	it	cc
 8009776:	2304      	movcc	r3, #4
 8009778:	441d      	add	r5, r3
 800977a:	4473      	add	r3, lr
 800977c:	469e      	mov	lr, r3
 800977e:	462e      	mov	r6, r5
 8009780:	4566      	cmp	r6, ip
 8009782:	d30e      	bcc.n	80097a2 <__mdiff+0xea>
 8009784:	f10c 0203 	add.w	r2, ip, #3
 8009788:	1b52      	subs	r2, r2, r5
 800978a:	f022 0203 	bic.w	r2, r2, #3
 800978e:	3d03      	subs	r5, #3
 8009790:	45ac      	cmp	ip, r5
 8009792:	bf38      	it	cc
 8009794:	2200      	movcc	r2, #0
 8009796:	4413      	add	r3, r2
 8009798:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800979c:	b17a      	cbz	r2, 80097be <__mdiff+0x106>
 800979e:	6107      	str	r7, [r0, #16]
 80097a0:	e7a4      	b.n	80096ec <__mdiff+0x34>
 80097a2:	f856 8b04 	ldr.w	r8, [r6], #4
 80097a6:	fa11 f288 	uxtah	r2, r1, r8
 80097aa:	1414      	asrs	r4, r2, #16
 80097ac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80097b0:	b292      	uxth	r2, r2
 80097b2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80097b6:	f84e 2b04 	str.w	r2, [lr], #4
 80097ba:	1421      	asrs	r1, r4, #16
 80097bc:	e7e0      	b.n	8009780 <__mdiff+0xc8>
 80097be:	3f01      	subs	r7, #1
 80097c0:	e7ea      	b.n	8009798 <__mdiff+0xe0>
 80097c2:	bf00      	nop
 80097c4:	0800ba25 	.word	0x0800ba25
 80097c8:	0800ba36 	.word	0x0800ba36

080097cc <__ulp>:
 80097cc:	b082      	sub	sp, #8
 80097ce:	ed8d 0b00 	vstr	d0, [sp]
 80097d2:	9a01      	ldr	r2, [sp, #4]
 80097d4:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <__ulp+0x48>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dc08      	bgt.n	80097f2 <__ulp+0x26>
 80097e0:	425b      	negs	r3, r3
 80097e2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80097e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097ea:	da04      	bge.n	80097f6 <__ulp+0x2a>
 80097ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097f0:	4113      	asrs	r3, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	e008      	b.n	8009808 <__ulp+0x3c>
 80097f6:	f1a2 0314 	sub.w	r3, r2, #20
 80097fa:	2b1e      	cmp	r3, #30
 80097fc:	bfda      	itte	le
 80097fe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009802:	40da      	lsrle	r2, r3
 8009804:	2201      	movgt	r2, #1
 8009806:	2300      	movs	r3, #0
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	ec41 0b10 	vmov	d0, r0, r1
 8009810:	b002      	add	sp, #8
 8009812:	4770      	bx	lr
 8009814:	7ff00000 	.word	0x7ff00000

08009818 <__b2d>:
 8009818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	6906      	ldr	r6, [r0, #16]
 800981e:	f100 0814 	add.w	r8, r0, #20
 8009822:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009826:	1f37      	subs	r7, r6, #4
 8009828:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800982c:	4610      	mov	r0, r2
 800982e:	f7ff fd53 	bl	80092d8 <__hi0bits>
 8009832:	f1c0 0320 	rsb	r3, r0, #32
 8009836:	280a      	cmp	r0, #10
 8009838:	600b      	str	r3, [r1, #0]
 800983a:	491b      	ldr	r1, [pc, #108]	; (80098a8 <__b2d+0x90>)
 800983c:	dc15      	bgt.n	800986a <__b2d+0x52>
 800983e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009842:	fa22 f30c 	lsr.w	r3, r2, ip
 8009846:	45b8      	cmp	r8, r7
 8009848:	ea43 0501 	orr.w	r5, r3, r1
 800984c:	bf34      	ite	cc
 800984e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009852:	2300      	movcs	r3, #0
 8009854:	3015      	adds	r0, #21
 8009856:	fa02 f000 	lsl.w	r0, r2, r0
 800985a:	fa23 f30c 	lsr.w	r3, r3, ip
 800985e:	4303      	orrs	r3, r0
 8009860:	461c      	mov	r4, r3
 8009862:	ec45 4b10 	vmov	d0, r4, r5
 8009866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986a:	45b8      	cmp	r8, r7
 800986c:	bf3a      	itte	cc
 800986e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009872:	f1a6 0708 	subcc.w	r7, r6, #8
 8009876:	2300      	movcs	r3, #0
 8009878:	380b      	subs	r0, #11
 800987a:	d012      	beq.n	80098a2 <__b2d+0x8a>
 800987c:	f1c0 0120 	rsb	r1, r0, #32
 8009880:	fa23 f401 	lsr.w	r4, r3, r1
 8009884:	4082      	lsls	r2, r0
 8009886:	4322      	orrs	r2, r4
 8009888:	4547      	cmp	r7, r8
 800988a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800988e:	bf8c      	ite	hi
 8009890:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009894:	2200      	movls	r2, #0
 8009896:	4083      	lsls	r3, r0
 8009898:	40ca      	lsrs	r2, r1
 800989a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800989e:	4313      	orrs	r3, r2
 80098a0:	e7de      	b.n	8009860 <__b2d+0x48>
 80098a2:	ea42 0501 	orr.w	r5, r2, r1
 80098a6:	e7db      	b.n	8009860 <__b2d+0x48>
 80098a8:	3ff00000 	.word	0x3ff00000

080098ac <__d2b>:
 80098ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098b0:	460f      	mov	r7, r1
 80098b2:	2101      	movs	r1, #1
 80098b4:	ec59 8b10 	vmov	r8, r9, d0
 80098b8:	4616      	mov	r6, r2
 80098ba:	f7ff fc1b 	bl	80090f4 <_Balloc>
 80098be:	4604      	mov	r4, r0
 80098c0:	b930      	cbnz	r0, 80098d0 <__d2b+0x24>
 80098c2:	4602      	mov	r2, r0
 80098c4:	4b24      	ldr	r3, [pc, #144]	; (8009958 <__d2b+0xac>)
 80098c6:	4825      	ldr	r0, [pc, #148]	; (800995c <__d2b+0xb0>)
 80098c8:	f240 310f 	movw	r1, #783	; 0x30f
 80098cc:	f001 fb68 	bl	800afa0 <__assert_func>
 80098d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098d8:	bb2d      	cbnz	r5, 8009926 <__d2b+0x7a>
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	f1b8 0300 	subs.w	r3, r8, #0
 80098e0:	d026      	beq.n	8009930 <__d2b+0x84>
 80098e2:	4668      	mov	r0, sp
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	f7ff fd17 	bl	8009318 <__lo0bits>
 80098ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098ee:	b1e8      	cbz	r0, 800992c <__d2b+0x80>
 80098f0:	f1c0 0320 	rsb	r3, r0, #32
 80098f4:	fa02 f303 	lsl.w	r3, r2, r3
 80098f8:	430b      	orrs	r3, r1
 80098fa:	40c2      	lsrs	r2, r0
 80098fc:	6163      	str	r3, [r4, #20]
 80098fe:	9201      	str	r2, [sp, #4]
 8009900:	9b01      	ldr	r3, [sp, #4]
 8009902:	61a3      	str	r3, [r4, #24]
 8009904:	2b00      	cmp	r3, #0
 8009906:	bf14      	ite	ne
 8009908:	2202      	movne	r2, #2
 800990a:	2201      	moveq	r2, #1
 800990c:	6122      	str	r2, [r4, #16]
 800990e:	b1bd      	cbz	r5, 8009940 <__d2b+0x94>
 8009910:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009914:	4405      	add	r5, r0
 8009916:	603d      	str	r5, [r7, #0]
 8009918:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800991c:	6030      	str	r0, [r6, #0]
 800991e:	4620      	mov	r0, r4
 8009920:	b003      	add	sp, #12
 8009922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800992a:	e7d6      	b.n	80098da <__d2b+0x2e>
 800992c:	6161      	str	r1, [r4, #20]
 800992e:	e7e7      	b.n	8009900 <__d2b+0x54>
 8009930:	a801      	add	r0, sp, #4
 8009932:	f7ff fcf1 	bl	8009318 <__lo0bits>
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	6163      	str	r3, [r4, #20]
 800993a:	3020      	adds	r0, #32
 800993c:	2201      	movs	r2, #1
 800993e:	e7e5      	b.n	800990c <__d2b+0x60>
 8009940:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009944:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009948:	6038      	str	r0, [r7, #0]
 800994a:	6918      	ldr	r0, [r3, #16]
 800994c:	f7ff fcc4 	bl	80092d8 <__hi0bits>
 8009950:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009954:	e7e2      	b.n	800991c <__d2b+0x70>
 8009956:	bf00      	nop
 8009958:	0800ba25 	.word	0x0800ba25
 800995c:	0800ba36 	.word	0x0800ba36

08009960 <__ratio>:
 8009960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	4688      	mov	r8, r1
 8009966:	4669      	mov	r1, sp
 8009968:	4681      	mov	r9, r0
 800996a:	f7ff ff55 	bl	8009818 <__b2d>
 800996e:	a901      	add	r1, sp, #4
 8009970:	4640      	mov	r0, r8
 8009972:	ec55 4b10 	vmov	r4, r5, d0
 8009976:	f7ff ff4f 	bl	8009818 <__b2d>
 800997a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800997e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009982:	eba3 0c02 	sub.w	ip, r3, r2
 8009986:	e9dd 3200 	ldrd	r3, r2, [sp]
 800998a:	1a9b      	subs	r3, r3, r2
 800998c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009990:	ec51 0b10 	vmov	r0, r1, d0
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfd6      	itet	le
 8009998:	460a      	movle	r2, r1
 800999a:	462a      	movgt	r2, r5
 800999c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80099a0:	468b      	mov	fp, r1
 80099a2:	462f      	mov	r7, r5
 80099a4:	bfd4      	ite	le
 80099a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80099aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80099ae:	4620      	mov	r0, r4
 80099b0:	ee10 2a10 	vmov	r2, s0
 80099b4:	465b      	mov	r3, fp
 80099b6:	4639      	mov	r1, r7
 80099b8:	f7f6 ff50 	bl	800085c <__aeabi_ddiv>
 80099bc:	ec41 0b10 	vmov	d0, r0, r1
 80099c0:	b003      	add	sp, #12
 80099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099c6 <__copybits>:
 80099c6:	3901      	subs	r1, #1
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	1149      	asrs	r1, r1, #5
 80099cc:	6914      	ldr	r4, [r2, #16]
 80099ce:	3101      	adds	r1, #1
 80099d0:	f102 0314 	add.w	r3, r2, #20
 80099d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099dc:	1f05      	subs	r5, r0, #4
 80099de:	42a3      	cmp	r3, r4
 80099e0:	d30c      	bcc.n	80099fc <__copybits+0x36>
 80099e2:	1aa3      	subs	r3, r4, r2
 80099e4:	3b11      	subs	r3, #17
 80099e6:	f023 0303 	bic.w	r3, r3, #3
 80099ea:	3211      	adds	r2, #17
 80099ec:	42a2      	cmp	r2, r4
 80099ee:	bf88      	it	hi
 80099f0:	2300      	movhi	r3, #0
 80099f2:	4418      	add	r0, r3
 80099f4:	2300      	movs	r3, #0
 80099f6:	4288      	cmp	r0, r1
 80099f8:	d305      	bcc.n	8009a06 <__copybits+0x40>
 80099fa:	bd70      	pop	{r4, r5, r6, pc}
 80099fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a00:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a04:	e7eb      	b.n	80099de <__copybits+0x18>
 8009a06:	f840 3b04 	str.w	r3, [r0], #4
 8009a0a:	e7f4      	b.n	80099f6 <__copybits+0x30>

08009a0c <__any_on>:
 8009a0c:	f100 0214 	add.w	r2, r0, #20
 8009a10:	6900      	ldr	r0, [r0, #16]
 8009a12:	114b      	asrs	r3, r1, #5
 8009a14:	4298      	cmp	r0, r3
 8009a16:	b510      	push	{r4, lr}
 8009a18:	db11      	blt.n	8009a3e <__any_on+0x32>
 8009a1a:	dd0a      	ble.n	8009a32 <__any_on+0x26>
 8009a1c:	f011 011f 	ands.w	r1, r1, #31
 8009a20:	d007      	beq.n	8009a32 <__any_on+0x26>
 8009a22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a26:	fa24 f001 	lsr.w	r0, r4, r1
 8009a2a:	fa00 f101 	lsl.w	r1, r0, r1
 8009a2e:	428c      	cmp	r4, r1
 8009a30:	d10b      	bne.n	8009a4a <__any_on+0x3e>
 8009a32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d803      	bhi.n	8009a42 <__any_on+0x36>
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	bd10      	pop	{r4, pc}
 8009a3e:	4603      	mov	r3, r0
 8009a40:	e7f7      	b.n	8009a32 <__any_on+0x26>
 8009a42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a46:	2900      	cmp	r1, #0
 8009a48:	d0f5      	beq.n	8009a36 <__any_on+0x2a>
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	e7f6      	b.n	8009a3c <__any_on+0x30>

08009a4e <sulp>:
 8009a4e:	b570      	push	{r4, r5, r6, lr}
 8009a50:	4604      	mov	r4, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	ec45 4b10 	vmov	d0, r4, r5
 8009a58:	4616      	mov	r6, r2
 8009a5a:	f7ff feb7 	bl	80097cc <__ulp>
 8009a5e:	ec51 0b10 	vmov	r0, r1, d0
 8009a62:	b17e      	cbz	r6, 8009a84 <sulp+0x36>
 8009a64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dd09      	ble.n	8009a84 <sulp+0x36>
 8009a70:	051b      	lsls	r3, r3, #20
 8009a72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a76:	2400      	movs	r4, #0
 8009a78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	462b      	mov	r3, r5
 8009a80:	f7f6 fdc2 	bl	8000608 <__aeabi_dmul>
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a88 <_strtod_l>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	ed2d 8b02 	vpush	{d8}
 8009a90:	b09b      	sub	sp, #108	; 0x6c
 8009a92:	4604      	mov	r4, r0
 8009a94:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a96:	2200      	movs	r2, #0
 8009a98:	9216      	str	r2, [sp, #88]	; 0x58
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	f04f 0800 	mov.w	r8, #0
 8009aa0:	f04f 0900 	mov.w	r9, #0
 8009aa4:	460a      	mov	r2, r1
 8009aa6:	9215      	str	r2, [sp, #84]	; 0x54
 8009aa8:	7811      	ldrb	r1, [r2, #0]
 8009aaa:	292b      	cmp	r1, #43	; 0x2b
 8009aac:	d04c      	beq.n	8009b48 <_strtod_l+0xc0>
 8009aae:	d83a      	bhi.n	8009b26 <_strtod_l+0x9e>
 8009ab0:	290d      	cmp	r1, #13
 8009ab2:	d834      	bhi.n	8009b1e <_strtod_l+0x96>
 8009ab4:	2908      	cmp	r1, #8
 8009ab6:	d834      	bhi.n	8009b22 <_strtod_l+0x9a>
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	d03d      	beq.n	8009b38 <_strtod_l+0xb0>
 8009abc:	2200      	movs	r2, #0
 8009abe:	920a      	str	r2, [sp, #40]	; 0x28
 8009ac0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009ac2:	7832      	ldrb	r2, [r6, #0]
 8009ac4:	2a30      	cmp	r2, #48	; 0x30
 8009ac6:	f040 80b4 	bne.w	8009c32 <_strtod_l+0x1aa>
 8009aca:	7872      	ldrb	r2, [r6, #1]
 8009acc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009ad0:	2a58      	cmp	r2, #88	; 0x58
 8009ad2:	d170      	bne.n	8009bb6 <_strtod_l+0x12e>
 8009ad4:	9302      	str	r3, [sp, #8]
 8009ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	ab16      	add	r3, sp, #88	; 0x58
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	4a8e      	ldr	r2, [pc, #568]	; (8009d18 <_strtod_l+0x290>)
 8009ae0:	ab17      	add	r3, sp, #92	; 0x5c
 8009ae2:	a915      	add	r1, sp, #84	; 0x54
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f001 faf7 	bl	800b0d8 <__gethex>
 8009aea:	f010 070f 	ands.w	r7, r0, #15
 8009aee:	4605      	mov	r5, r0
 8009af0:	d005      	beq.n	8009afe <_strtod_l+0x76>
 8009af2:	2f06      	cmp	r7, #6
 8009af4:	d12a      	bne.n	8009b4c <_strtod_l+0xc4>
 8009af6:	3601      	adds	r6, #1
 8009af8:	2300      	movs	r3, #0
 8009afa:	9615      	str	r6, [sp, #84]	; 0x54
 8009afc:	930a      	str	r3, [sp, #40]	; 0x28
 8009afe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 857f 	bne.w	800a604 <_strtod_l+0xb7c>
 8009b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b08:	b1db      	cbz	r3, 8009b42 <_strtod_l+0xba>
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b10:	ec43 2b10 	vmov	d0, r2, r3
 8009b14:	b01b      	add	sp, #108	; 0x6c
 8009b16:	ecbd 8b02 	vpop	{d8}
 8009b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	2920      	cmp	r1, #32
 8009b20:	d1cc      	bne.n	8009abc <_strtod_l+0x34>
 8009b22:	3201      	adds	r2, #1
 8009b24:	e7bf      	b.n	8009aa6 <_strtod_l+0x1e>
 8009b26:	292d      	cmp	r1, #45	; 0x2d
 8009b28:	d1c8      	bne.n	8009abc <_strtod_l+0x34>
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	910a      	str	r1, [sp, #40]	; 0x28
 8009b2e:	1c51      	adds	r1, r2, #1
 8009b30:	9115      	str	r1, [sp, #84]	; 0x54
 8009b32:	7852      	ldrb	r2, [r2, #1]
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	d1c3      	bne.n	8009ac0 <_strtod_l+0x38>
 8009b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b3a:	9515      	str	r5, [sp, #84]	; 0x54
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f040 855f 	bne.w	800a600 <_strtod_l+0xb78>
 8009b42:	4642      	mov	r2, r8
 8009b44:	464b      	mov	r3, r9
 8009b46:	e7e3      	b.n	8009b10 <_strtod_l+0x88>
 8009b48:	2100      	movs	r1, #0
 8009b4a:	e7ef      	b.n	8009b2c <_strtod_l+0xa4>
 8009b4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009b4e:	b13a      	cbz	r2, 8009b60 <_strtod_l+0xd8>
 8009b50:	2135      	movs	r1, #53	; 0x35
 8009b52:	a818      	add	r0, sp, #96	; 0x60
 8009b54:	f7ff ff37 	bl	80099c6 <__copybits>
 8009b58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f7ff fb0a 	bl	8009174 <_Bfree>
 8009b60:	3f01      	subs	r7, #1
 8009b62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b64:	2f04      	cmp	r7, #4
 8009b66:	d806      	bhi.n	8009b76 <_strtod_l+0xee>
 8009b68:	e8df f007 	tbb	[pc, r7]
 8009b6c:	201d0314 	.word	0x201d0314
 8009b70:	14          	.byte	0x14
 8009b71:	00          	.byte	0x00
 8009b72:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009b76:	05e9      	lsls	r1, r5, #23
 8009b78:	bf48      	it	mi
 8009b7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009b7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b82:	0d1b      	lsrs	r3, r3, #20
 8009b84:	051b      	lsls	r3, r3, #20
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1b9      	bne.n	8009afe <_strtod_l+0x76>
 8009b8a:	f7fe faf5 	bl	8008178 <__errno>
 8009b8e:	2322      	movs	r3, #34	; 0x22
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	e7b4      	b.n	8009afe <_strtod_l+0x76>
 8009b94:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009b98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ba0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009ba4:	e7e7      	b.n	8009b76 <_strtod_l+0xee>
 8009ba6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009d20 <_strtod_l+0x298>
 8009baa:	e7e4      	b.n	8009b76 <_strtod_l+0xee>
 8009bac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009bb0:	f04f 38ff 	mov.w	r8, #4294967295
 8009bb4:	e7df      	b.n	8009b76 <_strtod_l+0xee>
 8009bb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	9215      	str	r2, [sp, #84]	; 0x54
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b30      	cmp	r3, #48	; 0x30
 8009bc0:	d0f9      	beq.n	8009bb6 <_strtod_l+0x12e>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d09b      	beq.n	8009afe <_strtod_l+0x76>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f04f 0a00 	mov.w	sl, #0
 8009bcc:	9304      	str	r3, [sp, #16]
 8009bce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009bd6:	46d3      	mov	fp, sl
 8009bd8:	220a      	movs	r2, #10
 8009bda:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009bdc:	7806      	ldrb	r6, [r0, #0]
 8009bde:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009be2:	b2d9      	uxtb	r1, r3
 8009be4:	2909      	cmp	r1, #9
 8009be6:	d926      	bls.n	8009c36 <_strtod_l+0x1ae>
 8009be8:	494c      	ldr	r1, [pc, #304]	; (8009d1c <_strtod_l+0x294>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	f001 f98c 	bl	800af08 <strncmp>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d030      	beq.n	8009c56 <_strtod_l+0x1ce>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	4632      	mov	r2, r6
 8009bf8:	9005      	str	r0, [sp, #20]
 8009bfa:	465e      	mov	r6, fp
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2a65      	cmp	r2, #101	; 0x65
 8009c00:	d001      	beq.n	8009c06 <_strtod_l+0x17e>
 8009c02:	2a45      	cmp	r2, #69	; 0x45
 8009c04:	d113      	bne.n	8009c2e <_strtod_l+0x1a6>
 8009c06:	b91e      	cbnz	r6, 8009c10 <_strtod_l+0x188>
 8009c08:	9a04      	ldr	r2, [sp, #16]
 8009c0a:	4302      	orrs	r2, r0
 8009c0c:	d094      	beq.n	8009b38 <_strtod_l+0xb0>
 8009c0e:	2600      	movs	r6, #0
 8009c10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009c12:	1c6a      	adds	r2, r5, #1
 8009c14:	9215      	str	r2, [sp, #84]	; 0x54
 8009c16:	786a      	ldrb	r2, [r5, #1]
 8009c18:	2a2b      	cmp	r2, #43	; 0x2b
 8009c1a:	d074      	beq.n	8009d06 <_strtod_l+0x27e>
 8009c1c:	2a2d      	cmp	r2, #45	; 0x2d
 8009c1e:	d078      	beq.n	8009d12 <_strtod_l+0x28a>
 8009c20:	f04f 0c00 	mov.w	ip, #0
 8009c24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009c28:	2909      	cmp	r1, #9
 8009c2a:	d97f      	bls.n	8009d2c <_strtod_l+0x2a4>
 8009c2c:	9515      	str	r5, [sp, #84]	; 0x54
 8009c2e:	2700      	movs	r7, #0
 8009c30:	e09e      	b.n	8009d70 <_strtod_l+0x2e8>
 8009c32:	2300      	movs	r3, #0
 8009c34:	e7c8      	b.n	8009bc8 <_strtod_l+0x140>
 8009c36:	f1bb 0f08 	cmp.w	fp, #8
 8009c3a:	bfd8      	it	le
 8009c3c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009c3e:	f100 0001 	add.w	r0, r0, #1
 8009c42:	bfda      	itte	le
 8009c44:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c48:	9309      	strle	r3, [sp, #36]	; 0x24
 8009c4a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009c4e:	f10b 0b01 	add.w	fp, fp, #1
 8009c52:	9015      	str	r0, [sp, #84]	; 0x54
 8009c54:	e7c1      	b.n	8009bda <_strtod_l+0x152>
 8009c56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	9215      	str	r2, [sp, #84]	; 0x54
 8009c5c:	785a      	ldrb	r2, [r3, #1]
 8009c5e:	f1bb 0f00 	cmp.w	fp, #0
 8009c62:	d037      	beq.n	8009cd4 <_strtod_l+0x24c>
 8009c64:	9005      	str	r0, [sp, #20]
 8009c66:	465e      	mov	r6, fp
 8009c68:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009c6c:	2b09      	cmp	r3, #9
 8009c6e:	d912      	bls.n	8009c96 <_strtod_l+0x20e>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e7c4      	b.n	8009bfe <_strtod_l+0x176>
 8009c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	9215      	str	r2, [sp, #84]	; 0x54
 8009c7a:	785a      	ldrb	r2, [r3, #1]
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	2a30      	cmp	r2, #48	; 0x30
 8009c80:	d0f8      	beq.n	8009c74 <_strtod_l+0x1ec>
 8009c82:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	f200 84c1 	bhi.w	800a60e <_strtod_l+0xb86>
 8009c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c8e:	9005      	str	r0, [sp, #20]
 8009c90:	2000      	movs	r0, #0
 8009c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c94:	4606      	mov	r6, r0
 8009c96:	3a30      	subs	r2, #48	; 0x30
 8009c98:	f100 0301 	add.w	r3, r0, #1
 8009c9c:	d014      	beq.n	8009cc8 <_strtod_l+0x240>
 8009c9e:	9905      	ldr	r1, [sp, #20]
 8009ca0:	4419      	add	r1, r3
 8009ca2:	9105      	str	r1, [sp, #20]
 8009ca4:	4633      	mov	r3, r6
 8009ca6:	eb00 0c06 	add.w	ip, r0, r6
 8009caa:	210a      	movs	r1, #10
 8009cac:	4563      	cmp	r3, ip
 8009cae:	d113      	bne.n	8009cd8 <_strtod_l+0x250>
 8009cb0:	1833      	adds	r3, r6, r0
 8009cb2:	2b08      	cmp	r3, #8
 8009cb4:	f106 0601 	add.w	r6, r6, #1
 8009cb8:	4406      	add	r6, r0
 8009cba:	dc1a      	bgt.n	8009cf2 <_strtod_l+0x26a>
 8009cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cbe:	230a      	movs	r3, #10
 8009cc0:	fb03 2301 	mla	r3, r3, r1, r2
 8009cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009cca:	1c51      	adds	r1, r2, #1
 8009ccc:	9115      	str	r1, [sp, #84]	; 0x54
 8009cce:	7852      	ldrb	r2, [r2, #1]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	e7c9      	b.n	8009c68 <_strtod_l+0x1e0>
 8009cd4:	4658      	mov	r0, fp
 8009cd6:	e7d2      	b.n	8009c7e <_strtod_l+0x1f6>
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	f103 0301 	add.w	r3, r3, #1
 8009cde:	dc03      	bgt.n	8009ce8 <_strtod_l+0x260>
 8009ce0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ce2:	434f      	muls	r7, r1
 8009ce4:	9709      	str	r7, [sp, #36]	; 0x24
 8009ce6:	e7e1      	b.n	8009cac <_strtod_l+0x224>
 8009ce8:	2b10      	cmp	r3, #16
 8009cea:	bfd8      	it	le
 8009cec:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009cf0:	e7dc      	b.n	8009cac <_strtod_l+0x224>
 8009cf2:	2e10      	cmp	r6, #16
 8009cf4:	bfdc      	itt	le
 8009cf6:	230a      	movle	r3, #10
 8009cf8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009cfc:	e7e3      	b.n	8009cc6 <_strtod_l+0x23e>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9305      	str	r3, [sp, #20]
 8009d02:	2301      	movs	r3, #1
 8009d04:	e780      	b.n	8009c08 <_strtod_l+0x180>
 8009d06:	f04f 0c00 	mov.w	ip, #0
 8009d0a:	1caa      	adds	r2, r5, #2
 8009d0c:	9215      	str	r2, [sp, #84]	; 0x54
 8009d0e:	78aa      	ldrb	r2, [r5, #2]
 8009d10:	e788      	b.n	8009c24 <_strtod_l+0x19c>
 8009d12:	f04f 0c01 	mov.w	ip, #1
 8009d16:	e7f8      	b.n	8009d0a <_strtod_l+0x282>
 8009d18:	0800bb90 	.word	0x0800bb90
 8009d1c:	0800bb8c 	.word	0x0800bb8c
 8009d20:	7ff00000 	.word	0x7ff00000
 8009d24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d26:	1c51      	adds	r1, r2, #1
 8009d28:	9115      	str	r1, [sp, #84]	; 0x54
 8009d2a:	7852      	ldrb	r2, [r2, #1]
 8009d2c:	2a30      	cmp	r2, #48	; 0x30
 8009d2e:	d0f9      	beq.n	8009d24 <_strtod_l+0x29c>
 8009d30:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009d34:	2908      	cmp	r1, #8
 8009d36:	f63f af7a 	bhi.w	8009c2e <_strtod_l+0x1a6>
 8009d3a:	3a30      	subs	r2, #48	; 0x30
 8009d3c:	9208      	str	r2, [sp, #32]
 8009d3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d40:	920c      	str	r2, [sp, #48]	; 0x30
 8009d42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d44:	1c57      	adds	r7, r2, #1
 8009d46:	9715      	str	r7, [sp, #84]	; 0x54
 8009d48:	7852      	ldrb	r2, [r2, #1]
 8009d4a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009d4e:	f1be 0f09 	cmp.w	lr, #9
 8009d52:	d938      	bls.n	8009dc6 <_strtod_l+0x33e>
 8009d54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d56:	1a7f      	subs	r7, r7, r1
 8009d58:	2f08      	cmp	r7, #8
 8009d5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009d5e:	dc03      	bgt.n	8009d68 <_strtod_l+0x2e0>
 8009d60:	9908      	ldr	r1, [sp, #32]
 8009d62:	428f      	cmp	r7, r1
 8009d64:	bfa8      	it	ge
 8009d66:	460f      	movge	r7, r1
 8009d68:	f1bc 0f00 	cmp.w	ip, #0
 8009d6c:	d000      	beq.n	8009d70 <_strtod_l+0x2e8>
 8009d6e:	427f      	negs	r7, r7
 8009d70:	2e00      	cmp	r6, #0
 8009d72:	d14f      	bne.n	8009e14 <_strtod_l+0x38c>
 8009d74:	9904      	ldr	r1, [sp, #16]
 8009d76:	4301      	orrs	r1, r0
 8009d78:	f47f aec1 	bne.w	8009afe <_strtod_l+0x76>
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f47f aedb 	bne.w	8009b38 <_strtod_l+0xb0>
 8009d82:	2a69      	cmp	r2, #105	; 0x69
 8009d84:	d029      	beq.n	8009dda <_strtod_l+0x352>
 8009d86:	dc26      	bgt.n	8009dd6 <_strtod_l+0x34e>
 8009d88:	2a49      	cmp	r2, #73	; 0x49
 8009d8a:	d026      	beq.n	8009dda <_strtod_l+0x352>
 8009d8c:	2a4e      	cmp	r2, #78	; 0x4e
 8009d8e:	f47f aed3 	bne.w	8009b38 <_strtod_l+0xb0>
 8009d92:	499b      	ldr	r1, [pc, #620]	; (800a000 <_strtod_l+0x578>)
 8009d94:	a815      	add	r0, sp, #84	; 0x54
 8009d96:	f001 fbdf 	bl	800b558 <__match>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f43f aecc 	beq.w	8009b38 <_strtod_l+0xb0>
 8009da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b28      	cmp	r3, #40	; 0x28
 8009da6:	d12f      	bne.n	8009e08 <_strtod_l+0x380>
 8009da8:	4996      	ldr	r1, [pc, #600]	; (800a004 <_strtod_l+0x57c>)
 8009daa:	aa18      	add	r2, sp, #96	; 0x60
 8009dac:	a815      	add	r0, sp, #84	; 0x54
 8009dae:	f001 fbe7 	bl	800b580 <__hexnan>
 8009db2:	2805      	cmp	r0, #5
 8009db4:	d128      	bne.n	8009e08 <_strtod_l+0x380>
 8009db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009db8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009dbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009dc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009dc4:	e69b      	b.n	8009afe <_strtod_l+0x76>
 8009dc6:	9f08      	ldr	r7, [sp, #32]
 8009dc8:	210a      	movs	r1, #10
 8009dca:	fb01 2107 	mla	r1, r1, r7, r2
 8009dce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009dd2:	9208      	str	r2, [sp, #32]
 8009dd4:	e7b5      	b.n	8009d42 <_strtod_l+0x2ba>
 8009dd6:	2a6e      	cmp	r2, #110	; 0x6e
 8009dd8:	e7d9      	b.n	8009d8e <_strtod_l+0x306>
 8009dda:	498b      	ldr	r1, [pc, #556]	; (800a008 <_strtod_l+0x580>)
 8009ddc:	a815      	add	r0, sp, #84	; 0x54
 8009dde:	f001 fbbb 	bl	800b558 <__match>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f43f aea8 	beq.w	8009b38 <_strtod_l+0xb0>
 8009de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dea:	4988      	ldr	r1, [pc, #544]	; (800a00c <_strtod_l+0x584>)
 8009dec:	3b01      	subs	r3, #1
 8009dee:	a815      	add	r0, sp, #84	; 0x54
 8009df0:	9315      	str	r3, [sp, #84]	; 0x54
 8009df2:	f001 fbb1 	bl	800b558 <__match>
 8009df6:	b910      	cbnz	r0, 8009dfe <_strtod_l+0x376>
 8009df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	9315      	str	r3, [sp, #84]	; 0x54
 8009dfe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a01c <_strtod_l+0x594>
 8009e02:	f04f 0800 	mov.w	r8, #0
 8009e06:	e67a      	b.n	8009afe <_strtod_l+0x76>
 8009e08:	4881      	ldr	r0, [pc, #516]	; (800a010 <_strtod_l+0x588>)
 8009e0a:	f001 f8c1 	bl	800af90 <nan>
 8009e0e:	ec59 8b10 	vmov	r8, r9, d0
 8009e12:	e674      	b.n	8009afe <_strtod_l+0x76>
 8009e14:	9b05      	ldr	r3, [sp, #20]
 8009e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e18:	1afb      	subs	r3, r7, r3
 8009e1a:	f1bb 0f00 	cmp.w	fp, #0
 8009e1e:	bf08      	it	eq
 8009e20:	46b3      	moveq	fp, r6
 8009e22:	2e10      	cmp	r6, #16
 8009e24:	9308      	str	r3, [sp, #32]
 8009e26:	4635      	mov	r5, r6
 8009e28:	bfa8      	it	ge
 8009e2a:	2510      	movge	r5, #16
 8009e2c:	f7f6 fb72 	bl	8000514 <__aeabi_ui2d>
 8009e30:	2e09      	cmp	r6, #9
 8009e32:	4680      	mov	r8, r0
 8009e34:	4689      	mov	r9, r1
 8009e36:	dd13      	ble.n	8009e60 <_strtod_l+0x3d8>
 8009e38:	4b76      	ldr	r3, [pc, #472]	; (800a014 <_strtod_l+0x58c>)
 8009e3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009e3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009e42:	f7f6 fbe1 	bl	8000608 <__aeabi_dmul>
 8009e46:	4680      	mov	r8, r0
 8009e48:	4650      	mov	r0, sl
 8009e4a:	4689      	mov	r9, r1
 8009e4c:	f7f6 fb62 	bl	8000514 <__aeabi_ui2d>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4640      	mov	r0, r8
 8009e56:	4649      	mov	r1, r9
 8009e58:	f7f6 fa20 	bl	800029c <__adddf3>
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	4689      	mov	r9, r1
 8009e60:	2e0f      	cmp	r6, #15
 8009e62:	dc38      	bgt.n	8009ed6 <_strtod_l+0x44e>
 8009e64:	9b08      	ldr	r3, [sp, #32]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f43f ae49 	beq.w	8009afe <_strtod_l+0x76>
 8009e6c:	dd24      	ble.n	8009eb8 <_strtod_l+0x430>
 8009e6e:	2b16      	cmp	r3, #22
 8009e70:	dc0b      	bgt.n	8009e8a <_strtod_l+0x402>
 8009e72:	4968      	ldr	r1, [pc, #416]	; (800a014 <_strtod_l+0x58c>)
 8009e74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	464b      	mov	r3, r9
 8009e80:	f7f6 fbc2 	bl	8000608 <__aeabi_dmul>
 8009e84:	4680      	mov	r8, r0
 8009e86:	4689      	mov	r9, r1
 8009e88:	e639      	b.n	8009afe <_strtod_l+0x76>
 8009e8a:	9a08      	ldr	r2, [sp, #32]
 8009e8c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009e90:	4293      	cmp	r3, r2
 8009e92:	db20      	blt.n	8009ed6 <_strtod_l+0x44e>
 8009e94:	4c5f      	ldr	r4, [pc, #380]	; (800a014 <_strtod_l+0x58c>)
 8009e96:	f1c6 060f 	rsb	r6, r6, #15
 8009e9a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea6:	f7f6 fbaf 	bl	8000608 <__aeabi_dmul>
 8009eaa:	9b08      	ldr	r3, [sp, #32]
 8009eac:	1b9e      	subs	r6, r3, r6
 8009eae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009eb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009eb6:	e7e3      	b.n	8009e80 <_strtod_l+0x3f8>
 8009eb8:	9b08      	ldr	r3, [sp, #32]
 8009eba:	3316      	adds	r3, #22
 8009ebc:	db0b      	blt.n	8009ed6 <_strtod_l+0x44e>
 8009ebe:	9b05      	ldr	r3, [sp, #20]
 8009ec0:	1bdf      	subs	r7, r3, r7
 8009ec2:	4b54      	ldr	r3, [pc, #336]	; (800a014 <_strtod_l+0x58c>)
 8009ec4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 fcc4 	bl	800085c <__aeabi_ddiv>
 8009ed4:	e7d6      	b.n	8009e84 <_strtod_l+0x3fc>
 8009ed6:	9b08      	ldr	r3, [sp, #32]
 8009ed8:	1b75      	subs	r5, r6, r5
 8009eda:	441d      	add	r5, r3
 8009edc:	2d00      	cmp	r5, #0
 8009ede:	dd70      	ble.n	8009fc2 <_strtod_l+0x53a>
 8009ee0:	f015 030f 	ands.w	r3, r5, #15
 8009ee4:	d00a      	beq.n	8009efc <_strtod_l+0x474>
 8009ee6:	494b      	ldr	r1, [pc, #300]	; (800a014 <_strtod_l+0x58c>)
 8009ee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009eec:	4642      	mov	r2, r8
 8009eee:	464b      	mov	r3, r9
 8009ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ef4:	f7f6 fb88 	bl	8000608 <__aeabi_dmul>
 8009ef8:	4680      	mov	r8, r0
 8009efa:	4689      	mov	r9, r1
 8009efc:	f035 050f 	bics.w	r5, r5, #15
 8009f00:	d04d      	beq.n	8009f9e <_strtod_l+0x516>
 8009f02:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009f06:	dd22      	ble.n	8009f4e <_strtod_l+0x4c6>
 8009f08:	2500      	movs	r5, #0
 8009f0a:	46ab      	mov	fp, r5
 8009f0c:	9509      	str	r5, [sp, #36]	; 0x24
 8009f0e:	9505      	str	r5, [sp, #20]
 8009f10:	2322      	movs	r3, #34	; 0x22
 8009f12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a01c <_strtod_l+0x594>
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	f04f 0800 	mov.w	r8, #0
 8009f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f43f aded 	beq.w	8009afe <_strtod_l+0x76>
 8009f24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f26:	4620      	mov	r0, r4
 8009f28:	f7ff f924 	bl	8009174 <_Bfree>
 8009f2c:	9905      	ldr	r1, [sp, #20]
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f7ff f920 	bl	8009174 <_Bfree>
 8009f34:	4659      	mov	r1, fp
 8009f36:	4620      	mov	r0, r4
 8009f38:	f7ff f91c 	bl	8009174 <_Bfree>
 8009f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7ff f918 	bl	8009174 <_Bfree>
 8009f44:	4629      	mov	r1, r5
 8009f46:	4620      	mov	r0, r4
 8009f48:	f7ff f914 	bl	8009174 <_Bfree>
 8009f4c:	e5d7      	b.n	8009afe <_strtod_l+0x76>
 8009f4e:	4b32      	ldr	r3, [pc, #200]	; (800a018 <_strtod_l+0x590>)
 8009f50:	9304      	str	r3, [sp, #16]
 8009f52:	2300      	movs	r3, #0
 8009f54:	112d      	asrs	r5, r5, #4
 8009f56:	4640      	mov	r0, r8
 8009f58:	4649      	mov	r1, r9
 8009f5a:	469a      	mov	sl, r3
 8009f5c:	2d01      	cmp	r5, #1
 8009f5e:	dc21      	bgt.n	8009fa4 <_strtod_l+0x51c>
 8009f60:	b10b      	cbz	r3, 8009f66 <_strtod_l+0x4de>
 8009f62:	4680      	mov	r8, r0
 8009f64:	4689      	mov	r9, r1
 8009f66:	492c      	ldr	r1, [pc, #176]	; (800a018 <_strtod_l+0x590>)
 8009f68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009f6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f70:	4642      	mov	r2, r8
 8009f72:	464b      	mov	r3, r9
 8009f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f78:	f7f6 fb46 	bl	8000608 <__aeabi_dmul>
 8009f7c:	4b27      	ldr	r3, [pc, #156]	; (800a01c <_strtod_l+0x594>)
 8009f7e:	460a      	mov	r2, r1
 8009f80:	400b      	ands	r3, r1
 8009f82:	4927      	ldr	r1, [pc, #156]	; (800a020 <_strtod_l+0x598>)
 8009f84:	428b      	cmp	r3, r1
 8009f86:	4680      	mov	r8, r0
 8009f88:	d8be      	bhi.n	8009f08 <_strtod_l+0x480>
 8009f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009f8e:	428b      	cmp	r3, r1
 8009f90:	bf86      	itte	hi
 8009f92:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a024 <_strtod_l+0x59c>
 8009f96:	f04f 38ff 	movhi.w	r8, #4294967295
 8009f9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	e07b      	b.n	800a09c <_strtod_l+0x614>
 8009fa4:	07ea      	lsls	r2, r5, #31
 8009fa6:	d505      	bpl.n	8009fb4 <_strtod_l+0x52c>
 8009fa8:	9b04      	ldr	r3, [sp, #16]
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 fb2b 	bl	8000608 <__aeabi_dmul>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	9a04      	ldr	r2, [sp, #16]
 8009fb6:	3208      	adds	r2, #8
 8009fb8:	f10a 0a01 	add.w	sl, sl, #1
 8009fbc:	106d      	asrs	r5, r5, #1
 8009fbe:	9204      	str	r2, [sp, #16]
 8009fc0:	e7cc      	b.n	8009f5c <_strtod_l+0x4d4>
 8009fc2:	d0ec      	beq.n	8009f9e <_strtod_l+0x516>
 8009fc4:	426d      	negs	r5, r5
 8009fc6:	f015 020f 	ands.w	r2, r5, #15
 8009fca:	d00a      	beq.n	8009fe2 <_strtod_l+0x55a>
 8009fcc:	4b11      	ldr	r3, [pc, #68]	; (800a014 <_strtod_l+0x58c>)
 8009fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 fc3f 	bl	800085c <__aeabi_ddiv>
 8009fde:	4680      	mov	r8, r0
 8009fe0:	4689      	mov	r9, r1
 8009fe2:	112d      	asrs	r5, r5, #4
 8009fe4:	d0db      	beq.n	8009f9e <_strtod_l+0x516>
 8009fe6:	2d1f      	cmp	r5, #31
 8009fe8:	dd1e      	ble.n	800a028 <_strtod_l+0x5a0>
 8009fea:	2500      	movs	r5, #0
 8009fec:	46ab      	mov	fp, r5
 8009fee:	9509      	str	r5, [sp, #36]	; 0x24
 8009ff0:	9505      	str	r5, [sp, #20]
 8009ff2:	2322      	movs	r3, #34	; 0x22
 8009ff4:	f04f 0800 	mov.w	r8, #0
 8009ff8:	f04f 0900 	mov.w	r9, #0
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	e78d      	b.n	8009f1c <_strtod_l+0x494>
 800a000:	0800b97d 	.word	0x0800b97d
 800a004:	0800bba4 	.word	0x0800bba4
 800a008:	0800b975 	.word	0x0800b975
 800a00c:	0800b9ac 	.word	0x0800b9ac
 800a010:	0800bd35 	.word	0x0800bd35
 800a014:	0800bab8 	.word	0x0800bab8
 800a018:	0800ba90 	.word	0x0800ba90
 800a01c:	7ff00000 	.word	0x7ff00000
 800a020:	7ca00000 	.word	0x7ca00000
 800a024:	7fefffff 	.word	0x7fefffff
 800a028:	f015 0310 	ands.w	r3, r5, #16
 800a02c:	bf18      	it	ne
 800a02e:	236a      	movne	r3, #106	; 0x6a
 800a030:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a3d4 <_strtod_l+0x94c>
 800a034:	9304      	str	r3, [sp, #16]
 800a036:	4640      	mov	r0, r8
 800a038:	4649      	mov	r1, r9
 800a03a:	2300      	movs	r3, #0
 800a03c:	07ea      	lsls	r2, r5, #31
 800a03e:	d504      	bpl.n	800a04a <_strtod_l+0x5c2>
 800a040:	e9da 2300 	ldrd	r2, r3, [sl]
 800a044:	f7f6 fae0 	bl	8000608 <__aeabi_dmul>
 800a048:	2301      	movs	r3, #1
 800a04a:	106d      	asrs	r5, r5, #1
 800a04c:	f10a 0a08 	add.w	sl, sl, #8
 800a050:	d1f4      	bne.n	800a03c <_strtod_l+0x5b4>
 800a052:	b10b      	cbz	r3, 800a058 <_strtod_l+0x5d0>
 800a054:	4680      	mov	r8, r0
 800a056:	4689      	mov	r9, r1
 800a058:	9b04      	ldr	r3, [sp, #16]
 800a05a:	b1bb      	cbz	r3, 800a08c <_strtod_l+0x604>
 800a05c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a060:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a064:	2b00      	cmp	r3, #0
 800a066:	4649      	mov	r1, r9
 800a068:	dd10      	ble.n	800a08c <_strtod_l+0x604>
 800a06a:	2b1f      	cmp	r3, #31
 800a06c:	f340 811e 	ble.w	800a2ac <_strtod_l+0x824>
 800a070:	2b34      	cmp	r3, #52	; 0x34
 800a072:	bfde      	ittt	le
 800a074:	f04f 33ff 	movle.w	r3, #4294967295
 800a078:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a07c:	4093      	lslle	r3, r2
 800a07e:	f04f 0800 	mov.w	r8, #0
 800a082:	bfcc      	ite	gt
 800a084:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a088:	ea03 0901 	andle.w	r9, r3, r1
 800a08c:	2200      	movs	r2, #0
 800a08e:	2300      	movs	r3, #0
 800a090:	4640      	mov	r0, r8
 800a092:	4649      	mov	r1, r9
 800a094:	f7f6 fd20 	bl	8000ad8 <__aeabi_dcmpeq>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d1a6      	bne.n	8009fea <_strtod_l+0x562>
 800a09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0a2:	4633      	mov	r3, r6
 800a0a4:	465a      	mov	r2, fp
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff f8cc 	bl	8009244 <__s2b>
 800a0ac:	9009      	str	r0, [sp, #36]	; 0x24
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f43f af2a 	beq.w	8009f08 <_strtod_l+0x480>
 800a0b4:	9a08      	ldr	r2, [sp, #32]
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	2a00      	cmp	r2, #0
 800a0ba:	eba3 0307 	sub.w	r3, r3, r7
 800a0be:	bfa8      	it	ge
 800a0c0:	2300      	movge	r3, #0
 800a0c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a0c4:	2500      	movs	r5, #0
 800a0c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a0ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a0cc:	46ab      	mov	fp, r5
 800a0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	6859      	ldr	r1, [r3, #4]
 800a0d4:	f7ff f80e 	bl	80090f4 <_Balloc>
 800a0d8:	9005      	str	r0, [sp, #20]
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f43f af18 	beq.w	8009f10 <_strtod_l+0x488>
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	691a      	ldr	r2, [r3, #16]
 800a0e4:	3202      	adds	r2, #2
 800a0e6:	f103 010c 	add.w	r1, r3, #12
 800a0ea:	0092      	lsls	r2, r2, #2
 800a0ec:	300c      	adds	r0, #12
 800a0ee:	f7fe f870 	bl	80081d2 <memcpy>
 800a0f2:	ec49 8b10 	vmov	d0, r8, r9
 800a0f6:	aa18      	add	r2, sp, #96	; 0x60
 800a0f8:	a917      	add	r1, sp, #92	; 0x5c
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f7ff fbd6 	bl	80098ac <__d2b>
 800a100:	ec49 8b18 	vmov	d8, r8, r9
 800a104:	9016      	str	r0, [sp, #88]	; 0x58
 800a106:	2800      	cmp	r0, #0
 800a108:	f43f af02 	beq.w	8009f10 <_strtod_l+0x488>
 800a10c:	2101      	movs	r1, #1
 800a10e:	4620      	mov	r0, r4
 800a110:	f7ff f930 	bl	8009374 <__i2b>
 800a114:	4683      	mov	fp, r0
 800a116:	2800      	cmp	r0, #0
 800a118:	f43f aefa 	beq.w	8009f10 <_strtod_l+0x488>
 800a11c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a11e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a120:	2e00      	cmp	r6, #0
 800a122:	bfab      	itete	ge
 800a124:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a126:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a128:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a12a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a12e:	bfac      	ite	ge
 800a130:	eb06 0a03 	addge.w	sl, r6, r3
 800a134:	1b9f      	sublt	r7, r3, r6
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	1af6      	subs	r6, r6, r3
 800a13a:	4416      	add	r6, r2
 800a13c:	4ba0      	ldr	r3, [pc, #640]	; (800a3c0 <_strtod_l+0x938>)
 800a13e:	3e01      	subs	r6, #1
 800a140:	429e      	cmp	r6, r3
 800a142:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a146:	f280 80c4 	bge.w	800a2d2 <_strtod_l+0x84a>
 800a14a:	1b9b      	subs	r3, r3, r6
 800a14c:	2b1f      	cmp	r3, #31
 800a14e:	eba2 0203 	sub.w	r2, r2, r3
 800a152:	f04f 0101 	mov.w	r1, #1
 800a156:	f300 80b0 	bgt.w	800a2ba <_strtod_l+0x832>
 800a15a:	fa01 f303 	lsl.w	r3, r1, r3
 800a15e:	930e      	str	r3, [sp, #56]	; 0x38
 800a160:	2300      	movs	r3, #0
 800a162:	930d      	str	r3, [sp, #52]	; 0x34
 800a164:	eb0a 0602 	add.w	r6, sl, r2
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	45b2      	cmp	sl, r6
 800a16c:	4417      	add	r7, r2
 800a16e:	441f      	add	r7, r3
 800a170:	4653      	mov	r3, sl
 800a172:	bfa8      	it	ge
 800a174:	4633      	movge	r3, r6
 800a176:	42bb      	cmp	r3, r7
 800a178:	bfa8      	it	ge
 800a17a:	463b      	movge	r3, r7
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfc2      	ittt	gt
 800a180:	1af6      	subgt	r6, r6, r3
 800a182:	1aff      	subgt	r7, r7, r3
 800a184:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	dd17      	ble.n	800a1be <_strtod_l+0x736>
 800a18e:	4659      	mov	r1, fp
 800a190:	461a      	mov	r2, r3
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff f9ae 	bl	80094f4 <__pow5mult>
 800a198:	4683      	mov	fp, r0
 800a19a:	2800      	cmp	r0, #0
 800a19c:	f43f aeb8 	beq.w	8009f10 <_strtod_l+0x488>
 800a1a0:	4601      	mov	r1, r0
 800a1a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f7ff f8fb 	bl	80093a0 <__multiply>
 800a1aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f43f aeaf 	beq.w	8009f10 <_strtod_l+0x488>
 800a1b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f7fe ffdd 	bl	8009174 <_Bfree>
 800a1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1bc:	9316      	str	r3, [sp, #88]	; 0x58
 800a1be:	2e00      	cmp	r6, #0
 800a1c0:	f300 808c 	bgt.w	800a2dc <_strtod_l+0x854>
 800a1c4:	9b08      	ldr	r3, [sp, #32]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	dd08      	ble.n	800a1dc <_strtod_l+0x754>
 800a1ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1cc:	9905      	ldr	r1, [sp, #20]
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f7ff f990 	bl	80094f4 <__pow5mult>
 800a1d4:	9005      	str	r0, [sp, #20]
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f43f ae9a 	beq.w	8009f10 <_strtod_l+0x488>
 800a1dc:	2f00      	cmp	r7, #0
 800a1de:	dd08      	ble.n	800a1f2 <_strtod_l+0x76a>
 800a1e0:	9905      	ldr	r1, [sp, #20]
 800a1e2:	463a      	mov	r2, r7
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f7ff f9df 	bl	80095a8 <__lshift>
 800a1ea:	9005      	str	r0, [sp, #20]
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f43f ae8f 	beq.w	8009f10 <_strtod_l+0x488>
 800a1f2:	f1ba 0f00 	cmp.w	sl, #0
 800a1f6:	dd08      	ble.n	800a20a <_strtod_l+0x782>
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7ff f9d3 	bl	80095a8 <__lshift>
 800a202:	4683      	mov	fp, r0
 800a204:	2800      	cmp	r0, #0
 800a206:	f43f ae83 	beq.w	8009f10 <_strtod_l+0x488>
 800a20a:	9a05      	ldr	r2, [sp, #20]
 800a20c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a20e:	4620      	mov	r0, r4
 800a210:	f7ff fa52 	bl	80096b8 <__mdiff>
 800a214:	4605      	mov	r5, r0
 800a216:	2800      	cmp	r0, #0
 800a218:	f43f ae7a 	beq.w	8009f10 <_strtod_l+0x488>
 800a21c:	68c3      	ldr	r3, [r0, #12]
 800a21e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a220:	2300      	movs	r3, #0
 800a222:	60c3      	str	r3, [r0, #12]
 800a224:	4659      	mov	r1, fp
 800a226:	f7ff fa2b 	bl	8009680 <__mcmp>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	da60      	bge.n	800a2f0 <_strtod_l+0x868>
 800a22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a230:	ea53 0308 	orrs.w	r3, r3, r8
 800a234:	f040 8084 	bne.w	800a340 <_strtod_l+0x8b8>
 800a238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d17f      	bne.n	800a340 <_strtod_l+0x8b8>
 800a240:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a244:	0d1b      	lsrs	r3, r3, #20
 800a246:	051b      	lsls	r3, r3, #20
 800a248:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a24c:	d978      	bls.n	800a340 <_strtod_l+0x8b8>
 800a24e:	696b      	ldr	r3, [r5, #20]
 800a250:	b913      	cbnz	r3, 800a258 <_strtod_l+0x7d0>
 800a252:	692b      	ldr	r3, [r5, #16]
 800a254:	2b01      	cmp	r3, #1
 800a256:	dd73      	ble.n	800a340 <_strtod_l+0x8b8>
 800a258:	4629      	mov	r1, r5
 800a25a:	2201      	movs	r2, #1
 800a25c:	4620      	mov	r0, r4
 800a25e:	f7ff f9a3 	bl	80095a8 <__lshift>
 800a262:	4659      	mov	r1, fp
 800a264:	4605      	mov	r5, r0
 800a266:	f7ff fa0b 	bl	8009680 <__mcmp>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	dd68      	ble.n	800a340 <_strtod_l+0x8b8>
 800a26e:	9904      	ldr	r1, [sp, #16]
 800a270:	4a54      	ldr	r2, [pc, #336]	; (800a3c4 <_strtod_l+0x93c>)
 800a272:	464b      	mov	r3, r9
 800a274:	2900      	cmp	r1, #0
 800a276:	f000 8084 	beq.w	800a382 <_strtod_l+0x8fa>
 800a27a:	ea02 0109 	and.w	r1, r2, r9
 800a27e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a282:	dc7e      	bgt.n	800a382 <_strtod_l+0x8fa>
 800a284:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a288:	f77f aeb3 	ble.w	8009ff2 <_strtod_l+0x56a>
 800a28c:	4b4e      	ldr	r3, [pc, #312]	; (800a3c8 <_strtod_l+0x940>)
 800a28e:	4640      	mov	r0, r8
 800a290:	4649      	mov	r1, r9
 800a292:	2200      	movs	r2, #0
 800a294:	f7f6 f9b8 	bl	8000608 <__aeabi_dmul>
 800a298:	4b4a      	ldr	r3, [pc, #296]	; (800a3c4 <_strtod_l+0x93c>)
 800a29a:	400b      	ands	r3, r1
 800a29c:	4680      	mov	r8, r0
 800a29e:	4689      	mov	r9, r1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f47f ae3f 	bne.w	8009f24 <_strtod_l+0x49c>
 800a2a6:	2322      	movs	r3, #34	; 0x22
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	e63b      	b.n	8009f24 <_strtod_l+0x49c>
 800a2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b4:	ea03 0808 	and.w	r8, r3, r8
 800a2b8:	e6e8      	b.n	800a08c <_strtod_l+0x604>
 800a2ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a2be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a2c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a2c6:	36e2      	adds	r6, #226	; 0xe2
 800a2c8:	fa01 f306 	lsl.w	r3, r1, r6
 800a2cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a2d0:	e748      	b.n	800a164 <_strtod_l+0x6dc>
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a2da:	e743      	b.n	800a164 <_strtod_l+0x6dc>
 800a2dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a2de:	4632      	mov	r2, r6
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f7ff f961 	bl	80095a8 <__lshift>
 800a2e6:	9016      	str	r0, [sp, #88]	; 0x58
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	f47f af6b 	bne.w	800a1c4 <_strtod_l+0x73c>
 800a2ee:	e60f      	b.n	8009f10 <_strtod_l+0x488>
 800a2f0:	46ca      	mov	sl, r9
 800a2f2:	d171      	bne.n	800a3d8 <_strtod_l+0x950>
 800a2f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2fa:	b352      	cbz	r2, 800a352 <_strtod_l+0x8ca>
 800a2fc:	4a33      	ldr	r2, [pc, #204]	; (800a3cc <_strtod_l+0x944>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d12a      	bne.n	800a358 <_strtod_l+0x8d0>
 800a302:	9b04      	ldr	r3, [sp, #16]
 800a304:	4641      	mov	r1, r8
 800a306:	b1fb      	cbz	r3, 800a348 <_strtod_l+0x8c0>
 800a308:	4b2e      	ldr	r3, [pc, #184]	; (800a3c4 <_strtod_l+0x93c>)
 800a30a:	ea09 0303 	and.w	r3, r9, r3
 800a30e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a312:	f04f 32ff 	mov.w	r2, #4294967295
 800a316:	d81a      	bhi.n	800a34e <_strtod_l+0x8c6>
 800a318:	0d1b      	lsrs	r3, r3, #20
 800a31a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a31e:	fa02 f303 	lsl.w	r3, r2, r3
 800a322:	4299      	cmp	r1, r3
 800a324:	d118      	bne.n	800a358 <_strtod_l+0x8d0>
 800a326:	4b2a      	ldr	r3, [pc, #168]	; (800a3d0 <_strtod_l+0x948>)
 800a328:	459a      	cmp	sl, r3
 800a32a:	d102      	bne.n	800a332 <_strtod_l+0x8aa>
 800a32c:	3101      	adds	r1, #1
 800a32e:	f43f adef 	beq.w	8009f10 <_strtod_l+0x488>
 800a332:	4b24      	ldr	r3, [pc, #144]	; (800a3c4 <_strtod_l+0x93c>)
 800a334:	ea0a 0303 	and.w	r3, sl, r3
 800a338:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a33c:	f04f 0800 	mov.w	r8, #0
 800a340:	9b04      	ldr	r3, [sp, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1a2      	bne.n	800a28c <_strtod_l+0x804>
 800a346:	e5ed      	b.n	8009f24 <_strtod_l+0x49c>
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	e7e9      	b.n	800a322 <_strtod_l+0x89a>
 800a34e:	4613      	mov	r3, r2
 800a350:	e7e7      	b.n	800a322 <_strtod_l+0x89a>
 800a352:	ea53 0308 	orrs.w	r3, r3, r8
 800a356:	d08a      	beq.n	800a26e <_strtod_l+0x7e6>
 800a358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a35a:	b1e3      	cbz	r3, 800a396 <_strtod_l+0x90e>
 800a35c:	ea13 0f0a 	tst.w	r3, sl
 800a360:	d0ee      	beq.n	800a340 <_strtod_l+0x8b8>
 800a362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a364:	9a04      	ldr	r2, [sp, #16]
 800a366:	4640      	mov	r0, r8
 800a368:	4649      	mov	r1, r9
 800a36a:	b1c3      	cbz	r3, 800a39e <_strtod_l+0x916>
 800a36c:	f7ff fb6f 	bl	8009a4e <sulp>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	ec51 0b18 	vmov	r0, r1, d8
 800a378:	f7f5 ff90 	bl	800029c <__adddf3>
 800a37c:	4680      	mov	r8, r0
 800a37e:	4689      	mov	r9, r1
 800a380:	e7de      	b.n	800a340 <_strtod_l+0x8b8>
 800a382:	4013      	ands	r3, r2
 800a384:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a388:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a38c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a390:	f04f 38ff 	mov.w	r8, #4294967295
 800a394:	e7d4      	b.n	800a340 <_strtod_l+0x8b8>
 800a396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a398:	ea13 0f08 	tst.w	r3, r8
 800a39c:	e7e0      	b.n	800a360 <_strtod_l+0x8d8>
 800a39e:	f7ff fb56 	bl	8009a4e <sulp>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	ec51 0b18 	vmov	r0, r1, d8
 800a3aa:	f7f5 ff75 	bl	8000298 <__aeabi_dsub>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4680      	mov	r8, r0
 800a3b4:	4689      	mov	r9, r1
 800a3b6:	f7f6 fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d0c0      	beq.n	800a340 <_strtod_l+0x8b8>
 800a3be:	e618      	b.n	8009ff2 <_strtod_l+0x56a>
 800a3c0:	fffffc02 	.word	0xfffffc02
 800a3c4:	7ff00000 	.word	0x7ff00000
 800a3c8:	39500000 	.word	0x39500000
 800a3cc:	000fffff 	.word	0x000fffff
 800a3d0:	7fefffff 	.word	0x7fefffff
 800a3d4:	0800bbb8 	.word	0x0800bbb8
 800a3d8:	4659      	mov	r1, fp
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f7ff fac0 	bl	8009960 <__ratio>
 800a3e0:	ec57 6b10 	vmov	r6, r7, d0
 800a3e4:	ee10 0a10 	vmov	r0, s0
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	f7f6 fb86 	bl	8000b00 <__aeabi_dcmple>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d071      	beq.n	800a4dc <_strtod_l+0xa54>
 800a3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d17c      	bne.n	800a4f8 <_strtod_l+0xa70>
 800a3fe:	f1b8 0f00 	cmp.w	r8, #0
 800a402:	d15a      	bne.n	800a4ba <_strtod_l+0xa32>
 800a404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d15d      	bne.n	800a4c8 <_strtod_l+0xa40>
 800a40c:	4b90      	ldr	r3, [pc, #576]	; (800a650 <_strtod_l+0xbc8>)
 800a40e:	2200      	movs	r2, #0
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f6 fb6a 	bl	8000aec <__aeabi_dcmplt>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d15c      	bne.n	800a4d6 <_strtod_l+0xa4e>
 800a41c:	4630      	mov	r0, r6
 800a41e:	4639      	mov	r1, r7
 800a420:	4b8c      	ldr	r3, [pc, #560]	; (800a654 <_strtod_l+0xbcc>)
 800a422:	2200      	movs	r2, #0
 800a424:	f7f6 f8f0 	bl	8000608 <__aeabi_dmul>
 800a428:	4606      	mov	r6, r0
 800a42a:	460f      	mov	r7, r1
 800a42c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a430:	9606      	str	r6, [sp, #24]
 800a432:	9307      	str	r3, [sp, #28]
 800a434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a438:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a43c:	4b86      	ldr	r3, [pc, #536]	; (800a658 <_strtod_l+0xbd0>)
 800a43e:	ea0a 0303 	and.w	r3, sl, r3
 800a442:	930d      	str	r3, [sp, #52]	; 0x34
 800a444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a446:	4b85      	ldr	r3, [pc, #532]	; (800a65c <_strtod_l+0xbd4>)
 800a448:	429a      	cmp	r2, r3
 800a44a:	f040 8090 	bne.w	800a56e <_strtod_l+0xae6>
 800a44e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a452:	ec49 8b10 	vmov	d0, r8, r9
 800a456:	f7ff f9b9 	bl	80097cc <__ulp>
 800a45a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a45e:	ec51 0b10 	vmov	r0, r1, d0
 800a462:	f7f6 f8d1 	bl	8000608 <__aeabi_dmul>
 800a466:	4642      	mov	r2, r8
 800a468:	464b      	mov	r3, r9
 800a46a:	f7f5 ff17 	bl	800029c <__adddf3>
 800a46e:	460b      	mov	r3, r1
 800a470:	4979      	ldr	r1, [pc, #484]	; (800a658 <_strtod_l+0xbd0>)
 800a472:	4a7b      	ldr	r2, [pc, #492]	; (800a660 <_strtod_l+0xbd8>)
 800a474:	4019      	ands	r1, r3
 800a476:	4291      	cmp	r1, r2
 800a478:	4680      	mov	r8, r0
 800a47a:	d944      	bls.n	800a506 <_strtod_l+0xa7e>
 800a47c:	ee18 2a90 	vmov	r2, s17
 800a480:	4b78      	ldr	r3, [pc, #480]	; (800a664 <_strtod_l+0xbdc>)
 800a482:	429a      	cmp	r2, r3
 800a484:	d104      	bne.n	800a490 <_strtod_l+0xa08>
 800a486:	ee18 3a10 	vmov	r3, s16
 800a48a:	3301      	adds	r3, #1
 800a48c:	f43f ad40 	beq.w	8009f10 <_strtod_l+0x488>
 800a490:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a664 <_strtod_l+0xbdc>
 800a494:	f04f 38ff 	mov.w	r8, #4294967295
 800a498:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7fe fe6a 	bl	8009174 <_Bfree>
 800a4a0:	9905      	ldr	r1, [sp, #20]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f7fe fe66 	bl	8009174 <_Bfree>
 800a4a8:	4659      	mov	r1, fp
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f7fe fe62 	bl	8009174 <_Bfree>
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f7fe fe5e 	bl	8009174 <_Bfree>
 800a4b8:	e609      	b.n	800a0ce <_strtod_l+0x646>
 800a4ba:	f1b8 0f01 	cmp.w	r8, #1
 800a4be:	d103      	bne.n	800a4c8 <_strtod_l+0xa40>
 800a4c0:	f1b9 0f00 	cmp.w	r9, #0
 800a4c4:	f43f ad95 	beq.w	8009ff2 <_strtod_l+0x56a>
 800a4c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a620 <_strtod_l+0xb98>
 800a4cc:	4f60      	ldr	r7, [pc, #384]	; (800a650 <_strtod_l+0xbc8>)
 800a4ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4d2:	2600      	movs	r6, #0
 800a4d4:	e7ae      	b.n	800a434 <_strtod_l+0x9ac>
 800a4d6:	4f5f      	ldr	r7, [pc, #380]	; (800a654 <_strtod_l+0xbcc>)
 800a4d8:	2600      	movs	r6, #0
 800a4da:	e7a7      	b.n	800a42c <_strtod_l+0x9a4>
 800a4dc:	4b5d      	ldr	r3, [pc, #372]	; (800a654 <_strtod_l+0xbcc>)
 800a4de:	4630      	mov	r0, r6
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f7f6 f890 	bl	8000608 <__aeabi_dmul>
 800a4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460f      	mov	r7, r1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d09c      	beq.n	800a42c <_strtod_l+0x9a4>
 800a4f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a4f6:	e79d      	b.n	800a434 <_strtod_l+0x9ac>
 800a4f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a628 <_strtod_l+0xba0>
 800a4fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a500:	ec57 6b17 	vmov	r6, r7, d7
 800a504:	e796      	b.n	800a434 <_strtod_l+0x9ac>
 800a506:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	46ca      	mov	sl, r9
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1c2      	bne.n	800a498 <_strtod_l+0xa10>
 800a512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a518:	0d1b      	lsrs	r3, r3, #20
 800a51a:	051b      	lsls	r3, r3, #20
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d1bb      	bne.n	800a498 <_strtod_l+0xa10>
 800a520:	4630      	mov	r0, r6
 800a522:	4639      	mov	r1, r7
 800a524:	f7f6 fbd0 	bl	8000cc8 <__aeabi_d2lz>
 800a528:	f7f6 f840 	bl	80005ac <__aeabi_l2d>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f5 feb0 	bl	8000298 <__aeabi_dsub>
 800a538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a53a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a53e:	ea43 0308 	orr.w	r3, r3, r8
 800a542:	4313      	orrs	r3, r2
 800a544:	4606      	mov	r6, r0
 800a546:	460f      	mov	r7, r1
 800a548:	d054      	beq.n	800a5f4 <_strtod_l+0xb6c>
 800a54a:	a339      	add	r3, pc, #228	; (adr r3, 800a630 <_strtod_l+0xba8>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f6 facc 	bl	8000aec <__aeabi_dcmplt>
 800a554:	2800      	cmp	r0, #0
 800a556:	f47f ace5 	bne.w	8009f24 <_strtod_l+0x49c>
 800a55a:	a337      	add	r3, pc, #220	; (adr r3, 800a638 <_strtod_l+0xbb0>)
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	4630      	mov	r0, r6
 800a562:	4639      	mov	r1, r7
 800a564:	f7f6 fae0 	bl	8000b28 <__aeabi_dcmpgt>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d095      	beq.n	800a498 <_strtod_l+0xa10>
 800a56c:	e4da      	b.n	8009f24 <_strtod_l+0x49c>
 800a56e:	9b04      	ldr	r3, [sp, #16]
 800a570:	b333      	cbz	r3, 800a5c0 <_strtod_l+0xb38>
 800a572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a574:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a578:	d822      	bhi.n	800a5c0 <_strtod_l+0xb38>
 800a57a:	a331      	add	r3, pc, #196	; (adr r3, 800a640 <_strtod_l+0xbb8>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	4630      	mov	r0, r6
 800a582:	4639      	mov	r1, r7
 800a584:	f7f6 fabc 	bl	8000b00 <__aeabi_dcmple>
 800a588:	b1a0      	cbz	r0, 800a5b4 <_strtod_l+0xb2c>
 800a58a:	4639      	mov	r1, r7
 800a58c:	4630      	mov	r0, r6
 800a58e:	f7f6 fb13 	bl	8000bb8 <__aeabi_d2uiz>
 800a592:	2801      	cmp	r0, #1
 800a594:	bf38      	it	cc
 800a596:	2001      	movcc	r0, #1
 800a598:	f7f5 ffbc 	bl	8000514 <__aeabi_ui2d>
 800a59c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	bb23      	cbnz	r3, 800a5ee <_strtod_l+0xb66>
 800a5a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5a8:	9010      	str	r0, [sp, #64]	; 0x40
 800a5aa:	9311      	str	r3, [sp, #68]	; 0x44
 800a5ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a5b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a5bc:	1a9b      	subs	r3, r3, r2
 800a5be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a5c4:	eeb0 0a48 	vmov.f32	s0, s16
 800a5c8:	eef0 0a68 	vmov.f32	s1, s17
 800a5cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a5d0:	f7ff f8fc 	bl	80097cc <__ulp>
 800a5d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a5d8:	ec53 2b10 	vmov	r2, r3, d0
 800a5dc:	f7f6 f814 	bl	8000608 <__aeabi_dmul>
 800a5e0:	ec53 2b18 	vmov	r2, r3, d8
 800a5e4:	f7f5 fe5a 	bl	800029c <__adddf3>
 800a5e8:	4680      	mov	r8, r0
 800a5ea:	4689      	mov	r9, r1
 800a5ec:	e78d      	b.n	800a50a <_strtod_l+0xa82>
 800a5ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a5f2:	e7db      	b.n	800a5ac <_strtod_l+0xb24>
 800a5f4:	a314      	add	r3, pc, #80	; (adr r3, 800a648 <_strtod_l+0xbc0>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f7f6 fa77 	bl	8000aec <__aeabi_dcmplt>
 800a5fe:	e7b3      	b.n	800a568 <_strtod_l+0xae0>
 800a600:	2300      	movs	r3, #0
 800a602:	930a      	str	r3, [sp, #40]	; 0x28
 800a604:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	f7ff ba7c 	b.w	8009b06 <_strtod_l+0x7e>
 800a60e:	2a65      	cmp	r2, #101	; 0x65
 800a610:	f43f ab75 	beq.w	8009cfe <_strtod_l+0x276>
 800a614:	2a45      	cmp	r2, #69	; 0x45
 800a616:	f43f ab72 	beq.w	8009cfe <_strtod_l+0x276>
 800a61a:	2301      	movs	r3, #1
 800a61c:	f7ff bbaa 	b.w	8009d74 <_strtod_l+0x2ec>
 800a620:	00000000 	.word	0x00000000
 800a624:	bff00000 	.word	0xbff00000
 800a628:	00000000 	.word	0x00000000
 800a62c:	3ff00000 	.word	0x3ff00000
 800a630:	94a03595 	.word	0x94a03595
 800a634:	3fdfffff 	.word	0x3fdfffff
 800a638:	35afe535 	.word	0x35afe535
 800a63c:	3fe00000 	.word	0x3fe00000
 800a640:	ffc00000 	.word	0xffc00000
 800a644:	41dfffff 	.word	0x41dfffff
 800a648:	94a03595 	.word	0x94a03595
 800a64c:	3fcfffff 	.word	0x3fcfffff
 800a650:	3ff00000 	.word	0x3ff00000
 800a654:	3fe00000 	.word	0x3fe00000
 800a658:	7ff00000 	.word	0x7ff00000
 800a65c:	7fe00000 	.word	0x7fe00000
 800a660:	7c9fffff 	.word	0x7c9fffff
 800a664:	7fefffff 	.word	0x7fefffff

0800a668 <_strtod_r>:
 800a668:	4b01      	ldr	r3, [pc, #4]	; (800a670 <_strtod_r+0x8>)
 800a66a:	f7ff ba0d 	b.w	8009a88 <_strtod_l>
 800a66e:	bf00      	nop
 800a670:	2000006c 	.word	0x2000006c

0800a674 <_strtol_l.constprop.0>:
 800a674:	2b01      	cmp	r3, #1
 800a676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a67a:	d001      	beq.n	800a680 <_strtol_l.constprop.0+0xc>
 800a67c:	2b24      	cmp	r3, #36	; 0x24
 800a67e:	d906      	bls.n	800a68e <_strtol_l.constprop.0+0x1a>
 800a680:	f7fd fd7a 	bl	8008178 <__errno>
 800a684:	2316      	movs	r3, #22
 800a686:	6003      	str	r3, [r0, #0]
 800a688:	2000      	movs	r0, #0
 800a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a774 <_strtol_l.constprop.0+0x100>
 800a692:	460d      	mov	r5, r1
 800a694:	462e      	mov	r6, r5
 800a696:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a69a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a69e:	f017 0708 	ands.w	r7, r7, #8
 800a6a2:	d1f7      	bne.n	800a694 <_strtol_l.constprop.0+0x20>
 800a6a4:	2c2d      	cmp	r4, #45	; 0x2d
 800a6a6:	d132      	bne.n	800a70e <_strtol_l.constprop.0+0x9a>
 800a6a8:	782c      	ldrb	r4, [r5, #0]
 800a6aa:	2701      	movs	r7, #1
 800a6ac:	1cb5      	adds	r5, r6, #2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d05b      	beq.n	800a76a <_strtol_l.constprop.0+0xf6>
 800a6b2:	2b10      	cmp	r3, #16
 800a6b4:	d109      	bne.n	800a6ca <_strtol_l.constprop.0+0x56>
 800a6b6:	2c30      	cmp	r4, #48	; 0x30
 800a6b8:	d107      	bne.n	800a6ca <_strtol_l.constprop.0+0x56>
 800a6ba:	782c      	ldrb	r4, [r5, #0]
 800a6bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6c0:	2c58      	cmp	r4, #88	; 0x58
 800a6c2:	d14d      	bne.n	800a760 <_strtol_l.constprop.0+0xec>
 800a6c4:	786c      	ldrb	r4, [r5, #1]
 800a6c6:	2310      	movs	r3, #16
 800a6c8:	3502      	adds	r5, #2
 800a6ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a6ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6d2:	f04f 0e00 	mov.w	lr, #0
 800a6d6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a6da:	4676      	mov	r6, lr
 800a6dc:	fb03 8a19 	mls	sl, r3, r9, r8
 800a6e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a6e4:	f1bc 0f09 	cmp.w	ip, #9
 800a6e8:	d816      	bhi.n	800a718 <_strtol_l.constprop.0+0xa4>
 800a6ea:	4664      	mov	r4, ip
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	dd24      	ble.n	800a73a <_strtol_l.constprop.0+0xc6>
 800a6f0:	f1be 3fff 	cmp.w	lr, #4294967295
 800a6f4:	d008      	beq.n	800a708 <_strtol_l.constprop.0+0x94>
 800a6f6:	45b1      	cmp	r9, r6
 800a6f8:	d31c      	bcc.n	800a734 <_strtol_l.constprop.0+0xc0>
 800a6fa:	d101      	bne.n	800a700 <_strtol_l.constprop.0+0x8c>
 800a6fc:	45a2      	cmp	sl, r4
 800a6fe:	db19      	blt.n	800a734 <_strtol_l.constprop.0+0xc0>
 800a700:	fb06 4603 	mla	r6, r6, r3, r4
 800a704:	f04f 0e01 	mov.w	lr, #1
 800a708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a70c:	e7e8      	b.n	800a6e0 <_strtol_l.constprop.0+0x6c>
 800a70e:	2c2b      	cmp	r4, #43	; 0x2b
 800a710:	bf04      	itt	eq
 800a712:	782c      	ldrbeq	r4, [r5, #0]
 800a714:	1cb5      	addeq	r5, r6, #2
 800a716:	e7ca      	b.n	800a6ae <_strtol_l.constprop.0+0x3a>
 800a718:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a71c:	f1bc 0f19 	cmp.w	ip, #25
 800a720:	d801      	bhi.n	800a726 <_strtol_l.constprop.0+0xb2>
 800a722:	3c37      	subs	r4, #55	; 0x37
 800a724:	e7e2      	b.n	800a6ec <_strtol_l.constprop.0+0x78>
 800a726:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a72a:	f1bc 0f19 	cmp.w	ip, #25
 800a72e:	d804      	bhi.n	800a73a <_strtol_l.constprop.0+0xc6>
 800a730:	3c57      	subs	r4, #87	; 0x57
 800a732:	e7db      	b.n	800a6ec <_strtol_l.constprop.0+0x78>
 800a734:	f04f 3eff 	mov.w	lr, #4294967295
 800a738:	e7e6      	b.n	800a708 <_strtol_l.constprop.0+0x94>
 800a73a:	f1be 3fff 	cmp.w	lr, #4294967295
 800a73e:	d105      	bne.n	800a74c <_strtol_l.constprop.0+0xd8>
 800a740:	2322      	movs	r3, #34	; 0x22
 800a742:	6003      	str	r3, [r0, #0]
 800a744:	4646      	mov	r6, r8
 800a746:	b942      	cbnz	r2, 800a75a <_strtol_l.constprop.0+0xe6>
 800a748:	4630      	mov	r0, r6
 800a74a:	e79e      	b.n	800a68a <_strtol_l.constprop.0+0x16>
 800a74c:	b107      	cbz	r7, 800a750 <_strtol_l.constprop.0+0xdc>
 800a74e:	4276      	negs	r6, r6
 800a750:	2a00      	cmp	r2, #0
 800a752:	d0f9      	beq.n	800a748 <_strtol_l.constprop.0+0xd4>
 800a754:	f1be 0f00 	cmp.w	lr, #0
 800a758:	d000      	beq.n	800a75c <_strtol_l.constprop.0+0xe8>
 800a75a:	1e69      	subs	r1, r5, #1
 800a75c:	6011      	str	r1, [r2, #0]
 800a75e:	e7f3      	b.n	800a748 <_strtol_l.constprop.0+0xd4>
 800a760:	2430      	movs	r4, #48	; 0x30
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1b1      	bne.n	800a6ca <_strtol_l.constprop.0+0x56>
 800a766:	2308      	movs	r3, #8
 800a768:	e7af      	b.n	800a6ca <_strtol_l.constprop.0+0x56>
 800a76a:	2c30      	cmp	r4, #48	; 0x30
 800a76c:	d0a5      	beq.n	800a6ba <_strtol_l.constprop.0+0x46>
 800a76e:	230a      	movs	r3, #10
 800a770:	e7ab      	b.n	800a6ca <_strtol_l.constprop.0+0x56>
 800a772:	bf00      	nop
 800a774:	0800bbe1 	.word	0x0800bbe1

0800a778 <_strtol_r>:
 800a778:	f7ff bf7c 	b.w	800a674 <_strtol_l.constprop.0>

0800a77c <__ssputs_r>:
 800a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a780:	688e      	ldr	r6, [r1, #8]
 800a782:	461f      	mov	r7, r3
 800a784:	42be      	cmp	r6, r7
 800a786:	680b      	ldr	r3, [r1, #0]
 800a788:	4682      	mov	sl, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	4690      	mov	r8, r2
 800a78e:	d82c      	bhi.n	800a7ea <__ssputs_r+0x6e>
 800a790:	898a      	ldrh	r2, [r1, #12]
 800a792:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a796:	d026      	beq.n	800a7e6 <__ssputs_r+0x6a>
 800a798:	6965      	ldr	r5, [r4, #20]
 800a79a:	6909      	ldr	r1, [r1, #16]
 800a79c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7a0:	eba3 0901 	sub.w	r9, r3, r1
 800a7a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7a8:	1c7b      	adds	r3, r7, #1
 800a7aa:	444b      	add	r3, r9
 800a7ac:	106d      	asrs	r5, r5, #1
 800a7ae:	429d      	cmp	r5, r3
 800a7b0:	bf38      	it	cc
 800a7b2:	461d      	movcc	r5, r3
 800a7b4:	0553      	lsls	r3, r2, #21
 800a7b6:	d527      	bpl.n	800a808 <__ssputs_r+0x8c>
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7fe fc0f 	bl	8008fdc <_malloc_r>
 800a7be:	4606      	mov	r6, r0
 800a7c0:	b360      	cbz	r0, 800a81c <__ssputs_r+0xa0>
 800a7c2:	6921      	ldr	r1, [r4, #16]
 800a7c4:	464a      	mov	r2, r9
 800a7c6:	f7fd fd04 	bl	80081d2 <memcpy>
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d4:	81a3      	strh	r3, [r4, #12]
 800a7d6:	6126      	str	r6, [r4, #16]
 800a7d8:	6165      	str	r5, [r4, #20]
 800a7da:	444e      	add	r6, r9
 800a7dc:	eba5 0509 	sub.w	r5, r5, r9
 800a7e0:	6026      	str	r6, [r4, #0]
 800a7e2:	60a5      	str	r5, [r4, #8]
 800a7e4:	463e      	mov	r6, r7
 800a7e6:	42be      	cmp	r6, r7
 800a7e8:	d900      	bls.n	800a7ec <__ssputs_r+0x70>
 800a7ea:	463e      	mov	r6, r7
 800a7ec:	6820      	ldr	r0, [r4, #0]
 800a7ee:	4632      	mov	r2, r6
 800a7f0:	4641      	mov	r1, r8
 800a7f2:	f000 fb6f 	bl	800aed4 <memmove>
 800a7f6:	68a3      	ldr	r3, [r4, #8]
 800a7f8:	1b9b      	subs	r3, r3, r6
 800a7fa:	60a3      	str	r3, [r4, #8]
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	4433      	add	r3, r6
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	2000      	movs	r0, #0
 800a804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a808:	462a      	mov	r2, r5
 800a80a:	f000 ff66 	bl	800b6da <_realloc_r>
 800a80e:	4606      	mov	r6, r0
 800a810:	2800      	cmp	r0, #0
 800a812:	d1e0      	bne.n	800a7d6 <__ssputs_r+0x5a>
 800a814:	6921      	ldr	r1, [r4, #16]
 800a816:	4650      	mov	r0, sl
 800a818:	f7fe fb6c 	bl	8008ef4 <_free_r>
 800a81c:	230c      	movs	r3, #12
 800a81e:	f8ca 3000 	str.w	r3, [sl]
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a828:	81a3      	strh	r3, [r4, #12]
 800a82a:	f04f 30ff 	mov.w	r0, #4294967295
 800a82e:	e7e9      	b.n	800a804 <__ssputs_r+0x88>

0800a830 <_svfiprintf_r>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4698      	mov	r8, r3
 800a836:	898b      	ldrh	r3, [r1, #12]
 800a838:	061b      	lsls	r3, r3, #24
 800a83a:	b09d      	sub	sp, #116	; 0x74
 800a83c:	4607      	mov	r7, r0
 800a83e:	460d      	mov	r5, r1
 800a840:	4614      	mov	r4, r2
 800a842:	d50e      	bpl.n	800a862 <_svfiprintf_r+0x32>
 800a844:	690b      	ldr	r3, [r1, #16]
 800a846:	b963      	cbnz	r3, 800a862 <_svfiprintf_r+0x32>
 800a848:	2140      	movs	r1, #64	; 0x40
 800a84a:	f7fe fbc7 	bl	8008fdc <_malloc_r>
 800a84e:	6028      	str	r0, [r5, #0]
 800a850:	6128      	str	r0, [r5, #16]
 800a852:	b920      	cbnz	r0, 800a85e <_svfiprintf_r+0x2e>
 800a854:	230c      	movs	r3, #12
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	e0d0      	b.n	800aa00 <_svfiprintf_r+0x1d0>
 800a85e:	2340      	movs	r3, #64	; 0x40
 800a860:	616b      	str	r3, [r5, #20]
 800a862:	2300      	movs	r3, #0
 800a864:	9309      	str	r3, [sp, #36]	; 0x24
 800a866:	2320      	movs	r3, #32
 800a868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a86c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a870:	2330      	movs	r3, #48	; 0x30
 800a872:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa18 <_svfiprintf_r+0x1e8>
 800a876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a87a:	f04f 0901 	mov.w	r9, #1
 800a87e:	4623      	mov	r3, r4
 800a880:	469a      	mov	sl, r3
 800a882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a886:	b10a      	cbz	r2, 800a88c <_svfiprintf_r+0x5c>
 800a888:	2a25      	cmp	r2, #37	; 0x25
 800a88a:	d1f9      	bne.n	800a880 <_svfiprintf_r+0x50>
 800a88c:	ebba 0b04 	subs.w	fp, sl, r4
 800a890:	d00b      	beq.n	800a8aa <_svfiprintf_r+0x7a>
 800a892:	465b      	mov	r3, fp
 800a894:	4622      	mov	r2, r4
 800a896:	4629      	mov	r1, r5
 800a898:	4638      	mov	r0, r7
 800a89a:	f7ff ff6f 	bl	800a77c <__ssputs_r>
 800a89e:	3001      	adds	r0, #1
 800a8a0:	f000 80a9 	beq.w	800a9f6 <_svfiprintf_r+0x1c6>
 800a8a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a6:	445a      	add	r2, fp
 800a8a8:	9209      	str	r2, [sp, #36]	; 0x24
 800a8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 80a1 	beq.w	800a9f6 <_svfiprintf_r+0x1c6>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8be:	f10a 0a01 	add.w	sl, sl, #1
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	9307      	str	r3, [sp, #28]
 800a8c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a8cc:	4654      	mov	r4, sl
 800a8ce:	2205      	movs	r2, #5
 800a8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d4:	4850      	ldr	r0, [pc, #320]	; (800aa18 <_svfiprintf_r+0x1e8>)
 800a8d6:	f7f5 fc83 	bl	80001e0 <memchr>
 800a8da:	9a04      	ldr	r2, [sp, #16]
 800a8dc:	b9d8      	cbnz	r0, 800a916 <_svfiprintf_r+0xe6>
 800a8de:	06d0      	lsls	r0, r2, #27
 800a8e0:	bf44      	itt	mi
 800a8e2:	2320      	movmi	r3, #32
 800a8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8e8:	0711      	lsls	r1, r2, #28
 800a8ea:	bf44      	itt	mi
 800a8ec:	232b      	movmi	r3, #43	; 0x2b
 800a8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f8:	d015      	beq.n	800a926 <_svfiprintf_r+0xf6>
 800a8fa:	9a07      	ldr	r2, [sp, #28]
 800a8fc:	4654      	mov	r4, sl
 800a8fe:	2000      	movs	r0, #0
 800a900:	f04f 0c0a 	mov.w	ip, #10
 800a904:	4621      	mov	r1, r4
 800a906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a90a:	3b30      	subs	r3, #48	; 0x30
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d94d      	bls.n	800a9ac <_svfiprintf_r+0x17c>
 800a910:	b1b0      	cbz	r0, 800a940 <_svfiprintf_r+0x110>
 800a912:	9207      	str	r2, [sp, #28]
 800a914:	e014      	b.n	800a940 <_svfiprintf_r+0x110>
 800a916:	eba0 0308 	sub.w	r3, r0, r8
 800a91a:	fa09 f303 	lsl.w	r3, r9, r3
 800a91e:	4313      	orrs	r3, r2
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	46a2      	mov	sl, r4
 800a924:	e7d2      	b.n	800a8cc <_svfiprintf_r+0x9c>
 800a926:	9b03      	ldr	r3, [sp, #12]
 800a928:	1d19      	adds	r1, r3, #4
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	9103      	str	r1, [sp, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bfbb      	ittet	lt
 800a932:	425b      	neglt	r3, r3
 800a934:	f042 0202 	orrlt.w	r2, r2, #2
 800a938:	9307      	strge	r3, [sp, #28]
 800a93a:	9307      	strlt	r3, [sp, #28]
 800a93c:	bfb8      	it	lt
 800a93e:	9204      	strlt	r2, [sp, #16]
 800a940:	7823      	ldrb	r3, [r4, #0]
 800a942:	2b2e      	cmp	r3, #46	; 0x2e
 800a944:	d10c      	bne.n	800a960 <_svfiprintf_r+0x130>
 800a946:	7863      	ldrb	r3, [r4, #1]
 800a948:	2b2a      	cmp	r3, #42	; 0x2a
 800a94a:	d134      	bne.n	800a9b6 <_svfiprintf_r+0x186>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	9203      	str	r2, [sp, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfb8      	it	lt
 800a958:	f04f 33ff 	movlt.w	r3, #4294967295
 800a95c:	3402      	adds	r4, #2
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa28 <_svfiprintf_r+0x1f8>
 800a964:	7821      	ldrb	r1, [r4, #0]
 800a966:	2203      	movs	r2, #3
 800a968:	4650      	mov	r0, sl
 800a96a:	f7f5 fc39 	bl	80001e0 <memchr>
 800a96e:	b138      	cbz	r0, 800a980 <_svfiprintf_r+0x150>
 800a970:	9b04      	ldr	r3, [sp, #16]
 800a972:	eba0 000a 	sub.w	r0, r0, sl
 800a976:	2240      	movs	r2, #64	; 0x40
 800a978:	4082      	lsls	r2, r0
 800a97a:	4313      	orrs	r3, r2
 800a97c:	3401      	adds	r4, #1
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	4825      	ldr	r0, [pc, #148]	; (800aa1c <_svfiprintf_r+0x1ec>)
 800a986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a98a:	2206      	movs	r2, #6
 800a98c:	f7f5 fc28 	bl	80001e0 <memchr>
 800a990:	2800      	cmp	r0, #0
 800a992:	d038      	beq.n	800aa06 <_svfiprintf_r+0x1d6>
 800a994:	4b22      	ldr	r3, [pc, #136]	; (800aa20 <_svfiprintf_r+0x1f0>)
 800a996:	bb1b      	cbnz	r3, 800a9e0 <_svfiprintf_r+0x1b0>
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	3307      	adds	r3, #7
 800a99c:	f023 0307 	bic.w	r3, r3, #7
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	9303      	str	r3, [sp, #12]
 800a9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a6:	4433      	add	r3, r6
 800a9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9aa:	e768      	b.n	800a87e <_svfiprintf_r+0x4e>
 800a9ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	e7a6      	b.n	800a904 <_svfiprintf_r+0xd4>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	3401      	adds	r4, #1
 800a9ba:	9305      	str	r3, [sp, #20]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f04f 0c0a 	mov.w	ip, #10
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c8:	3a30      	subs	r2, #48	; 0x30
 800a9ca:	2a09      	cmp	r2, #9
 800a9cc:	d903      	bls.n	800a9d6 <_svfiprintf_r+0x1a6>
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0c6      	beq.n	800a960 <_svfiprintf_r+0x130>
 800a9d2:	9105      	str	r1, [sp, #20]
 800a9d4:	e7c4      	b.n	800a960 <_svfiprintf_r+0x130>
 800a9d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9da:	4604      	mov	r4, r0
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e7f0      	b.n	800a9c2 <_svfiprintf_r+0x192>
 800a9e0:	ab03      	add	r3, sp, #12
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	462a      	mov	r2, r5
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <_svfiprintf_r+0x1f4>)
 800a9e8:	a904      	add	r1, sp, #16
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f7fc fb1e 	bl	800702c <_printf_float>
 800a9f0:	1c42      	adds	r2, r0, #1
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	d1d6      	bne.n	800a9a4 <_svfiprintf_r+0x174>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	065b      	lsls	r3, r3, #25
 800a9fa:	f53f af2d 	bmi.w	800a858 <_svfiprintf_r+0x28>
 800a9fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa00:	b01d      	add	sp, #116	; 0x74
 800aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	ab03      	add	r3, sp, #12
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <_svfiprintf_r+0x1f4>)
 800aa0e:	a904      	add	r1, sp, #16
 800aa10:	4638      	mov	r0, r7
 800aa12:	f7fc fdaf 	bl	8007574 <_printf_i>
 800aa16:	e7eb      	b.n	800a9f0 <_svfiprintf_r+0x1c0>
 800aa18:	0800bce1 	.word	0x0800bce1
 800aa1c:	0800bceb 	.word	0x0800bceb
 800aa20:	0800702d 	.word	0x0800702d
 800aa24:	0800a77d 	.word	0x0800a77d
 800aa28:	0800bce7 	.word	0x0800bce7

0800aa2c <__sfputc_r>:
 800aa2c:	6893      	ldr	r3, [r2, #8]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	b410      	push	{r4}
 800aa34:	6093      	str	r3, [r2, #8]
 800aa36:	da08      	bge.n	800aa4a <__sfputc_r+0x1e>
 800aa38:	6994      	ldr	r4, [r2, #24]
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	db01      	blt.n	800aa42 <__sfputc_r+0x16>
 800aa3e:	290a      	cmp	r1, #10
 800aa40:	d103      	bne.n	800aa4a <__sfputc_r+0x1e>
 800aa42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa46:	f7fd ba5a 	b.w	8007efe <__swbuf_r>
 800aa4a:	6813      	ldr	r3, [r2, #0]
 800aa4c:	1c58      	adds	r0, r3, #1
 800aa4e:	6010      	str	r0, [r2, #0]
 800aa50:	7019      	strb	r1, [r3, #0]
 800aa52:	4608      	mov	r0, r1
 800aa54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <__sfputs_r>:
 800aa5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	4614      	mov	r4, r2
 800aa62:	18d5      	adds	r5, r2, r3
 800aa64:	42ac      	cmp	r4, r5
 800aa66:	d101      	bne.n	800aa6c <__sfputs_r+0x12>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e007      	b.n	800aa7c <__sfputs_r+0x22>
 800aa6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa70:	463a      	mov	r2, r7
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ffda 	bl	800aa2c <__sfputc_r>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	d1f3      	bne.n	800aa64 <__sfputs_r+0xa>
 800aa7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa80 <_vfiprintf_r>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	460d      	mov	r5, r1
 800aa86:	b09d      	sub	sp, #116	; 0x74
 800aa88:	4614      	mov	r4, r2
 800aa8a:	4698      	mov	r8, r3
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	b118      	cbz	r0, 800aa98 <_vfiprintf_r+0x18>
 800aa90:	6a03      	ldr	r3, [r0, #32]
 800aa92:	b90b      	cbnz	r3, 800aa98 <_vfiprintf_r+0x18>
 800aa94:	f7fd f92c 	bl	8007cf0 <__sinit>
 800aa98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	d405      	bmi.n	800aaaa <_vfiprintf_r+0x2a>
 800aa9e:	89ab      	ldrh	r3, [r5, #12]
 800aaa0:	059a      	lsls	r2, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_vfiprintf_r+0x2a>
 800aaa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa6:	f7fd fb92 	bl	80081ce <__retarget_lock_acquire_recursive>
 800aaaa:	89ab      	ldrh	r3, [r5, #12]
 800aaac:	071b      	lsls	r3, r3, #28
 800aaae:	d501      	bpl.n	800aab4 <_vfiprintf_r+0x34>
 800aab0:	692b      	ldr	r3, [r5, #16]
 800aab2:	b99b      	cbnz	r3, 800aadc <_vfiprintf_r+0x5c>
 800aab4:	4629      	mov	r1, r5
 800aab6:	4630      	mov	r0, r6
 800aab8:	f7fd fa5e 	bl	8007f78 <__swsetup_r>
 800aabc:	b170      	cbz	r0, 800aadc <_vfiprintf_r+0x5c>
 800aabe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aac0:	07dc      	lsls	r4, r3, #31
 800aac2:	d504      	bpl.n	800aace <_vfiprintf_r+0x4e>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	b01d      	add	sp, #116	; 0x74
 800aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	0598      	lsls	r0, r3, #22
 800aad2:	d4f7      	bmi.n	800aac4 <_vfiprintf_r+0x44>
 800aad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aad6:	f7fd fb7b 	bl	80081d0 <__retarget_lock_release_recursive>
 800aada:	e7f3      	b.n	800aac4 <_vfiprintf_r+0x44>
 800aadc:	2300      	movs	r3, #0
 800aade:	9309      	str	r3, [sp, #36]	; 0x24
 800aae0:	2320      	movs	r3, #32
 800aae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aae6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaea:	2330      	movs	r3, #48	; 0x30
 800aaec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aca0 <_vfiprintf_r+0x220>
 800aaf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaf4:	f04f 0901 	mov.w	r9, #1
 800aaf8:	4623      	mov	r3, r4
 800aafa:	469a      	mov	sl, r3
 800aafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab00:	b10a      	cbz	r2, 800ab06 <_vfiprintf_r+0x86>
 800ab02:	2a25      	cmp	r2, #37	; 0x25
 800ab04:	d1f9      	bne.n	800aafa <_vfiprintf_r+0x7a>
 800ab06:	ebba 0b04 	subs.w	fp, sl, r4
 800ab0a:	d00b      	beq.n	800ab24 <_vfiprintf_r+0xa4>
 800ab0c:	465b      	mov	r3, fp
 800ab0e:	4622      	mov	r2, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7ff ffa1 	bl	800aa5a <__sfputs_r>
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f000 80a9 	beq.w	800ac70 <_vfiprintf_r+0x1f0>
 800ab1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab20:	445a      	add	r2, fp
 800ab22:	9209      	str	r2, [sp, #36]	; 0x24
 800ab24:	f89a 3000 	ldrb.w	r3, [sl]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 80a1 	beq.w	800ac70 <_vfiprintf_r+0x1f0>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f04f 32ff 	mov.w	r2, #4294967295
 800ab34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab38:	f10a 0a01 	add.w	sl, sl, #1
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	9307      	str	r3, [sp, #28]
 800ab40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab44:	931a      	str	r3, [sp, #104]	; 0x68
 800ab46:	4654      	mov	r4, sl
 800ab48:	2205      	movs	r2, #5
 800ab4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4e:	4854      	ldr	r0, [pc, #336]	; (800aca0 <_vfiprintf_r+0x220>)
 800ab50:	f7f5 fb46 	bl	80001e0 <memchr>
 800ab54:	9a04      	ldr	r2, [sp, #16]
 800ab56:	b9d8      	cbnz	r0, 800ab90 <_vfiprintf_r+0x110>
 800ab58:	06d1      	lsls	r1, r2, #27
 800ab5a:	bf44      	itt	mi
 800ab5c:	2320      	movmi	r3, #32
 800ab5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab62:	0713      	lsls	r3, r2, #28
 800ab64:	bf44      	itt	mi
 800ab66:	232b      	movmi	r3, #43	; 0x2b
 800ab68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab70:	2b2a      	cmp	r3, #42	; 0x2a
 800ab72:	d015      	beq.n	800aba0 <_vfiprintf_r+0x120>
 800ab74:	9a07      	ldr	r2, [sp, #28]
 800ab76:	4654      	mov	r4, sl
 800ab78:	2000      	movs	r0, #0
 800ab7a:	f04f 0c0a 	mov.w	ip, #10
 800ab7e:	4621      	mov	r1, r4
 800ab80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab84:	3b30      	subs	r3, #48	; 0x30
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d94d      	bls.n	800ac26 <_vfiprintf_r+0x1a6>
 800ab8a:	b1b0      	cbz	r0, 800abba <_vfiprintf_r+0x13a>
 800ab8c:	9207      	str	r2, [sp, #28]
 800ab8e:	e014      	b.n	800abba <_vfiprintf_r+0x13a>
 800ab90:	eba0 0308 	sub.w	r3, r0, r8
 800ab94:	fa09 f303 	lsl.w	r3, r9, r3
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	46a2      	mov	sl, r4
 800ab9e:	e7d2      	b.n	800ab46 <_vfiprintf_r+0xc6>
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	1d19      	adds	r1, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	9103      	str	r1, [sp, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfbb      	ittet	lt
 800abac:	425b      	neglt	r3, r3
 800abae:	f042 0202 	orrlt.w	r2, r2, #2
 800abb2:	9307      	strge	r3, [sp, #28]
 800abb4:	9307      	strlt	r3, [sp, #28]
 800abb6:	bfb8      	it	lt
 800abb8:	9204      	strlt	r2, [sp, #16]
 800abba:	7823      	ldrb	r3, [r4, #0]
 800abbc:	2b2e      	cmp	r3, #46	; 0x2e
 800abbe:	d10c      	bne.n	800abda <_vfiprintf_r+0x15a>
 800abc0:	7863      	ldrb	r3, [r4, #1]
 800abc2:	2b2a      	cmp	r3, #42	; 0x2a
 800abc4:	d134      	bne.n	800ac30 <_vfiprintf_r+0x1b0>
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	1d1a      	adds	r2, r3, #4
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	9203      	str	r2, [sp, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	bfb8      	it	lt
 800abd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800abd6:	3402      	adds	r4, #2
 800abd8:	9305      	str	r3, [sp, #20]
 800abda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800acb0 <_vfiprintf_r+0x230>
 800abde:	7821      	ldrb	r1, [r4, #0]
 800abe0:	2203      	movs	r2, #3
 800abe2:	4650      	mov	r0, sl
 800abe4:	f7f5 fafc 	bl	80001e0 <memchr>
 800abe8:	b138      	cbz	r0, 800abfa <_vfiprintf_r+0x17a>
 800abea:	9b04      	ldr	r3, [sp, #16]
 800abec:	eba0 000a 	sub.w	r0, r0, sl
 800abf0:	2240      	movs	r2, #64	; 0x40
 800abf2:	4082      	lsls	r2, r0
 800abf4:	4313      	orrs	r3, r2
 800abf6:	3401      	adds	r4, #1
 800abf8:	9304      	str	r3, [sp, #16]
 800abfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfe:	4829      	ldr	r0, [pc, #164]	; (800aca4 <_vfiprintf_r+0x224>)
 800ac00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac04:	2206      	movs	r2, #6
 800ac06:	f7f5 faeb 	bl	80001e0 <memchr>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d03f      	beq.n	800ac8e <_vfiprintf_r+0x20e>
 800ac0e:	4b26      	ldr	r3, [pc, #152]	; (800aca8 <_vfiprintf_r+0x228>)
 800ac10:	bb1b      	cbnz	r3, 800ac5a <_vfiprintf_r+0x1da>
 800ac12:	9b03      	ldr	r3, [sp, #12]
 800ac14:	3307      	adds	r3, #7
 800ac16:	f023 0307 	bic.w	r3, r3, #7
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	9303      	str	r3, [sp, #12]
 800ac1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac20:	443b      	add	r3, r7
 800ac22:	9309      	str	r3, [sp, #36]	; 0x24
 800ac24:	e768      	b.n	800aaf8 <_vfiprintf_r+0x78>
 800ac26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	e7a6      	b.n	800ab7e <_vfiprintf_r+0xfe>
 800ac30:	2300      	movs	r3, #0
 800ac32:	3401      	adds	r4, #1
 800ac34:	9305      	str	r3, [sp, #20]
 800ac36:	4619      	mov	r1, r3
 800ac38:	f04f 0c0a 	mov.w	ip, #10
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac42:	3a30      	subs	r2, #48	; 0x30
 800ac44:	2a09      	cmp	r2, #9
 800ac46:	d903      	bls.n	800ac50 <_vfiprintf_r+0x1d0>
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d0c6      	beq.n	800abda <_vfiprintf_r+0x15a>
 800ac4c:	9105      	str	r1, [sp, #20]
 800ac4e:	e7c4      	b.n	800abda <_vfiprintf_r+0x15a>
 800ac50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac54:	4604      	mov	r4, r0
 800ac56:	2301      	movs	r3, #1
 800ac58:	e7f0      	b.n	800ac3c <_vfiprintf_r+0x1bc>
 800ac5a:	ab03      	add	r3, sp, #12
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4b12      	ldr	r3, [pc, #72]	; (800acac <_vfiprintf_r+0x22c>)
 800ac62:	a904      	add	r1, sp, #16
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7fc f9e1 	bl	800702c <_printf_float>
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	1c78      	adds	r0, r7, #1
 800ac6e:	d1d6      	bne.n	800ac1e <_vfiprintf_r+0x19e>
 800ac70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac72:	07d9      	lsls	r1, r3, #31
 800ac74:	d405      	bmi.n	800ac82 <_vfiprintf_r+0x202>
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	059a      	lsls	r2, r3, #22
 800ac7a:	d402      	bmi.n	800ac82 <_vfiprintf_r+0x202>
 800ac7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac7e:	f7fd faa7 	bl	80081d0 <__retarget_lock_release_recursive>
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	065b      	lsls	r3, r3, #25
 800ac86:	f53f af1d 	bmi.w	800aac4 <_vfiprintf_r+0x44>
 800ac8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac8c:	e71c      	b.n	800aac8 <_vfiprintf_r+0x48>
 800ac8e:	ab03      	add	r3, sp, #12
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	462a      	mov	r2, r5
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <_vfiprintf_r+0x22c>)
 800ac96:	a904      	add	r1, sp, #16
 800ac98:	4630      	mov	r0, r6
 800ac9a:	f7fc fc6b 	bl	8007574 <_printf_i>
 800ac9e:	e7e4      	b.n	800ac6a <_vfiprintf_r+0x1ea>
 800aca0:	0800bce1 	.word	0x0800bce1
 800aca4:	0800bceb 	.word	0x0800bceb
 800aca8:	0800702d 	.word	0x0800702d
 800acac:	0800aa5b 	.word	0x0800aa5b
 800acb0:	0800bce7 	.word	0x0800bce7

0800acb4 <__sflush_r>:
 800acb4:	898a      	ldrh	r2, [r1, #12]
 800acb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acba:	4605      	mov	r5, r0
 800acbc:	0710      	lsls	r0, r2, #28
 800acbe:	460c      	mov	r4, r1
 800acc0:	d458      	bmi.n	800ad74 <__sflush_r+0xc0>
 800acc2:	684b      	ldr	r3, [r1, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dc05      	bgt.n	800acd4 <__sflush_r+0x20>
 800acc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acca:	2b00      	cmp	r3, #0
 800accc:	dc02      	bgt.n	800acd4 <__sflush_r+0x20>
 800acce:	2000      	movs	r0, #0
 800acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd6:	2e00      	cmp	r6, #0
 800acd8:	d0f9      	beq.n	800acce <__sflush_r+0x1a>
 800acda:	2300      	movs	r3, #0
 800acdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ace0:	682f      	ldr	r7, [r5, #0]
 800ace2:	6a21      	ldr	r1, [r4, #32]
 800ace4:	602b      	str	r3, [r5, #0]
 800ace6:	d032      	beq.n	800ad4e <__sflush_r+0x9a>
 800ace8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	075a      	lsls	r2, r3, #29
 800acee:	d505      	bpl.n	800acfc <__sflush_r+0x48>
 800acf0:	6863      	ldr	r3, [r4, #4]
 800acf2:	1ac0      	subs	r0, r0, r3
 800acf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acf6:	b10b      	cbz	r3, 800acfc <__sflush_r+0x48>
 800acf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acfa:	1ac0      	subs	r0, r0, r3
 800acfc:	2300      	movs	r3, #0
 800acfe:	4602      	mov	r2, r0
 800ad00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad02:	6a21      	ldr	r1, [r4, #32]
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b0      	blx	r6
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	d106      	bne.n	800ad1c <__sflush_r+0x68>
 800ad0e:	6829      	ldr	r1, [r5, #0]
 800ad10:	291d      	cmp	r1, #29
 800ad12:	d82b      	bhi.n	800ad6c <__sflush_r+0xb8>
 800ad14:	4a29      	ldr	r2, [pc, #164]	; (800adbc <__sflush_r+0x108>)
 800ad16:	410a      	asrs	r2, r1
 800ad18:	07d6      	lsls	r6, r2, #31
 800ad1a:	d427      	bmi.n	800ad6c <__sflush_r+0xb8>
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	6062      	str	r2, [r4, #4]
 800ad20:	04d9      	lsls	r1, r3, #19
 800ad22:	6922      	ldr	r2, [r4, #16]
 800ad24:	6022      	str	r2, [r4, #0]
 800ad26:	d504      	bpl.n	800ad32 <__sflush_r+0x7e>
 800ad28:	1c42      	adds	r2, r0, #1
 800ad2a:	d101      	bne.n	800ad30 <__sflush_r+0x7c>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b903      	cbnz	r3, 800ad32 <__sflush_r+0x7e>
 800ad30:	6560      	str	r0, [r4, #84]	; 0x54
 800ad32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad34:	602f      	str	r7, [r5, #0]
 800ad36:	2900      	cmp	r1, #0
 800ad38:	d0c9      	beq.n	800acce <__sflush_r+0x1a>
 800ad3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad3e:	4299      	cmp	r1, r3
 800ad40:	d002      	beq.n	800ad48 <__sflush_r+0x94>
 800ad42:	4628      	mov	r0, r5
 800ad44:	f7fe f8d6 	bl	8008ef4 <_free_r>
 800ad48:	2000      	movs	r0, #0
 800ad4a:	6360      	str	r0, [r4, #52]	; 0x34
 800ad4c:	e7c0      	b.n	800acd0 <__sflush_r+0x1c>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b0      	blx	r6
 800ad54:	1c41      	adds	r1, r0, #1
 800ad56:	d1c8      	bne.n	800acea <__sflush_r+0x36>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0c5      	beq.n	800acea <__sflush_r+0x36>
 800ad5e:	2b1d      	cmp	r3, #29
 800ad60:	d001      	beq.n	800ad66 <__sflush_r+0xb2>
 800ad62:	2b16      	cmp	r3, #22
 800ad64:	d101      	bne.n	800ad6a <__sflush_r+0xb6>
 800ad66:	602f      	str	r7, [r5, #0]
 800ad68:	e7b1      	b.n	800acce <__sflush_r+0x1a>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad70:	81a3      	strh	r3, [r4, #12]
 800ad72:	e7ad      	b.n	800acd0 <__sflush_r+0x1c>
 800ad74:	690f      	ldr	r7, [r1, #16]
 800ad76:	2f00      	cmp	r7, #0
 800ad78:	d0a9      	beq.n	800acce <__sflush_r+0x1a>
 800ad7a:	0793      	lsls	r3, r2, #30
 800ad7c:	680e      	ldr	r6, [r1, #0]
 800ad7e:	bf08      	it	eq
 800ad80:	694b      	ldreq	r3, [r1, #20]
 800ad82:	600f      	str	r7, [r1, #0]
 800ad84:	bf18      	it	ne
 800ad86:	2300      	movne	r3, #0
 800ad88:	eba6 0807 	sub.w	r8, r6, r7
 800ad8c:	608b      	str	r3, [r1, #8]
 800ad8e:	f1b8 0f00 	cmp.w	r8, #0
 800ad92:	dd9c      	ble.n	800acce <__sflush_r+0x1a>
 800ad94:	6a21      	ldr	r1, [r4, #32]
 800ad96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad98:	4643      	mov	r3, r8
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b0      	blx	r6
 800ada0:	2800      	cmp	r0, #0
 800ada2:	dc06      	bgt.n	800adb2 <__sflush_r+0xfe>
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adaa:	81a3      	strh	r3, [r4, #12]
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	e78e      	b.n	800acd0 <__sflush_r+0x1c>
 800adb2:	4407      	add	r7, r0
 800adb4:	eba8 0800 	sub.w	r8, r8, r0
 800adb8:	e7e9      	b.n	800ad8e <__sflush_r+0xda>
 800adba:	bf00      	nop
 800adbc:	dfbffffe 	.word	0xdfbffffe

0800adc0 <_fflush_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	690b      	ldr	r3, [r1, #16]
 800adc4:	4605      	mov	r5, r0
 800adc6:	460c      	mov	r4, r1
 800adc8:	b913      	cbnz	r3, 800add0 <_fflush_r+0x10>
 800adca:	2500      	movs	r5, #0
 800adcc:	4628      	mov	r0, r5
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	b118      	cbz	r0, 800adda <_fflush_r+0x1a>
 800add2:	6a03      	ldr	r3, [r0, #32]
 800add4:	b90b      	cbnz	r3, 800adda <_fflush_r+0x1a>
 800add6:	f7fc ff8b 	bl	8007cf0 <__sinit>
 800adda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0f3      	beq.n	800adca <_fflush_r+0xa>
 800ade2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ade4:	07d0      	lsls	r0, r2, #31
 800ade6:	d404      	bmi.n	800adf2 <_fflush_r+0x32>
 800ade8:	0599      	lsls	r1, r3, #22
 800adea:	d402      	bmi.n	800adf2 <_fflush_r+0x32>
 800adec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adee:	f7fd f9ee 	bl	80081ce <__retarget_lock_acquire_recursive>
 800adf2:	4628      	mov	r0, r5
 800adf4:	4621      	mov	r1, r4
 800adf6:	f7ff ff5d 	bl	800acb4 <__sflush_r>
 800adfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adfc:	07da      	lsls	r2, r3, #31
 800adfe:	4605      	mov	r5, r0
 800ae00:	d4e4      	bmi.n	800adcc <_fflush_r+0xc>
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	059b      	lsls	r3, r3, #22
 800ae06:	d4e1      	bmi.n	800adcc <_fflush_r+0xc>
 800ae08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae0a:	f7fd f9e1 	bl	80081d0 <__retarget_lock_release_recursive>
 800ae0e:	e7dd      	b.n	800adcc <_fflush_r+0xc>

0800ae10 <__swhatbuf_r>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	460c      	mov	r4, r1
 800ae14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae18:	2900      	cmp	r1, #0
 800ae1a:	b096      	sub	sp, #88	; 0x58
 800ae1c:	4615      	mov	r5, r2
 800ae1e:	461e      	mov	r6, r3
 800ae20:	da0d      	bge.n	800ae3e <__swhatbuf_r+0x2e>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae28:	f04f 0100 	mov.w	r1, #0
 800ae2c:	bf0c      	ite	eq
 800ae2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ae32:	2340      	movne	r3, #64	; 0x40
 800ae34:	2000      	movs	r0, #0
 800ae36:	6031      	str	r1, [r6, #0]
 800ae38:	602b      	str	r3, [r5, #0]
 800ae3a:	b016      	add	sp, #88	; 0x58
 800ae3c:	bd70      	pop	{r4, r5, r6, pc}
 800ae3e:	466a      	mov	r2, sp
 800ae40:	f000 f874 	bl	800af2c <_fstat_r>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	dbec      	blt.n	800ae22 <__swhatbuf_r+0x12>
 800ae48:	9901      	ldr	r1, [sp, #4]
 800ae4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae52:	4259      	negs	r1, r3
 800ae54:	4159      	adcs	r1, r3
 800ae56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae5a:	e7eb      	b.n	800ae34 <__swhatbuf_r+0x24>

0800ae5c <__smakebuf_r>:
 800ae5c:	898b      	ldrh	r3, [r1, #12]
 800ae5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae60:	079d      	lsls	r5, r3, #30
 800ae62:	4606      	mov	r6, r0
 800ae64:	460c      	mov	r4, r1
 800ae66:	d507      	bpl.n	800ae78 <__smakebuf_r+0x1c>
 800ae68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	2301      	movs	r3, #1
 800ae72:	6163      	str	r3, [r4, #20]
 800ae74:	b002      	add	sp, #8
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	ab01      	add	r3, sp, #4
 800ae7a:	466a      	mov	r2, sp
 800ae7c:	f7ff ffc8 	bl	800ae10 <__swhatbuf_r>
 800ae80:	9900      	ldr	r1, [sp, #0]
 800ae82:	4605      	mov	r5, r0
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7fe f8a9 	bl	8008fdc <_malloc_r>
 800ae8a:	b948      	cbnz	r0, 800aea0 <__smakebuf_r+0x44>
 800ae8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae90:	059a      	lsls	r2, r3, #22
 800ae92:	d4ef      	bmi.n	800ae74 <__smakebuf_r+0x18>
 800ae94:	f023 0303 	bic.w	r3, r3, #3
 800ae98:	f043 0302 	orr.w	r3, r3, #2
 800ae9c:	81a3      	strh	r3, [r4, #12]
 800ae9e:	e7e3      	b.n	800ae68 <__smakebuf_r+0xc>
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	6020      	str	r0, [r4, #0]
 800aea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	9b00      	ldr	r3, [sp, #0]
 800aeac:	6163      	str	r3, [r4, #20]
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	6120      	str	r0, [r4, #16]
 800aeb2:	b15b      	cbz	r3, 800aecc <__smakebuf_r+0x70>
 800aeb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f000 f849 	bl	800af50 <_isatty_r>
 800aebe:	b128      	cbz	r0, 800aecc <__smakebuf_r+0x70>
 800aec0:	89a3      	ldrh	r3, [r4, #12]
 800aec2:	f023 0303 	bic.w	r3, r3, #3
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	431d      	orrs	r5, r3
 800aed0:	81a5      	strh	r5, [r4, #12]
 800aed2:	e7cf      	b.n	800ae74 <__smakebuf_r+0x18>

0800aed4 <memmove>:
 800aed4:	4288      	cmp	r0, r1
 800aed6:	b510      	push	{r4, lr}
 800aed8:	eb01 0402 	add.w	r4, r1, r2
 800aedc:	d902      	bls.n	800aee4 <memmove+0x10>
 800aede:	4284      	cmp	r4, r0
 800aee0:	4623      	mov	r3, r4
 800aee2:	d807      	bhi.n	800aef4 <memmove+0x20>
 800aee4:	1e43      	subs	r3, r0, #1
 800aee6:	42a1      	cmp	r1, r4
 800aee8:	d008      	beq.n	800aefc <memmove+0x28>
 800aeea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aef2:	e7f8      	b.n	800aee6 <memmove+0x12>
 800aef4:	4402      	add	r2, r0
 800aef6:	4601      	mov	r1, r0
 800aef8:	428a      	cmp	r2, r1
 800aefa:	d100      	bne.n	800aefe <memmove+0x2a>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af06:	e7f7      	b.n	800aef8 <memmove+0x24>

0800af08 <strncmp>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	b16a      	cbz	r2, 800af28 <strncmp+0x20>
 800af0c:	3901      	subs	r1, #1
 800af0e:	1884      	adds	r4, r0, r2
 800af10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800af18:	429a      	cmp	r2, r3
 800af1a:	d103      	bne.n	800af24 <strncmp+0x1c>
 800af1c:	42a0      	cmp	r0, r4
 800af1e:	d001      	beq.n	800af24 <strncmp+0x1c>
 800af20:	2a00      	cmp	r2, #0
 800af22:	d1f5      	bne.n	800af10 <strncmp+0x8>
 800af24:	1ad0      	subs	r0, r2, r3
 800af26:	bd10      	pop	{r4, pc}
 800af28:	4610      	mov	r0, r2
 800af2a:	e7fc      	b.n	800af26 <strncmp+0x1e>

0800af2c <_fstat_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	; (800af4c <_fstat_r+0x20>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	4611      	mov	r1, r2
 800af38:	602b      	str	r3, [r5, #0]
 800af3a:	f7f6 fe82 	bl	8001c42 <_fstat>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	d102      	bne.n	800af48 <_fstat_r+0x1c>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	b103      	cbz	r3, 800af48 <_fstat_r+0x1c>
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	bf00      	nop
 800af4c:	200044a8 	.word	0x200044a8

0800af50 <_isatty_r>:
 800af50:	b538      	push	{r3, r4, r5, lr}
 800af52:	4d06      	ldr	r5, [pc, #24]	; (800af6c <_isatty_r+0x1c>)
 800af54:	2300      	movs	r3, #0
 800af56:	4604      	mov	r4, r0
 800af58:	4608      	mov	r0, r1
 800af5a:	602b      	str	r3, [r5, #0]
 800af5c:	f7f6 fe81 	bl	8001c62 <_isatty>
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	d102      	bne.n	800af6a <_isatty_r+0x1a>
 800af64:	682b      	ldr	r3, [r5, #0]
 800af66:	b103      	cbz	r3, 800af6a <_isatty_r+0x1a>
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	bd38      	pop	{r3, r4, r5, pc}
 800af6c:	200044a8 	.word	0x200044a8

0800af70 <_sbrk_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	4d06      	ldr	r5, [pc, #24]	; (800af8c <_sbrk_r+0x1c>)
 800af74:	2300      	movs	r3, #0
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	602b      	str	r3, [r5, #0]
 800af7c:	f7f6 fe8a 	bl	8001c94 <_sbrk>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d102      	bne.n	800af8a <_sbrk_r+0x1a>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	b103      	cbz	r3, 800af8a <_sbrk_r+0x1a>
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	200044a8 	.word	0x200044a8

0800af90 <nan>:
 800af90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800af98 <nan+0x8>
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	00000000 	.word	0x00000000
 800af9c:	7ff80000 	.word	0x7ff80000

0800afa0 <__assert_func>:
 800afa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afa2:	4614      	mov	r4, r2
 800afa4:	461a      	mov	r2, r3
 800afa6:	4b09      	ldr	r3, [pc, #36]	; (800afcc <__assert_func+0x2c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4605      	mov	r5, r0
 800afac:	68d8      	ldr	r0, [r3, #12]
 800afae:	b14c      	cbz	r4, 800afc4 <__assert_func+0x24>
 800afb0:	4b07      	ldr	r3, [pc, #28]	; (800afd0 <__assert_func+0x30>)
 800afb2:	9100      	str	r1, [sp, #0]
 800afb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afb8:	4906      	ldr	r1, [pc, #24]	; (800afd4 <__assert_func+0x34>)
 800afba:	462b      	mov	r3, r5
 800afbc:	f000 fbca 	bl	800b754 <fiprintf>
 800afc0:	f000 fbda 	bl	800b778 <abort>
 800afc4:	4b04      	ldr	r3, [pc, #16]	; (800afd8 <__assert_func+0x38>)
 800afc6:	461c      	mov	r4, r3
 800afc8:	e7f3      	b.n	800afb2 <__assert_func+0x12>
 800afca:	bf00      	nop
 800afcc:	20000068 	.word	0x20000068
 800afd0:	0800bcfa 	.word	0x0800bcfa
 800afd4:	0800bd07 	.word	0x0800bd07
 800afd8:	0800bd35 	.word	0x0800bd35

0800afdc <_calloc_r>:
 800afdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afde:	fba1 2402 	umull	r2, r4, r1, r2
 800afe2:	b94c      	cbnz	r4, 800aff8 <_calloc_r+0x1c>
 800afe4:	4611      	mov	r1, r2
 800afe6:	9201      	str	r2, [sp, #4]
 800afe8:	f7fd fff8 	bl	8008fdc <_malloc_r>
 800afec:	9a01      	ldr	r2, [sp, #4]
 800afee:	4605      	mov	r5, r0
 800aff0:	b930      	cbnz	r0, 800b000 <_calloc_r+0x24>
 800aff2:	4628      	mov	r0, r5
 800aff4:	b003      	add	sp, #12
 800aff6:	bd30      	pop	{r4, r5, pc}
 800aff8:	220c      	movs	r2, #12
 800affa:	6002      	str	r2, [r0, #0]
 800affc:	2500      	movs	r5, #0
 800affe:	e7f8      	b.n	800aff2 <_calloc_r+0x16>
 800b000:	4621      	mov	r1, r4
 800b002:	f7fd f811 	bl	8008028 <memset>
 800b006:	e7f4      	b.n	800aff2 <_calloc_r+0x16>

0800b008 <rshift>:
 800b008:	6903      	ldr	r3, [r0, #16]
 800b00a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b00e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b012:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b016:	f100 0414 	add.w	r4, r0, #20
 800b01a:	dd45      	ble.n	800b0a8 <rshift+0xa0>
 800b01c:	f011 011f 	ands.w	r1, r1, #31
 800b020:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b024:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b028:	d10c      	bne.n	800b044 <rshift+0x3c>
 800b02a:	f100 0710 	add.w	r7, r0, #16
 800b02e:	4629      	mov	r1, r5
 800b030:	42b1      	cmp	r1, r6
 800b032:	d334      	bcc.n	800b09e <rshift+0x96>
 800b034:	1a9b      	subs	r3, r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	1eea      	subs	r2, r5, #3
 800b03a:	4296      	cmp	r6, r2
 800b03c:	bf38      	it	cc
 800b03e:	2300      	movcc	r3, #0
 800b040:	4423      	add	r3, r4
 800b042:	e015      	b.n	800b070 <rshift+0x68>
 800b044:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b048:	f1c1 0820 	rsb	r8, r1, #32
 800b04c:	40cf      	lsrs	r7, r1
 800b04e:	f105 0e04 	add.w	lr, r5, #4
 800b052:	46a1      	mov	r9, r4
 800b054:	4576      	cmp	r6, lr
 800b056:	46f4      	mov	ip, lr
 800b058:	d815      	bhi.n	800b086 <rshift+0x7e>
 800b05a:	1a9a      	subs	r2, r3, r2
 800b05c:	0092      	lsls	r2, r2, #2
 800b05e:	3a04      	subs	r2, #4
 800b060:	3501      	adds	r5, #1
 800b062:	42ae      	cmp	r6, r5
 800b064:	bf38      	it	cc
 800b066:	2200      	movcc	r2, #0
 800b068:	18a3      	adds	r3, r4, r2
 800b06a:	50a7      	str	r7, [r4, r2]
 800b06c:	b107      	cbz	r7, 800b070 <rshift+0x68>
 800b06e:	3304      	adds	r3, #4
 800b070:	1b1a      	subs	r2, r3, r4
 800b072:	42a3      	cmp	r3, r4
 800b074:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b078:	bf08      	it	eq
 800b07a:	2300      	moveq	r3, #0
 800b07c:	6102      	str	r2, [r0, #16]
 800b07e:	bf08      	it	eq
 800b080:	6143      	streq	r3, [r0, #20]
 800b082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b086:	f8dc c000 	ldr.w	ip, [ip]
 800b08a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b08e:	ea4c 0707 	orr.w	r7, ip, r7
 800b092:	f849 7b04 	str.w	r7, [r9], #4
 800b096:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b09a:	40cf      	lsrs	r7, r1
 800b09c:	e7da      	b.n	800b054 <rshift+0x4c>
 800b09e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0a6:	e7c3      	b.n	800b030 <rshift+0x28>
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	e7e1      	b.n	800b070 <rshift+0x68>

0800b0ac <__hexdig_fun>:
 800b0ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0b0:	2b09      	cmp	r3, #9
 800b0b2:	d802      	bhi.n	800b0ba <__hexdig_fun+0xe>
 800b0b4:	3820      	subs	r0, #32
 800b0b6:	b2c0      	uxtb	r0, r0
 800b0b8:	4770      	bx	lr
 800b0ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0be:	2b05      	cmp	r3, #5
 800b0c0:	d801      	bhi.n	800b0c6 <__hexdig_fun+0x1a>
 800b0c2:	3847      	subs	r0, #71	; 0x47
 800b0c4:	e7f7      	b.n	800b0b6 <__hexdig_fun+0xa>
 800b0c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0ca:	2b05      	cmp	r3, #5
 800b0cc:	d801      	bhi.n	800b0d2 <__hexdig_fun+0x26>
 800b0ce:	3827      	subs	r0, #39	; 0x27
 800b0d0:	e7f1      	b.n	800b0b6 <__hexdig_fun+0xa>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <__gethex>:
 800b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0dc:	4617      	mov	r7, r2
 800b0de:	680a      	ldr	r2, [r1, #0]
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	f102 0b02 	add.w	fp, r2, #2
 800b0e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b0ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b0ee:	4681      	mov	r9, r0
 800b0f0:	468a      	mov	sl, r1
 800b0f2:	9302      	str	r3, [sp, #8]
 800b0f4:	32fe      	adds	r2, #254	; 0xfe
 800b0f6:	eb02 030b 	add.w	r3, r2, fp
 800b0fa:	46d8      	mov	r8, fp
 800b0fc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	2830      	cmp	r0, #48	; 0x30
 800b104:	d0f7      	beq.n	800b0f6 <__gethex+0x1e>
 800b106:	f7ff ffd1 	bl	800b0ac <__hexdig_fun>
 800b10a:	4604      	mov	r4, r0
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d138      	bne.n	800b182 <__gethex+0xaa>
 800b110:	49a7      	ldr	r1, [pc, #668]	; (800b3b0 <__gethex+0x2d8>)
 800b112:	2201      	movs	r2, #1
 800b114:	4640      	mov	r0, r8
 800b116:	f7ff fef7 	bl	800af08 <strncmp>
 800b11a:	4606      	mov	r6, r0
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d169      	bne.n	800b1f4 <__gethex+0x11c>
 800b120:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b124:	465d      	mov	r5, fp
 800b126:	f7ff ffc1 	bl	800b0ac <__hexdig_fun>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d064      	beq.n	800b1f8 <__gethex+0x120>
 800b12e:	465a      	mov	r2, fp
 800b130:	7810      	ldrb	r0, [r2, #0]
 800b132:	2830      	cmp	r0, #48	; 0x30
 800b134:	4690      	mov	r8, r2
 800b136:	f102 0201 	add.w	r2, r2, #1
 800b13a:	d0f9      	beq.n	800b130 <__gethex+0x58>
 800b13c:	f7ff ffb6 	bl	800b0ac <__hexdig_fun>
 800b140:	2301      	movs	r3, #1
 800b142:	fab0 f480 	clz	r4, r0
 800b146:	0964      	lsrs	r4, r4, #5
 800b148:	465e      	mov	r6, fp
 800b14a:	9301      	str	r3, [sp, #4]
 800b14c:	4642      	mov	r2, r8
 800b14e:	4615      	mov	r5, r2
 800b150:	3201      	adds	r2, #1
 800b152:	7828      	ldrb	r0, [r5, #0]
 800b154:	f7ff ffaa 	bl	800b0ac <__hexdig_fun>
 800b158:	2800      	cmp	r0, #0
 800b15a:	d1f8      	bne.n	800b14e <__gethex+0x76>
 800b15c:	4994      	ldr	r1, [pc, #592]	; (800b3b0 <__gethex+0x2d8>)
 800b15e:	2201      	movs	r2, #1
 800b160:	4628      	mov	r0, r5
 800b162:	f7ff fed1 	bl	800af08 <strncmp>
 800b166:	b978      	cbnz	r0, 800b188 <__gethex+0xb0>
 800b168:	b946      	cbnz	r6, 800b17c <__gethex+0xa4>
 800b16a:	1c6e      	adds	r6, r5, #1
 800b16c:	4632      	mov	r2, r6
 800b16e:	4615      	mov	r5, r2
 800b170:	3201      	adds	r2, #1
 800b172:	7828      	ldrb	r0, [r5, #0]
 800b174:	f7ff ff9a 	bl	800b0ac <__hexdig_fun>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d1f8      	bne.n	800b16e <__gethex+0x96>
 800b17c:	1b73      	subs	r3, r6, r5
 800b17e:	009e      	lsls	r6, r3, #2
 800b180:	e004      	b.n	800b18c <__gethex+0xb4>
 800b182:	2400      	movs	r4, #0
 800b184:	4626      	mov	r6, r4
 800b186:	e7e1      	b.n	800b14c <__gethex+0x74>
 800b188:	2e00      	cmp	r6, #0
 800b18a:	d1f7      	bne.n	800b17c <__gethex+0xa4>
 800b18c:	782b      	ldrb	r3, [r5, #0]
 800b18e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b192:	2b50      	cmp	r3, #80	; 0x50
 800b194:	d13d      	bne.n	800b212 <__gethex+0x13a>
 800b196:	786b      	ldrb	r3, [r5, #1]
 800b198:	2b2b      	cmp	r3, #43	; 0x2b
 800b19a:	d02f      	beq.n	800b1fc <__gethex+0x124>
 800b19c:	2b2d      	cmp	r3, #45	; 0x2d
 800b19e:	d031      	beq.n	800b204 <__gethex+0x12c>
 800b1a0:	1c69      	adds	r1, r5, #1
 800b1a2:	f04f 0b00 	mov.w	fp, #0
 800b1a6:	7808      	ldrb	r0, [r1, #0]
 800b1a8:	f7ff ff80 	bl	800b0ac <__hexdig_fun>
 800b1ac:	1e42      	subs	r2, r0, #1
 800b1ae:	b2d2      	uxtb	r2, r2
 800b1b0:	2a18      	cmp	r2, #24
 800b1b2:	d82e      	bhi.n	800b212 <__gethex+0x13a>
 800b1b4:	f1a0 0210 	sub.w	r2, r0, #16
 800b1b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1bc:	f7ff ff76 	bl	800b0ac <__hexdig_fun>
 800b1c0:	f100 3cff 	add.w	ip, r0, #4294967295
 800b1c4:	fa5f fc8c 	uxtb.w	ip, ip
 800b1c8:	f1bc 0f18 	cmp.w	ip, #24
 800b1cc:	d91d      	bls.n	800b20a <__gethex+0x132>
 800b1ce:	f1bb 0f00 	cmp.w	fp, #0
 800b1d2:	d000      	beq.n	800b1d6 <__gethex+0xfe>
 800b1d4:	4252      	negs	r2, r2
 800b1d6:	4416      	add	r6, r2
 800b1d8:	f8ca 1000 	str.w	r1, [sl]
 800b1dc:	b1dc      	cbz	r4, 800b216 <__gethex+0x13e>
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bf14      	ite	ne
 800b1e4:	f04f 0800 	movne.w	r8, #0
 800b1e8:	f04f 0806 	moveq.w	r8, #6
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	b005      	add	sp, #20
 800b1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f4:	4645      	mov	r5, r8
 800b1f6:	4626      	mov	r6, r4
 800b1f8:	2401      	movs	r4, #1
 800b1fa:	e7c7      	b.n	800b18c <__gethex+0xb4>
 800b1fc:	f04f 0b00 	mov.w	fp, #0
 800b200:	1ca9      	adds	r1, r5, #2
 800b202:	e7d0      	b.n	800b1a6 <__gethex+0xce>
 800b204:	f04f 0b01 	mov.w	fp, #1
 800b208:	e7fa      	b.n	800b200 <__gethex+0x128>
 800b20a:	230a      	movs	r3, #10
 800b20c:	fb03 0002 	mla	r0, r3, r2, r0
 800b210:	e7d0      	b.n	800b1b4 <__gethex+0xdc>
 800b212:	4629      	mov	r1, r5
 800b214:	e7e0      	b.n	800b1d8 <__gethex+0x100>
 800b216:	eba5 0308 	sub.w	r3, r5, r8
 800b21a:	3b01      	subs	r3, #1
 800b21c:	4621      	mov	r1, r4
 800b21e:	2b07      	cmp	r3, #7
 800b220:	dc0a      	bgt.n	800b238 <__gethex+0x160>
 800b222:	4648      	mov	r0, r9
 800b224:	f7fd ff66 	bl	80090f4 <_Balloc>
 800b228:	4604      	mov	r4, r0
 800b22a:	b940      	cbnz	r0, 800b23e <__gethex+0x166>
 800b22c:	4b61      	ldr	r3, [pc, #388]	; (800b3b4 <__gethex+0x2dc>)
 800b22e:	4602      	mov	r2, r0
 800b230:	21e4      	movs	r1, #228	; 0xe4
 800b232:	4861      	ldr	r0, [pc, #388]	; (800b3b8 <__gethex+0x2e0>)
 800b234:	f7ff feb4 	bl	800afa0 <__assert_func>
 800b238:	3101      	adds	r1, #1
 800b23a:	105b      	asrs	r3, r3, #1
 800b23c:	e7ef      	b.n	800b21e <__gethex+0x146>
 800b23e:	f100 0a14 	add.w	sl, r0, #20
 800b242:	2300      	movs	r3, #0
 800b244:	495a      	ldr	r1, [pc, #360]	; (800b3b0 <__gethex+0x2d8>)
 800b246:	f8cd a004 	str.w	sl, [sp, #4]
 800b24a:	469b      	mov	fp, r3
 800b24c:	45a8      	cmp	r8, r5
 800b24e:	d342      	bcc.n	800b2d6 <__gethex+0x1fe>
 800b250:	9801      	ldr	r0, [sp, #4]
 800b252:	f840 bb04 	str.w	fp, [r0], #4
 800b256:	eba0 000a 	sub.w	r0, r0, sl
 800b25a:	1080      	asrs	r0, r0, #2
 800b25c:	6120      	str	r0, [r4, #16]
 800b25e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b262:	4658      	mov	r0, fp
 800b264:	f7fe f838 	bl	80092d8 <__hi0bits>
 800b268:	683d      	ldr	r5, [r7, #0]
 800b26a:	eba8 0000 	sub.w	r0, r8, r0
 800b26e:	42a8      	cmp	r0, r5
 800b270:	dd59      	ble.n	800b326 <__gethex+0x24e>
 800b272:	eba0 0805 	sub.w	r8, r0, r5
 800b276:	4641      	mov	r1, r8
 800b278:	4620      	mov	r0, r4
 800b27a:	f7fe fbc7 	bl	8009a0c <__any_on>
 800b27e:	4683      	mov	fp, r0
 800b280:	b1b8      	cbz	r0, 800b2b2 <__gethex+0x1da>
 800b282:	f108 33ff 	add.w	r3, r8, #4294967295
 800b286:	1159      	asrs	r1, r3, #5
 800b288:	f003 021f 	and.w	r2, r3, #31
 800b28c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b290:	f04f 0b01 	mov.w	fp, #1
 800b294:	fa0b f202 	lsl.w	r2, fp, r2
 800b298:	420a      	tst	r2, r1
 800b29a:	d00a      	beq.n	800b2b2 <__gethex+0x1da>
 800b29c:	455b      	cmp	r3, fp
 800b29e:	dd06      	ble.n	800b2ae <__gethex+0x1d6>
 800b2a0:	f1a8 0102 	sub.w	r1, r8, #2
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7fe fbb1 	bl	8009a0c <__any_on>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d138      	bne.n	800b320 <__gethex+0x248>
 800b2ae:	f04f 0b02 	mov.w	fp, #2
 800b2b2:	4641      	mov	r1, r8
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f7ff fea7 	bl	800b008 <rshift>
 800b2ba:	4446      	add	r6, r8
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	42b3      	cmp	r3, r6
 800b2c0:	da41      	bge.n	800b346 <__gethex+0x26e>
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4648      	mov	r0, r9
 800b2c6:	f7fd ff55 	bl	8009174 <_Bfree>
 800b2ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	6013      	str	r3, [r2, #0]
 800b2d0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b2d4:	e78a      	b.n	800b1ec <__gethex+0x114>
 800b2d6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b2da:	2a2e      	cmp	r2, #46	; 0x2e
 800b2dc:	d014      	beq.n	800b308 <__gethex+0x230>
 800b2de:	2b20      	cmp	r3, #32
 800b2e0:	d106      	bne.n	800b2f0 <__gethex+0x218>
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	f843 bb04 	str.w	fp, [r3], #4
 800b2e8:	f04f 0b00 	mov.w	fp, #0
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	465b      	mov	r3, fp
 800b2f0:	7828      	ldrb	r0, [r5, #0]
 800b2f2:	9303      	str	r3, [sp, #12]
 800b2f4:	f7ff feda 	bl	800b0ac <__hexdig_fun>
 800b2f8:	9b03      	ldr	r3, [sp, #12]
 800b2fa:	f000 000f 	and.w	r0, r0, #15
 800b2fe:	4098      	lsls	r0, r3
 800b300:	ea4b 0b00 	orr.w	fp, fp, r0
 800b304:	3304      	adds	r3, #4
 800b306:	e7a1      	b.n	800b24c <__gethex+0x174>
 800b308:	45a8      	cmp	r8, r5
 800b30a:	d8e8      	bhi.n	800b2de <__gethex+0x206>
 800b30c:	2201      	movs	r2, #1
 800b30e:	4628      	mov	r0, r5
 800b310:	9303      	str	r3, [sp, #12]
 800b312:	f7ff fdf9 	bl	800af08 <strncmp>
 800b316:	4926      	ldr	r1, [pc, #152]	; (800b3b0 <__gethex+0x2d8>)
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d1df      	bne.n	800b2de <__gethex+0x206>
 800b31e:	e795      	b.n	800b24c <__gethex+0x174>
 800b320:	f04f 0b03 	mov.w	fp, #3
 800b324:	e7c5      	b.n	800b2b2 <__gethex+0x1da>
 800b326:	da0b      	bge.n	800b340 <__gethex+0x268>
 800b328:	eba5 0800 	sub.w	r8, r5, r0
 800b32c:	4621      	mov	r1, r4
 800b32e:	4642      	mov	r2, r8
 800b330:	4648      	mov	r0, r9
 800b332:	f7fe f939 	bl	80095a8 <__lshift>
 800b336:	eba6 0608 	sub.w	r6, r6, r8
 800b33a:	4604      	mov	r4, r0
 800b33c:	f100 0a14 	add.w	sl, r0, #20
 800b340:	f04f 0b00 	mov.w	fp, #0
 800b344:	e7ba      	b.n	800b2bc <__gethex+0x1e4>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	42b3      	cmp	r3, r6
 800b34a:	dd73      	ble.n	800b434 <__gethex+0x35c>
 800b34c:	1b9e      	subs	r6, r3, r6
 800b34e:	42b5      	cmp	r5, r6
 800b350:	dc34      	bgt.n	800b3bc <__gethex+0x2e4>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b02      	cmp	r3, #2
 800b356:	d023      	beq.n	800b3a0 <__gethex+0x2c8>
 800b358:	2b03      	cmp	r3, #3
 800b35a:	d025      	beq.n	800b3a8 <__gethex+0x2d0>
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d115      	bne.n	800b38c <__gethex+0x2b4>
 800b360:	42b5      	cmp	r5, r6
 800b362:	d113      	bne.n	800b38c <__gethex+0x2b4>
 800b364:	2d01      	cmp	r5, #1
 800b366:	d10b      	bne.n	800b380 <__gethex+0x2a8>
 800b368:	9a02      	ldr	r2, [sp, #8]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	2301      	movs	r3, #1
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	f8ca 3000 	str.w	r3, [sl]
 800b376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b378:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b37c:	601c      	str	r4, [r3, #0]
 800b37e:	e735      	b.n	800b1ec <__gethex+0x114>
 800b380:	1e69      	subs	r1, r5, #1
 800b382:	4620      	mov	r0, r4
 800b384:	f7fe fb42 	bl	8009a0c <__any_on>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d1ed      	bne.n	800b368 <__gethex+0x290>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4648      	mov	r0, r9
 800b390:	f7fd fef0 	bl	8009174 <_Bfree>
 800b394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b396:	2300      	movs	r3, #0
 800b398:	6013      	str	r3, [r2, #0]
 800b39a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b39e:	e725      	b.n	800b1ec <__gethex+0x114>
 800b3a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1f2      	bne.n	800b38c <__gethex+0x2b4>
 800b3a6:	e7df      	b.n	800b368 <__gethex+0x290>
 800b3a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1dc      	bne.n	800b368 <__gethex+0x290>
 800b3ae:	e7ed      	b.n	800b38c <__gethex+0x2b4>
 800b3b0:	0800bb8c 	.word	0x0800bb8c
 800b3b4:	0800ba25 	.word	0x0800ba25
 800b3b8:	0800bd36 	.word	0x0800bd36
 800b3bc:	f106 38ff 	add.w	r8, r6, #4294967295
 800b3c0:	f1bb 0f00 	cmp.w	fp, #0
 800b3c4:	d133      	bne.n	800b42e <__gethex+0x356>
 800b3c6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ca:	d004      	beq.n	800b3d6 <__gethex+0x2fe>
 800b3cc:	4641      	mov	r1, r8
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7fe fb1c 	bl	8009a0c <__any_on>
 800b3d4:	4683      	mov	fp, r0
 800b3d6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b3da:	2301      	movs	r3, #1
 800b3dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b3e0:	f008 081f 	and.w	r8, r8, #31
 800b3e4:	fa03 f308 	lsl.w	r3, r3, r8
 800b3e8:	4213      	tst	r3, r2
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	bf18      	it	ne
 800b3f0:	f04b 0b02 	orrne.w	fp, fp, #2
 800b3f4:	1bad      	subs	r5, r5, r6
 800b3f6:	f7ff fe07 	bl	800b008 <rshift>
 800b3fa:	687e      	ldr	r6, [r7, #4]
 800b3fc:	f04f 0802 	mov.w	r8, #2
 800b400:	f1bb 0f00 	cmp.w	fp, #0
 800b404:	d04a      	beq.n	800b49c <__gethex+0x3c4>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d016      	beq.n	800b43a <__gethex+0x362>
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	d018      	beq.n	800b442 <__gethex+0x36a>
 800b410:	2b01      	cmp	r3, #1
 800b412:	d109      	bne.n	800b428 <__gethex+0x350>
 800b414:	f01b 0f02 	tst.w	fp, #2
 800b418:	d006      	beq.n	800b428 <__gethex+0x350>
 800b41a:	f8da 3000 	ldr.w	r3, [sl]
 800b41e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b422:	f01b 0f01 	tst.w	fp, #1
 800b426:	d10f      	bne.n	800b448 <__gethex+0x370>
 800b428:	f048 0810 	orr.w	r8, r8, #16
 800b42c:	e036      	b.n	800b49c <__gethex+0x3c4>
 800b42e:	f04f 0b01 	mov.w	fp, #1
 800b432:	e7d0      	b.n	800b3d6 <__gethex+0x2fe>
 800b434:	f04f 0801 	mov.w	r8, #1
 800b438:	e7e2      	b.n	800b400 <__gethex+0x328>
 800b43a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b43c:	f1c3 0301 	rsb	r3, r3, #1
 800b440:	930f      	str	r3, [sp, #60]	; 0x3c
 800b442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0ef      	beq.n	800b428 <__gethex+0x350>
 800b448:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b44c:	f104 0214 	add.w	r2, r4, #20
 800b450:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b45a:	2300      	movs	r3, #0
 800b45c:	4694      	mov	ip, r2
 800b45e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b462:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b466:	d01e      	beq.n	800b4a6 <__gethex+0x3ce>
 800b468:	3101      	adds	r1, #1
 800b46a:	f8cc 1000 	str.w	r1, [ip]
 800b46e:	f1b8 0f02 	cmp.w	r8, #2
 800b472:	f104 0214 	add.w	r2, r4, #20
 800b476:	d13d      	bne.n	800b4f4 <__gethex+0x41c>
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	42ab      	cmp	r3, r5
 800b47e:	d10b      	bne.n	800b498 <__gethex+0x3c0>
 800b480:	1169      	asrs	r1, r5, #5
 800b482:	2301      	movs	r3, #1
 800b484:	f005 051f 	and.w	r5, r5, #31
 800b488:	fa03 f505 	lsl.w	r5, r3, r5
 800b48c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b490:	421d      	tst	r5, r3
 800b492:	bf18      	it	ne
 800b494:	f04f 0801 	movne.w	r8, #1
 800b498:	f048 0820 	orr.w	r8, r8, #32
 800b49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b49e:	601c      	str	r4, [r3, #0]
 800b4a0:	9b02      	ldr	r3, [sp, #8]
 800b4a2:	601e      	str	r6, [r3, #0]
 800b4a4:	e6a2      	b.n	800b1ec <__gethex+0x114>
 800b4a6:	4290      	cmp	r0, r2
 800b4a8:	f842 3c04 	str.w	r3, [r2, #-4]
 800b4ac:	d8d6      	bhi.n	800b45c <__gethex+0x384>
 800b4ae:	68a2      	ldr	r2, [r4, #8]
 800b4b0:	4593      	cmp	fp, r2
 800b4b2:	db17      	blt.n	800b4e4 <__gethex+0x40c>
 800b4b4:	6861      	ldr	r1, [r4, #4]
 800b4b6:	4648      	mov	r0, r9
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	f7fd fe1b 	bl	80090f4 <_Balloc>
 800b4be:	4682      	mov	sl, r0
 800b4c0:	b918      	cbnz	r0, 800b4ca <__gethex+0x3f2>
 800b4c2:	4b1b      	ldr	r3, [pc, #108]	; (800b530 <__gethex+0x458>)
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	2184      	movs	r1, #132	; 0x84
 800b4c8:	e6b3      	b.n	800b232 <__gethex+0x15a>
 800b4ca:	6922      	ldr	r2, [r4, #16]
 800b4cc:	3202      	adds	r2, #2
 800b4ce:	f104 010c 	add.w	r1, r4, #12
 800b4d2:	0092      	lsls	r2, r2, #2
 800b4d4:	300c      	adds	r0, #12
 800b4d6:	f7fc fe7c 	bl	80081d2 <memcpy>
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4648      	mov	r0, r9
 800b4de:	f7fd fe49 	bl	8009174 <_Bfree>
 800b4e2:	4654      	mov	r4, sl
 800b4e4:	6922      	ldr	r2, [r4, #16]
 800b4e6:	1c51      	adds	r1, r2, #1
 800b4e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b4ec:	6121      	str	r1, [r4, #16]
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	6151      	str	r1, [r2, #20]
 800b4f2:	e7bc      	b.n	800b46e <__gethex+0x396>
 800b4f4:	6921      	ldr	r1, [r4, #16]
 800b4f6:	4559      	cmp	r1, fp
 800b4f8:	dd0b      	ble.n	800b512 <__gethex+0x43a>
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f7ff fd83 	bl	800b008 <rshift>
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	3601      	adds	r6, #1
 800b506:	42b3      	cmp	r3, r6
 800b508:	f6ff aedb 	blt.w	800b2c2 <__gethex+0x1ea>
 800b50c:	f04f 0801 	mov.w	r8, #1
 800b510:	e7c2      	b.n	800b498 <__gethex+0x3c0>
 800b512:	f015 051f 	ands.w	r5, r5, #31
 800b516:	d0f9      	beq.n	800b50c <__gethex+0x434>
 800b518:	9b01      	ldr	r3, [sp, #4]
 800b51a:	441a      	add	r2, r3
 800b51c:	f1c5 0520 	rsb	r5, r5, #32
 800b520:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b524:	f7fd fed8 	bl	80092d8 <__hi0bits>
 800b528:	42a8      	cmp	r0, r5
 800b52a:	dbe6      	blt.n	800b4fa <__gethex+0x422>
 800b52c:	e7ee      	b.n	800b50c <__gethex+0x434>
 800b52e:	bf00      	nop
 800b530:	0800ba25 	.word	0x0800ba25

0800b534 <L_shift>:
 800b534:	f1c2 0208 	rsb	r2, r2, #8
 800b538:	0092      	lsls	r2, r2, #2
 800b53a:	b570      	push	{r4, r5, r6, lr}
 800b53c:	f1c2 0620 	rsb	r6, r2, #32
 800b540:	6843      	ldr	r3, [r0, #4]
 800b542:	6804      	ldr	r4, [r0, #0]
 800b544:	fa03 f506 	lsl.w	r5, r3, r6
 800b548:	432c      	orrs	r4, r5
 800b54a:	40d3      	lsrs	r3, r2
 800b54c:	6004      	str	r4, [r0, #0]
 800b54e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b552:	4288      	cmp	r0, r1
 800b554:	d3f4      	bcc.n	800b540 <L_shift+0xc>
 800b556:	bd70      	pop	{r4, r5, r6, pc}

0800b558 <__match>:
 800b558:	b530      	push	{r4, r5, lr}
 800b55a:	6803      	ldr	r3, [r0, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b562:	b914      	cbnz	r4, 800b56a <__match+0x12>
 800b564:	6003      	str	r3, [r0, #0]
 800b566:	2001      	movs	r0, #1
 800b568:	bd30      	pop	{r4, r5, pc}
 800b56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b56e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b572:	2d19      	cmp	r5, #25
 800b574:	bf98      	it	ls
 800b576:	3220      	addls	r2, #32
 800b578:	42a2      	cmp	r2, r4
 800b57a:	d0f0      	beq.n	800b55e <__match+0x6>
 800b57c:	2000      	movs	r0, #0
 800b57e:	e7f3      	b.n	800b568 <__match+0x10>

0800b580 <__hexnan>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	680b      	ldr	r3, [r1, #0]
 800b586:	6801      	ldr	r1, [r0, #0]
 800b588:	115e      	asrs	r6, r3, #5
 800b58a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b58e:	f013 031f 	ands.w	r3, r3, #31
 800b592:	b087      	sub	sp, #28
 800b594:	bf18      	it	ne
 800b596:	3604      	addne	r6, #4
 800b598:	2500      	movs	r5, #0
 800b59a:	1f37      	subs	r7, r6, #4
 800b59c:	4682      	mov	sl, r0
 800b59e:	4690      	mov	r8, r2
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5a6:	46b9      	mov	r9, r7
 800b5a8:	463c      	mov	r4, r7
 800b5aa:	9502      	str	r5, [sp, #8]
 800b5ac:	46ab      	mov	fp, r5
 800b5ae:	784a      	ldrb	r2, [r1, #1]
 800b5b0:	1c4b      	adds	r3, r1, #1
 800b5b2:	9303      	str	r3, [sp, #12]
 800b5b4:	b342      	cbz	r2, 800b608 <__hexnan+0x88>
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	9105      	str	r1, [sp, #20]
 800b5ba:	9204      	str	r2, [sp, #16]
 800b5bc:	f7ff fd76 	bl	800b0ac <__hexdig_fun>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d14f      	bne.n	800b664 <__hexnan+0xe4>
 800b5c4:	9a04      	ldr	r2, [sp, #16]
 800b5c6:	9905      	ldr	r1, [sp, #20]
 800b5c8:	2a20      	cmp	r2, #32
 800b5ca:	d818      	bhi.n	800b5fe <__hexnan+0x7e>
 800b5cc:	9b02      	ldr	r3, [sp, #8]
 800b5ce:	459b      	cmp	fp, r3
 800b5d0:	dd13      	ble.n	800b5fa <__hexnan+0x7a>
 800b5d2:	454c      	cmp	r4, r9
 800b5d4:	d206      	bcs.n	800b5e4 <__hexnan+0x64>
 800b5d6:	2d07      	cmp	r5, #7
 800b5d8:	dc04      	bgt.n	800b5e4 <__hexnan+0x64>
 800b5da:	462a      	mov	r2, r5
 800b5dc:	4649      	mov	r1, r9
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f7ff ffa8 	bl	800b534 <L_shift>
 800b5e4:	4544      	cmp	r4, r8
 800b5e6:	d950      	bls.n	800b68a <__hexnan+0x10a>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f1a4 0904 	sub.w	r9, r4, #4
 800b5ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5f2:	f8cd b008 	str.w	fp, [sp, #8]
 800b5f6:	464c      	mov	r4, r9
 800b5f8:	461d      	mov	r5, r3
 800b5fa:	9903      	ldr	r1, [sp, #12]
 800b5fc:	e7d7      	b.n	800b5ae <__hexnan+0x2e>
 800b5fe:	2a29      	cmp	r2, #41	; 0x29
 800b600:	d155      	bne.n	800b6ae <__hexnan+0x12e>
 800b602:	3102      	adds	r1, #2
 800b604:	f8ca 1000 	str.w	r1, [sl]
 800b608:	f1bb 0f00 	cmp.w	fp, #0
 800b60c:	d04f      	beq.n	800b6ae <__hexnan+0x12e>
 800b60e:	454c      	cmp	r4, r9
 800b610:	d206      	bcs.n	800b620 <__hexnan+0xa0>
 800b612:	2d07      	cmp	r5, #7
 800b614:	dc04      	bgt.n	800b620 <__hexnan+0xa0>
 800b616:	462a      	mov	r2, r5
 800b618:	4649      	mov	r1, r9
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7ff ff8a 	bl	800b534 <L_shift>
 800b620:	4544      	cmp	r4, r8
 800b622:	d934      	bls.n	800b68e <__hexnan+0x10e>
 800b624:	f1a8 0204 	sub.w	r2, r8, #4
 800b628:	4623      	mov	r3, r4
 800b62a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b62e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b632:	429f      	cmp	r7, r3
 800b634:	d2f9      	bcs.n	800b62a <__hexnan+0xaa>
 800b636:	1b3b      	subs	r3, r7, r4
 800b638:	f023 0303 	bic.w	r3, r3, #3
 800b63c:	3304      	adds	r3, #4
 800b63e:	3e03      	subs	r6, #3
 800b640:	3401      	adds	r4, #1
 800b642:	42a6      	cmp	r6, r4
 800b644:	bf38      	it	cc
 800b646:	2304      	movcc	r3, #4
 800b648:	4443      	add	r3, r8
 800b64a:	2200      	movs	r2, #0
 800b64c:	f843 2b04 	str.w	r2, [r3], #4
 800b650:	429f      	cmp	r7, r3
 800b652:	d2fb      	bcs.n	800b64c <__hexnan+0xcc>
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	b91b      	cbnz	r3, 800b660 <__hexnan+0xe0>
 800b658:	4547      	cmp	r7, r8
 800b65a:	d126      	bne.n	800b6aa <__hexnan+0x12a>
 800b65c:	2301      	movs	r3, #1
 800b65e:	603b      	str	r3, [r7, #0]
 800b660:	2005      	movs	r0, #5
 800b662:	e025      	b.n	800b6b0 <__hexnan+0x130>
 800b664:	3501      	adds	r5, #1
 800b666:	2d08      	cmp	r5, #8
 800b668:	f10b 0b01 	add.w	fp, fp, #1
 800b66c:	dd06      	ble.n	800b67c <__hexnan+0xfc>
 800b66e:	4544      	cmp	r4, r8
 800b670:	d9c3      	bls.n	800b5fa <__hexnan+0x7a>
 800b672:	2300      	movs	r3, #0
 800b674:	f844 3c04 	str.w	r3, [r4, #-4]
 800b678:	2501      	movs	r5, #1
 800b67a:	3c04      	subs	r4, #4
 800b67c:	6822      	ldr	r2, [r4, #0]
 800b67e:	f000 000f 	and.w	r0, r0, #15
 800b682:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b686:	6020      	str	r0, [r4, #0]
 800b688:	e7b7      	b.n	800b5fa <__hexnan+0x7a>
 800b68a:	2508      	movs	r5, #8
 800b68c:	e7b5      	b.n	800b5fa <__hexnan+0x7a>
 800b68e:	9b01      	ldr	r3, [sp, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0df      	beq.n	800b654 <__hexnan+0xd4>
 800b694:	f1c3 0320 	rsb	r3, r3, #32
 800b698:	f04f 32ff 	mov.w	r2, #4294967295
 800b69c:	40da      	lsrs	r2, r3
 800b69e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b6a8:	e7d4      	b.n	800b654 <__hexnan+0xd4>
 800b6aa:	3f04      	subs	r7, #4
 800b6ac:	e7d2      	b.n	800b654 <__hexnan+0xd4>
 800b6ae:	2004      	movs	r0, #4
 800b6b0:	b007      	add	sp, #28
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6b6 <__ascii_mbtowc>:
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	b901      	cbnz	r1, 800b6bc <__ascii_mbtowc+0x6>
 800b6ba:	a901      	add	r1, sp, #4
 800b6bc:	b142      	cbz	r2, 800b6d0 <__ascii_mbtowc+0x1a>
 800b6be:	b14b      	cbz	r3, 800b6d4 <__ascii_mbtowc+0x1e>
 800b6c0:	7813      	ldrb	r3, [r2, #0]
 800b6c2:	600b      	str	r3, [r1, #0]
 800b6c4:	7812      	ldrb	r2, [r2, #0]
 800b6c6:	1e10      	subs	r0, r2, #0
 800b6c8:	bf18      	it	ne
 800b6ca:	2001      	movne	r0, #1
 800b6cc:	b002      	add	sp, #8
 800b6ce:	4770      	bx	lr
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	e7fb      	b.n	800b6cc <__ascii_mbtowc+0x16>
 800b6d4:	f06f 0001 	mvn.w	r0, #1
 800b6d8:	e7f8      	b.n	800b6cc <__ascii_mbtowc+0x16>

0800b6da <_realloc_r>:
 800b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	4680      	mov	r8, r0
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	460e      	mov	r6, r1
 800b6e4:	b921      	cbnz	r1, 800b6f0 <_realloc_r+0x16>
 800b6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	f7fd bc76 	b.w	8008fdc <_malloc_r>
 800b6f0:	b92a      	cbnz	r2, 800b6fe <_realloc_r+0x24>
 800b6f2:	f7fd fbff 	bl	8008ef4 <_free_r>
 800b6f6:	4625      	mov	r5, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6fe:	f000 f842 	bl	800b786 <_malloc_usable_size_r>
 800b702:	4284      	cmp	r4, r0
 800b704:	4607      	mov	r7, r0
 800b706:	d802      	bhi.n	800b70e <_realloc_r+0x34>
 800b708:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b70c:	d812      	bhi.n	800b734 <_realloc_r+0x5a>
 800b70e:	4621      	mov	r1, r4
 800b710:	4640      	mov	r0, r8
 800b712:	f7fd fc63 	bl	8008fdc <_malloc_r>
 800b716:	4605      	mov	r5, r0
 800b718:	2800      	cmp	r0, #0
 800b71a:	d0ed      	beq.n	800b6f8 <_realloc_r+0x1e>
 800b71c:	42bc      	cmp	r4, r7
 800b71e:	4622      	mov	r2, r4
 800b720:	4631      	mov	r1, r6
 800b722:	bf28      	it	cs
 800b724:	463a      	movcs	r2, r7
 800b726:	f7fc fd54 	bl	80081d2 <memcpy>
 800b72a:	4631      	mov	r1, r6
 800b72c:	4640      	mov	r0, r8
 800b72e:	f7fd fbe1 	bl	8008ef4 <_free_r>
 800b732:	e7e1      	b.n	800b6f8 <_realloc_r+0x1e>
 800b734:	4635      	mov	r5, r6
 800b736:	e7df      	b.n	800b6f8 <_realloc_r+0x1e>

0800b738 <__ascii_wctomb>:
 800b738:	b149      	cbz	r1, 800b74e <__ascii_wctomb+0x16>
 800b73a:	2aff      	cmp	r2, #255	; 0xff
 800b73c:	bf85      	ittet	hi
 800b73e:	238a      	movhi	r3, #138	; 0x8a
 800b740:	6003      	strhi	r3, [r0, #0]
 800b742:	700a      	strbls	r2, [r1, #0]
 800b744:	f04f 30ff 	movhi.w	r0, #4294967295
 800b748:	bf98      	it	ls
 800b74a:	2001      	movls	r0, #1
 800b74c:	4770      	bx	lr
 800b74e:	4608      	mov	r0, r1
 800b750:	4770      	bx	lr
	...

0800b754 <fiprintf>:
 800b754:	b40e      	push	{r1, r2, r3}
 800b756:	b503      	push	{r0, r1, lr}
 800b758:	4601      	mov	r1, r0
 800b75a:	ab03      	add	r3, sp, #12
 800b75c:	4805      	ldr	r0, [pc, #20]	; (800b774 <fiprintf+0x20>)
 800b75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b762:	6800      	ldr	r0, [r0, #0]
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	f7ff f98b 	bl	800aa80 <_vfiprintf_r>
 800b76a:	b002      	add	sp, #8
 800b76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b770:	b003      	add	sp, #12
 800b772:	4770      	bx	lr
 800b774:	20000068 	.word	0x20000068

0800b778 <abort>:
 800b778:	b508      	push	{r3, lr}
 800b77a:	2006      	movs	r0, #6
 800b77c:	f000 f834 	bl	800b7e8 <raise>
 800b780:	2001      	movs	r0, #1
 800b782:	f7f6 fa0f 	bl	8001ba4 <_exit>

0800b786 <_malloc_usable_size_r>:
 800b786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b78a:	1f18      	subs	r0, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfbc      	itt	lt
 800b790:	580b      	ldrlt	r3, [r1, r0]
 800b792:	18c0      	addlt	r0, r0, r3
 800b794:	4770      	bx	lr

0800b796 <_raise_r>:
 800b796:	291f      	cmp	r1, #31
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4604      	mov	r4, r0
 800b79c:	460d      	mov	r5, r1
 800b79e:	d904      	bls.n	800b7aa <_raise_r+0x14>
 800b7a0:	2316      	movs	r3, #22
 800b7a2:	6003      	str	r3, [r0, #0]
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
 800b7aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b7ac:	b112      	cbz	r2, 800b7b4 <_raise_r+0x1e>
 800b7ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7b2:	b94b      	cbnz	r3, 800b7c8 <_raise_r+0x32>
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 f831 	bl	800b81c <_getpid_r>
 800b7ba:	462a      	mov	r2, r5
 800b7bc:	4601      	mov	r1, r0
 800b7be:	4620      	mov	r0, r4
 800b7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7c4:	f000 b818 	b.w	800b7f8 <_kill_r>
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d00a      	beq.n	800b7e2 <_raise_r+0x4c>
 800b7cc:	1c59      	adds	r1, r3, #1
 800b7ce:	d103      	bne.n	800b7d8 <_raise_r+0x42>
 800b7d0:	2316      	movs	r3, #22
 800b7d2:	6003      	str	r3, [r0, #0]
 800b7d4:	2001      	movs	r0, #1
 800b7d6:	e7e7      	b.n	800b7a8 <_raise_r+0x12>
 800b7d8:	2400      	movs	r4, #0
 800b7da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7de:	4628      	mov	r0, r5
 800b7e0:	4798      	blx	r3
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	e7e0      	b.n	800b7a8 <_raise_r+0x12>
	...

0800b7e8 <raise>:
 800b7e8:	4b02      	ldr	r3, [pc, #8]	; (800b7f4 <raise+0xc>)
 800b7ea:	4601      	mov	r1, r0
 800b7ec:	6818      	ldr	r0, [r3, #0]
 800b7ee:	f7ff bfd2 	b.w	800b796 <_raise_r>
 800b7f2:	bf00      	nop
 800b7f4:	20000068 	.word	0x20000068

0800b7f8 <_kill_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4d07      	ldr	r5, [pc, #28]	; (800b818 <_kill_r+0x20>)
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4604      	mov	r4, r0
 800b800:	4608      	mov	r0, r1
 800b802:	4611      	mov	r1, r2
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	f7f6 f9bd 	bl	8001b84 <_kill>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	d102      	bne.n	800b814 <_kill_r+0x1c>
 800b80e:	682b      	ldr	r3, [r5, #0]
 800b810:	b103      	cbz	r3, 800b814 <_kill_r+0x1c>
 800b812:	6023      	str	r3, [r4, #0]
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	bf00      	nop
 800b818:	200044a8 	.word	0x200044a8

0800b81c <_getpid_r>:
 800b81c:	f7f6 b9aa 	b.w	8001b74 <_getpid>

0800b820 <_init>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr

0800b82c <_fini>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr
