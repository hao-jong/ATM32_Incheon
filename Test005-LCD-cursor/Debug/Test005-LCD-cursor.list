
Test005-LCD-cursor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005dfc  08005dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005edc  08005edc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee4  08005ee4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000068  08005f54  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005f54  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011be6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000279a  00000000  00000000  00031cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00034460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8f  00000000  00000000  00035598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192fe  00000000  00000000  00036327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001505c  00000000  00000000  0004f625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e49d  00000000  00000000  00064681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052a8  00000000  00000000  00102b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00107dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005de4 	.word	0x08005de4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005de4 	.word	0x08005de4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd_command>:
#include "main.h"
extern I2C_HandleTypeDef hi2c2;
#define I2C_ADDR 0x4E  //  0x27 << 1

void lcd_command(char cmd) // cmd_bit : abcd efgh
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	char n1, n2;
	char n3, n4;
	char dd[4];
	n1 = cmd & 0xf0;			// n1: abcd 0000 ==> upper nibble
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f023 030f 	bic.w	r3, r3, #15
 800058c:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd & 0x0f) << 4;		// n2: efgh 0000 ==> lower nibble to upper
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)	|0|0; //RW|EN|NC|RS; 0x0c
 8000594:	230c      	movs	r3, #12
 8000596:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|	0	|0|0; //RW|EN|NC|RS; 0x08
 8000598:	2308      	movs	r3, #8
 800059a:	733b      	strb	r3, [r7, #12]

	dd[0] = n1 | n3;			//
 800059c:	7bfa      	ldrb	r2, [r7, #15]
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 80005a6:	7bfa      	ldrb	r2, [r7, #15]
 80005a8:	7b3b      	ldrb	r3, [r7, #12]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 80005b0:	7bba      	ldrb	r2, [r7, #14]
 80005b2:	7b7b      	ldrb	r3, [r7, #13]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 80005ba:	7bba      	ldrb	r2, [r7, #14]
 80005bc:	7b3b      	ldrb	r3, [r7, #12]
 80005be:	4313      	orrs	r3, r2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR, dd, 4, 10);
 80005c4:	f107 0208 	add.w	r2, r7, #8
 80005c8:	230a      	movs	r3, #10
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2304      	movs	r3, #4
 80005ce:	214e      	movs	r1, #78	; 0x4e
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <lcd_command+0x64>)
 80005d2:	f002 fa6b 	bl	8002aac <HAL_I2C_Master_Transmit>

}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000012c 	.word	0x2000012c

080005e4 <lcd_data>:
void lcd_data(char ch)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	char n1, n2;
	char n3, n4;
	char dd[4];
	n1 = ch & 0xf0;			// n1: abcd 0000 ==> upper nibble
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f023 030f 	bic.w	r3, r3, #15
 80005f4:	73fb      	strb	r3, [r7, #15]
	n2 = (ch & 0x0f) << 4;		// n2: efgh 0000 ==> lower nibble to upper
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)	|0|(1<<0); //RW|EN|NC|RS; 0x0d
 80005fc:	230d      	movs	r3, #13
 80005fe:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|	0	|0|(1<<0); //RW|EN|NC|RS; 0x09
 8000600:	2309      	movs	r3, #9
 8000602:	733b      	strb	r3, [r7, #12]

	dd[0] = n1 | n3;			//
 8000604:	7bfa      	ldrb	r2, [r7, #15]
 8000606:	7b7b      	ldrb	r3, [r7, #13]
 8000608:	4313      	orrs	r3, r2
 800060a:	b2db      	uxtb	r3, r3
 800060c:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	7b3b      	ldrb	r3, [r7, #12]
 8000612:	4313      	orrs	r3, r2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000618:	7bba      	ldrb	r2, [r7, #14]
 800061a:	7b7b      	ldrb	r3, [r7, #13]
 800061c:	4313      	orrs	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 8000622:	7bba      	ldrb	r2, [r7, #14]
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	4313      	orrs	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR, dd, 4, 10);
 800062c:	f107 0208 	add.w	r2, r7, #8
 8000630:	230a      	movs	r3, #10
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2304      	movs	r3, #4
 8000636:	214e      	movs	r1, #78	; 0x4e
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <lcd_data+0x64>)
 800063a:	f002 fa37 	bl	8002aac <HAL_I2C_Master_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000012c 	.word	0x2000012c

0800064c <lcd_init>:
void lcd_init()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	lcd_command(0x01); // screen clear
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff ff93 	bl	800057c <lcd_command>
	lcd_command(0x02); // cursor home
 8000656:	2002      	movs	r0, #2
 8000658:	f7ff ff90 	bl	800057c <lcd_command>
	lcd_command(0x06);
 800065c:	2006      	movs	r0, #6
 800065e:	f7ff ff8d 	bl	800057c <lcd_command>
	lcd_command(0x0f);
 8000662:	200f      	movs	r0, #15
 8000664:	f7ff ff8a 	bl	800057c <lcd_command>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <I2C_scan>:


int I2C_scan()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
		for(int addr = 0; addr <127; addr++)
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	e01c      	b.n	80006b2 <I2C_scan+0x46>
	{

		if(addr%16 == 0)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <I2C_scan+0x1c>
		{
			printf("\r\n");
 8000682:	4810      	ldr	r0, [pc, #64]	; (80006c4 <I2C_scan+0x58>)
 8000684:	f004 fb6c 	bl	8004d60 <puts>
		}

		if(HAL_I2C_IsDeviceReady(&hi2c2,addr,1,10) == HAL_OK)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	b299      	uxth	r1, r3
 800068c:	230a      	movs	r3, #10
 800068e:	2201      	movs	r2, #1
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <I2C_scan+0x5c>)
 8000692:	f002 fb09 	bl	8002ca8 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d104      	bne.n	80006a6 <I2C_scan+0x3a>
		{
			printf("  %02x ", addr);
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <I2C_scan+0x60>)
 80006a0:	f004 faf8 	bl	8004c94 <iprintf>
 80006a4:	e002      	b.n	80006ac <I2C_scan+0x40>
		}

		else
		{
			printf("  .  ");
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <I2C_scan+0x64>)
 80006a8:	f004 faf4 	bl	8004c94 <iprintf>
		for(int addr = 0; addr <127; addr++)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b7e      	cmp	r3, #126	; 0x7e
 80006b6:	dddf      	ble.n	8000678 <I2C_scan+0xc>
		}


	}
}
 80006b8:	bf00      	nop
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	08005dfc 	.word	0x08005dfc
 80006c8:	2000012c 	.word	0x2000012c
 80006cc:	08005e00 	.word	0x08005e00
 80006d0:	08005e08 	.word	0x08005e08

080006d4 <lcd_print>:
	lcd_data('o');

}

void lcd_print(char *str)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	while(*str)
 80006dc:	e006      	b.n	80006ec <lcd_print+0x18>
	{
		lcd_data(*str++);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff7c 	bl	80005e4 <lcd_data>
	while(*str)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f4      	bne.n	80006de <lcd_print+0xa>
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <lcd_printEx>:

void lcd_printEx(char *str, int ln)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	6039      	str	r1, [r7, #0]
	if(ln == 0)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d102      	bne.n	8000714 <lcd_printEx+0x16>
	{
		lcd_command(0x80);
 800070e:	2080      	movs	r0, #128	; 0x80
 8000710:	f7ff ff34 	bl	800057c <lcd_command>

	}
	if(ln == 1)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d102      	bne.n	8000720 <lcd_printEx+0x22>
	{
		lcd_command(0xc0);
 800071a:	20c0      	movs	r0, #192	; 0xc0
 800071c:	f7ff ff2e 	bl	800057c <lcd_command>

	}
	lcd_print(str);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffd7 	bl	80006d4 <lcd_print>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <num2char4>:


void num2char4(int num, char* buffer)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
    // 범위 체크 (0-9999)
    if (num > 9999) num = 9999;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000740:	4293      	cmp	r3, r2
 8000742:	dd02      	ble.n	800074a <num2char4+0x1a>
 8000744:	f242 730f 	movw	r3, #9999	; 0x270f
 8000748:	607b      	str	r3, [r7, #4]
    if (num < 0) num = 0;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	da01      	bge.n	8000754 <num2char4+0x24>
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]

    // 각 자릿수를 문자로 변환
    buffer[0] = '0' + (num / 1000);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <num2char4+0xd4>)
 8000758:	fb82 1203 	smull	r1, r2, r2, r3
 800075c:	1192      	asrs	r2, r2, #6
 800075e:	17db      	asrs	r3, r3, #31
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3330      	adds	r3, #48	; 0x30
 8000766:	b2da      	uxtb	r2, r3
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	701a      	strb	r2, [r3, #0]
    buffer[1] = '0' + ((num % 1000) / 100);
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <num2char4+0xd4>)
 8000770:	fb83 1302 	smull	r1, r3, r3, r2
 8000774:	1199      	asrs	r1, r3, #6
 8000776:	17d3      	asrs	r3, r2, #31
 8000778:	1acb      	subs	r3, r1, r3
 800077a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800077e:	fb01 f303 	mul.w	r3, r1, r3
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <num2char4+0xd8>)
 8000786:	fb82 1203 	smull	r1, r2, r2, r3
 800078a:	1152      	asrs	r2, r2, #5
 800078c:	17db      	asrs	r3, r3, #31
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	3230      	adds	r2, #48	; 0x30
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	701a      	strb	r2, [r3, #0]
    buffer[2] = '0' + ((num % 100) / 10);
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <num2char4+0xd8>)
 80007a0:	fb83 1302 	smull	r1, r3, r3, r2
 80007a4:	1159      	asrs	r1, r3, #5
 80007a6:	17d3      	asrs	r3, r2, #31
 80007a8:	1acb      	subs	r3, r1, r3
 80007aa:	2164      	movs	r1, #100	; 0x64
 80007ac:	fb01 f303 	mul.w	r3, r1, r3
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <num2char4+0xdc>)
 80007b4:	fb82 1203 	smull	r1, r2, r2, r3
 80007b8:	1092      	asrs	r2, r2, #2
 80007ba:	17db      	asrs	r3, r3, #31
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3302      	adds	r3, #2
 80007c4:	3230      	adds	r2, #48	; 0x30
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	701a      	strb	r2, [r3, #0]
    buffer[3] = '0' + (num % 10);
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <num2char4+0xdc>)
 80007ce:	fb83 1302 	smull	r1, r3, r3, r2
 80007d2:	1099      	asrs	r1, r3, #2
 80007d4:	17d3      	asrs	r3, r2, #31
 80007d6:	1ac9      	subs	r1, r1, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	1ad1      	subs	r1, r2, r3
 80007e2:	b2ca      	uxtb	r2, r1
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	3303      	adds	r3, #3
 80007e8:	3230      	adds	r2, #48	; 0x30
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	701a      	strb	r2, [r3, #0]
    buffer[4] = '\0';  // 문자열 종료
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	10624dd3 	.word	0x10624dd3
 8000808:	51eb851f 	.word	0x51eb851f
 800080c:	66666667 	.word	0x66666667

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fd35 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f853 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9e5 	bl	8000bec <MX_GPIO_Init>
  MX_DMA_Init();
 8000822:	f000 f9c3 	bl	8000bac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000826:	f000 f997 	bl	8000b58 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800082a:	f000 f919 	bl	8000a60 <MX_I2C2_Init>
  MX_ADC1_Init();
 800082e:	f000 f8b3 	bl	8000998 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000832:	f000 f943 	bl	8000abc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("LCD (1602)-cursor");
 8000836:	481e      	ldr	r0, [pc, #120]	; (80008b0 <main+0xa0>)
 8000838:	f000 fa90 	bl	8000d5c <ProgramStart>
  I2C_scan();
 800083c:	f7ff ff16 	bl	800066c <I2C_scan>
  lcd_init();
 8000840:	f7ff ff04 	bl	800064c <lcd_init>
  HAL_ADC_Start_DMA(&hadc1,val, 2);
 8000844:	2202      	movs	r2, #2
 8000846:	491b      	ldr	r1, [pc, #108]	; (80008b4 <main+0xa4>)
 8000848:	481b      	ldr	r0, [pc, #108]	; (80008b8 <main+0xa8>)
 800084a:	f000 fdf5 	bl	8001438 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800084e:	481b      	ldr	r0, [pc, #108]	; (80008bc <main+0xac>)
 8000850:	f003 fa9c 	bl	8003d8c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      num2char4(val[0], buffer1);
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <main+0xa4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f107 0208 	add.w	r2, r7, #8
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff66 	bl	8000730 <num2char4>
      HAL_Delay(10);
 8000864:	200a      	movs	r0, #10
 8000866:	f000 fd7f 	bl	8001368 <HAL_Delay>

      num2char4(val[1], buffer2);
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <main+0xa4>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	463a      	mov	r2, r7
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff5c 	bl	8000730 <num2char4>
      HAL_Delay(10);
 8000878:	200a      	movs	r0, #10
 800087a:	f000 fd75 	bl	8001368 <HAL_Delay>


      lcd_printEx(buffer1, 0);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff3a 	bl	80006fe <lcd_printEx>
      HAL_Delay(30);
 800088a:	201e      	movs	r0, #30
 800088c:	f000 fd6c 	bl	8001368 <HAL_Delay>
      lcd_printEx(buffer2, 1);
 8000890:	463b      	mov	r3, r7
 8000892:	2101      	movs	r1, #1
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff32 	bl	80006fe <lcd_printEx>
      HAL_Delay(30);
 800089a:	201e      	movs	r0, #30
 800089c:	f000 fd64 	bl	8001368 <HAL_Delay>

      printf("ADC1: %s, ADC2: %s\r\n", buffer1, buffer2);
 80008a0:	463a      	mov	r2, r7
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <main+0xb0>)
 80008aa:	f004 f9f3 	bl	8004c94 <iprintf>
  {
 80008ae:	e7d1      	b.n	8000854 <main+0x44>
 80008b0:	08005e10 	.word	0x08005e10
 80008b4:	20000210 	.word	0x20000210
 80008b8:	20000084 	.word	0x20000084
 80008bc:	20000180 	.word	0x20000180
 80008c0:	08005e24 	.word	0x08005e24

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	; 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fb44 	bl	8004f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a27      	ldr	r2, [pc, #156]	; (8000990 <SystemClock_Config+0xcc>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <SystemClock_Config+0xd0>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	2310      	movs	r3, #16
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092c:	2302      	movs	r3, #2
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000934:	2310      	movs	r3, #16
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000938:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800093c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800093e:	2304      	movs	r3, #4
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000942:	2304      	movs	r3, #4
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fd36 	bl	80033bc <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000956:	f000 f9b7 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f002 ff98 	bl	80038ac <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000982:	f000 f9a1 	bl	8000cc8 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009ac:	4a2b      	ldr	r2, [pc, #172]	; (8000a5c <MX_ADC1_Init+0xc4>)
 80009ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_ADC1_Init+0xc0>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a02:	4815      	ldr	r0, [pc, #84]	; (8000a58 <MX_ADC1_Init+0xc0>)
 8000a04:	f000 fcd4 	bl	80013b0 <HAL_ADC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000a0e:	f000 f95b 	bl	8000cc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_ADC1_Init+0xc0>)
 8000a24:	f000 fe16 	bl	8001654 <HAL_ADC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000a2e:	f000 f94b 	bl	8000cc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_ADC1_Init+0xc0>)
 8000a40:	f000 fe08 	bl	8001654 <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f000 f93d 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000084 	.word	0x20000084
 8000a5c:	40012000 	.word	0x40012000

08000a60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MX_I2C2_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_I2C2_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C2_Init+0x50>)
 8000a9e:	f001 fec1 	bl	8002824 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f90e 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000012c 	.word	0x2000012c
 8000ab4:	40005800 	.word	0x40005800
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <MX_TIM3_Init+0x98>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000ae0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ae4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000aee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b00:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000b02:	f003 f8f3 	bl	8003cec <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b0c:	f000 f8dc 	bl	8000cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000b1e:	f003 f98f 	bl	8003e40 <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b28:	f000 f8ce 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000b3a:	f003 fb6f 	bl	800421c <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b44:	f000 f8c0 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000180 	.word	0x20000180
 8000b54:	40000400 	.word	0x40000400

08000b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART2_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f003 fbb2 	bl	80042f8 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f895 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200001c8 	.word	0x200001c8
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_DMA_Init+0x3c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <MX_DMA_Init+0x3c>)
 8000bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_DMA_Init+0x3c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2038      	movs	r0, #56	; 0x38
 8000bd4:	f001 f8c9 	bl	8001d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bd8:	2038      	movs	r0, #56	; 0x38
 8000bda:	f001 f8e2 	bl	8001da2 <HAL_NVIC_EnableIRQ>

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a2c      	ldr	r2, [pc, #176]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2120      	movs	r1, #32
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <MX_GPIO_Init+0xd4>)
 8000c78:	f001 fdba 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_GPIO_Init+0xd8>)
 8000c94:	f001 fc10 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c98:	2320      	movs	r3, #32
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_GPIO_Init+0xd4>)
 8000cb0:	f001 fc02 	bl	80024b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <__io_putchar>:


extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
	{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000cdc:	1d39      	adds	r1, r7, #4
 8000cde:	230a      	movs	r3, #10
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <__io_putchar+0x20>)
 8000ce4:	f003 fb58 	bl	8004398 <HAL_UART_Transmit>
		return ch;
 8000ce8:	687b      	ldr	r3, [r7, #4]
	}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001c8 	.word	0x200001c8

08000cf8 <Standby>:

void Standby()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000cfc:	bf00      	nop
 8000cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d02:	4804      	ldr	r0, [pc, #16]	; (8000d14 <Standby+0x1c>)
 8000d04:	f001 fd5c 	bl	80027c0 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f7      	bne.n	8000cfe <Standby+0x6>
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40020800 	.word	0x40020800

08000d18 <cls>:
void cls()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	printf("\033[2j");
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <cls+0x10>)
 8000d1e:	f003 ffb9 	bl	8004c94 <iprintf>

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08005e3c 	.word	0x08005e3c

08000d2c <Cursor>:
void Cursor(int x, int y)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	char buf [20];
	sprintf(buf,"\033[%d;%dH",y,x);
 8000d36:	f107 000c 	add.w	r0, r7, #12
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4906      	ldr	r1, [pc, #24]	; (8000d58 <Cursor+0x2c>)
 8000d40:	f004 f816 	bl	8004d70 <siprintf>
	puts(buf);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 f809 	bl	8004d60 <puts>
}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	08005e44 	.word	0x08005e44

08000d5c <ProgramStart>:
void ProgramStart (char * str)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	cls();
 8000d64:	f7ff ffd8 	bl	8000d18 <cls>
	Cursor(0,0);
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff ffde 	bl	8000d2c <Cursor>
	printf("Program Start - %s\r\n",str);
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <ProgramStart+0x30>)
 8000d74:	f003 ff8e 	bl	8004c94 <iprintf>
	printf("Press Blue-button(b1)to start\r\n");
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <ProgramStart+0x34>)
 8000d7a:	f003 fff1 	bl	8004d60 <puts>
	Standby();
 8000d7e:	f7ff ffbb 	bl	8000cf8 <Standby>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	08005e50 	.word	0x08005e50
 8000d90:	08005e68 	.word	0x08005e68

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd2:	2007      	movs	r0, #7
 8000dd4:	f000 ffbe 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <HAL_ADC_MspInit+0xdc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d157      	bne.n	8000eb6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a2d      	ldr	r2, [pc, #180]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <HAL_ADC_MspInit+0xe4>)
 8000e52:	f001 fb31 	bl	80024b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_ADC_MspInit+0xec>)
 8000e5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e9c:	f000 ff9c 	bl	8001dd8 <HAL_DMA_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ea6:	f7ff ff0f 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000eae:	639a      	str	r2, [r3, #56]	; 0x38
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	200000cc 	.word	0x200000cc
 8000ed0:	40026410 	.word	0x40026410

08000ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_I2C_MspInit+0xa8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d13d      	bne.n	8000f72 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_I2C_MspInit+0xac>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <HAL_I2C_MspInit+0xac>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_I2C_MspInit+0xac>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f18:	2312      	movs	r3, #18
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f24:	2304      	movs	r3, #4
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <HAL_I2C_MspInit+0xb0>)
 8000f30:	f001 fac2 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3a:	2312      	movs	r3, #18
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f46:	2309      	movs	r3, #9
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <HAL_I2C_MspInit+0xb0>)
 8000f52:	f001 fab1 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_I2C_MspInit+0xac>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0xac>)
 8000f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_I2C_MspInit+0xac>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40005800 	.word	0x40005800
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10d      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_TIM_Base_MspInit+0x40>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_TIM_Base_MspInit+0x40>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_TIM_Base_MspInit+0x40>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_UART_MspInit+0x84>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12b      	bne.n	8001046 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_UART_MspInit+0x88>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_UART_MspInit+0x88>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_UART_MspInit+0x88>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_UART_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001026:	230c      	movs	r3, #12
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001036:	2307      	movs	r3, #7
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0x8c>)
 8001042:	f001 fa39 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004400 	.word	0x40004400
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f93e 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <DMA2_Stream0_IRQHandler+0x10>)
 80010b6:	f000 ff95 	bl	8001fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000cc 	.word	0x200000cc

080010c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e00a      	b.n	80010ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d6:	f3af 8000 	nop.w
 80010da:	4601      	mov	r1, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf0      	blt.n	80010d6 <_read+0x12>
  }

  return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e009      	b.n	8001124 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fddb 	bl	8000cd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf1      	blt.n	8001110 <_write+0x12>
  }
  return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115e:	605a      	str	r2, [r3, #4]
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f003 ff14 	bl	8004ffc <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20020000 	.word	0x20020000
 8001200:	00000400 	.word	0x00000400
 8001204:	20000218 	.word	0x20000218
 8001208:	20000370 	.word	0x20000370

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001234:	f7ff ffea 	bl	800120c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123a:	490d      	ldr	r1, [pc, #52]	; (8001270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001250:	4c0a      	ldr	r4, [pc, #40]	; (800127c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125e:	f003 fed3 	bl	8005008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fad5 	bl	8000810 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001274:	08005eec 	.word	0x08005eec
  ldr r2, =_sbss
 8001278:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800127c:	2000036c 	.word	0x2000036c

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 fd51 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fd6c 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fd69 	bl	8001dbe <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 fd31 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	20000008 	.word	0x20000008
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008
 800134c:	2000021c 	.word	0x2000021c

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000021c 	.word	0x2000021c

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008

080013b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e033      	b.n	800142e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fd08 	bl	8000de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013f6:	f023 0302 	bic.w	r3, r3, #2
 80013fa:	f043 0202 	orr.w	r2, r3, #2
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fa58 	bl	80018b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f023 0303 	bic.w	r3, r3, #3
 8001416:	f043 0201 	orr.w	r2, r3, #1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
 800141e:	e001      	b.n	8001424 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_ADC_Start_DMA+0x1e>
 8001452:	2302      	movs	r3, #2
 8001454:	e0ce      	b.n	80015f4 <HAL_ADC_Start_DMA+0x1bc>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d018      	beq.n	800149e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800147c:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_ADC_Start_DMA+0x1c4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5f      	ldr	r2, [pc, #380]	; (8001600 <HAL_ADC_Start_DMA+0x1c8>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0c9a      	lsrs	r2, r3, #18
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001490:	e002      	b.n	8001498 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3b01      	subs	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f9      	bne.n	8001492 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ac:	d107      	bne.n	80014be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	f040 8086 	bne.w	80015da <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150c:	d106      	bne.n	800151c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f023 0206 	bic.w	r2, r3, #6
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	645a      	str	r2, [r3, #68]	; 0x44
 800151a:	e002      	b.n	8001522 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <HAL_ADC_Start_DMA+0x1cc>)
 800152c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	4a35      	ldr	r2, [pc, #212]	; (8001608 <HAL_ADC_Start_DMA+0x1d0>)
 8001534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153a:	4a34      	ldr	r2, [pc, #208]	; (800160c <HAL_ADC_Start_DMA+0x1d4>)
 800153c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	4a33      	ldr	r2, [pc, #204]	; (8001610 <HAL_ADC_Start_DMA+0x1d8>)
 8001544:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800154e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800155e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800156e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	334c      	adds	r3, #76	; 0x4c
 800157a:	4619      	mov	r1, r3
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f000 fcd8 	bl	8001f34 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10f      	bne.n	80015b0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d129      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	e020      	b.n	80015f2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_ADC_Start_DMA+0x1dc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d11b      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x1ba>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d114      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	e00b      	b.n	80015f2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f043 0210 	orr.w	r2, r3, #16
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000000 	.word	0x20000000
 8001600:	431bde83 	.word	0x431bde83
 8001604:	40012300 	.word	0x40012300
 8001608:	08001ab1 	.word	0x08001ab1
 800160c:	08001b6b 	.word	0x08001b6b
 8001610:	08001b87 	.word	0x08001b87
 8001614:	40012000 	.word	0x40012000

08001618 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x1c>
 800166c:	2302      	movs	r3, #2
 800166e:	e113      	b.n	8001898 <HAL_ADC_ConfigChannel+0x244>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d925      	bls.n	80016cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68d9      	ldr	r1, [r3, #12]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	3b1e      	subs	r3, #30
 8001696:	2207      	movs	r2, #7
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43da      	mvns	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	400a      	ands	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68d9      	ldr	r1, [r3, #12]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4403      	add	r3, r0
 80016be:	3b1e      	subs	r3, #30
 80016c0:	409a      	lsls	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	e022      	b.n	8001712 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6919      	ldr	r1, [r3, #16]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	2207      	movs	r2, #7
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	400a      	ands	r2, r1
 80016ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6919      	ldr	r1, [r3, #16]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	4603      	mov	r3, r0
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4403      	add	r3, r0
 8001708:	409a      	lsls	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b06      	cmp	r3, #6
 8001718:	d824      	bhi.n	8001764 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b05      	subs	r3, #5
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	400a      	ands	r2, r1
 800173a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b05      	subs	r3, #5
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
 8001762:	e04c      	b.n	80017fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d824      	bhi.n	80017b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b23      	subs	r3, #35	; 0x23
 800177e:	221f      	movs	r2, #31
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43da      	mvns	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	400a      	ands	r2, r1
 800178c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b23      	subs	r3, #35	; 0x23
 80017a8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
 80017b4:	e023      	b.n	80017fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3b41      	subs	r3, #65	; 0x41
 80017c8:	221f      	movs	r2, #31
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	400a      	ands	r2, r1
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b41      	subs	r3, #65	; 0x41
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_ADC_ConfigChannel+0x250>)
 8001800:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <HAL_ADC_ConfigChannel+0x254>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d10f      	bne.n	800182c <HAL_ADC_ConfigChannel+0x1d8>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b12      	cmp	r3, #18
 8001812:	d10b      	bne.n	800182c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_ADC_ConfigChannel+0x254>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d12b      	bne.n	800188e <HAL_ADC_ConfigChannel+0x23a>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <HAL_ADC_ConfigChannel+0x258>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d003      	beq.n	8001848 <HAL_ADC_ConfigChannel+0x1f4>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b11      	cmp	r3, #17
 8001846:	d122      	bne.n	800188e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_ADC_ConfigChannel+0x258>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d111      	bne.n	800188e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_ADC_ConfigChannel+0x25c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <HAL_ADC_ConfigChannel+0x260>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	0c9a      	lsrs	r2, r3, #18
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001880:	e002      	b.n	8001888 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3b01      	subs	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f9      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40012300 	.word	0x40012300
 80018a8:	40012000 	.word	0x40012000
 80018ac:	10000012 	.word	0x10000012
 80018b0:	20000000 	.word	0x20000000
 80018b4:	431bde83 	.word	0x431bde83

080018b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c0:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <ADC_Init+0x1f0>)
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	431a      	orrs	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	021a      	lsls	r2, r3, #8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6899      	ldr	r1, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	4a58      	ldr	r2, [pc, #352]	; (8001aac <ADC_Init+0x1f4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d022      	beq.n	8001996 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800195e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6899      	ldr	r1, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	e00f      	b.n	80019b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0202 	bic.w	r2, r2, #2
 80019c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7e1b      	ldrb	r3, [r3, #24]
 80019d0:	005a      	lsls	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01b      	beq.n	8001a1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	035a      	lsls	r2, r3, #13
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	e007      	b.n	8001a2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	051a      	lsls	r2, r3, #20
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a6e:	025a      	lsls	r2, r3, #9
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6899      	ldr	r1, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	029a      	lsls	r2, r3, #10
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	0f000001 	.word	0x0f000001

08001ab0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d13c      	bne.n	8001b44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d12b      	bne.n	8001b3c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d127      	bne.n	8001b3c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d119      	bne.n	8001b3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0220 	bic.w	r2, r2, #32
 8001b16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7ff fd6b 	bl	8001618 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b42:	e00e      	b.n	8001b62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f7ff fd75 	bl	8001640 <HAL_ADC_ErrorCallback>
}
 8001b56:	e004      	b.n	8001b62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fd57 	bl	800162c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f043 0204 	orr.w	r2, r3, #4
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fd4a 	bl	8001640 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff29 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff3e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff31 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff fab4 	bl	8001350 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e099      	b.n	8001f28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e14:	e00f      	b.n	8001e36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e16:	f7ff fa9b 	bl	8001350 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d908      	bls.n	8001e36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e078      	b.n	8001f28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e8      	bne.n	8001e16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_DMA_Init+0x158>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d107      	bne.n	8001ea0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f023 0307 	bic.w	r3, r3, #7
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d117      	bne.n	8001efa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00e      	beq.n	8001efa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fa6f 	bl	80023c0 <DMA_CheckFifoParam>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2240      	movs	r2, #64	; 0x40
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e016      	b.n	8001f28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fa26 	bl	8002354 <DMA_CalcBaseAndBitshift>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	223f      	movs	r2, #63	; 0x3f
 8001f12:	409a      	lsls	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	f010803f 	.word	0xf010803f

08001f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_Start_IT+0x26>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e040      	b.n	8001fdc <HAL_DMA_Start_IT+0xa8>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d12f      	bne.n	8001fce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f9b8 	bl	80022f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	223f      	movs	r2, #63	; 0x3f
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0216 	orr.w	r2, r2, #22
 8001fa2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0208 	orr.w	r2, r2, #8
 8001fba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e005      	b.n	8001fda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ff0:	4b8e      	ldr	r3, [pc, #568]	; (800222c <HAL_DMA_IRQHandler+0x248>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_DMA_IRQHandler+0x24c>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0a9b      	lsrs	r3, r3, #10
 8001ffc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2208      	movs	r2, #8
 8002010:	409a      	lsls	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01a      	beq.n	8002050 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0204 	bic.w	r2, r2, #4
 8002036:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2208      	movs	r2, #8
 800203e:	409a      	lsls	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2201      	movs	r2, #1
 8002056:	409a      	lsls	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	2201      	movs	r2, #1
 8002074:	409a      	lsls	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f043 0202 	orr.w	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2204      	movs	r2, #4
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d012      	beq.n	80020bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	2204      	movs	r2, #4
 80020aa:	409a      	lsls	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	f043 0204 	orr.w	r2, r3, #4
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	2210      	movs	r2, #16
 80020c2:	409a      	lsls	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d043      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d03c      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2210      	movs	r2, #16
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d018      	beq.n	8002126 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d024      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
 8002112:	e01f      	b.n	8002154 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01b      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
 8002124:	e016      	b.n	8002154 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0208 	bic.w	r2, r2, #8
 8002142:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	2220      	movs	r2, #32
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 808f 	beq.w	8002284 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8087 	beq.w	8002284 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2220      	movs	r2, #32
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b05      	cmp	r3, #5
 800218c:	d136      	bne.n	80021fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0216 	bic.w	r2, r2, #22
 800219c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_DMA_IRQHandler+0x1da>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0208 	bic.w	r2, r2, #8
 80021cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	223f      	movs	r2, #63	; 0x3f
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d07e      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4798      	blx	r3
        }
        return;
 80021fa:	e079      	b.n	80022f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10d      	bne.n	8002234 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	2b00      	cmp	r3, #0
 800221e:	d031      	beq.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
 8002228:	e02c      	b.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
 800222a:	bf00      	nop
 800222c:	20000000 	.word	0x20000000
 8002230:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d023      	beq.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e01e      	b.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10f      	bne.n	8002274 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0210 	bic.w	r2, r2, #16
 8002262:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	2b00      	cmp	r3, #0
 800228a:	d032      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d022      	beq.n	80022de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2205      	movs	r2, #5
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d307      	bcc.n	80022cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f2      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x2cc>
 80022ca:	e000      	b.n	80022ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
 80022ee:	e000      	b.n	80022f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022f0:	bf00      	nop
    }
  }
}
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002314:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d108      	bne.n	8002338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002336:	e007      	b.n	8002348 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3b10      	subs	r3, #16
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <DMA_CalcBaseAndBitshift+0x68>)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d909      	bls.n	8002396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	; 0x58
 8002394:	e007      	b.n	80023a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	aaaaaaab 	.word	0xaaaaaaab
 80023bc:	08005ea0 	.word	0x08005ea0

080023c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d856      	bhi.n	800248e <DMA_CheckFifoParam+0xce>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <DMA_CheckFifoParam+0x28>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	0800240b 	.word	0x0800240b
 80023f0:	080023f9 	.word	0x080023f9
 80023f4:	0800248f 	.word	0x0800248f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d046      	beq.n	8002492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002408:	e043      	b.n	8002492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002412:	d140      	bne.n	8002496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002418:	e03d      	b.n	8002496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002422:	d121      	bne.n	8002468 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d837      	bhi.n	800249a <DMA_CheckFifoParam+0xda>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <DMA_CheckFifoParam+0x70>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002441 	.word	0x08002441
 8002434:	08002447 	.word	0x08002447
 8002438:	08002441 	.word	0x08002441
 800243c:	08002459 	.word	0x08002459
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      break;
 8002444:	e030      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d025      	beq.n	800249e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002456:	e022      	b.n	800249e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002460:	d11f      	bne.n	80024a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002466:	e01c      	b.n	80024a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d903      	bls.n	8002476 <DMA_CheckFifoParam+0xb6>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d003      	beq.n	800247c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002474:	e018      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
      break;
 800247a:	e015      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e00b      	b.n	80024a6 <DMA_CheckFifoParam+0xe6>
      break;
 800248e:	bf00      	nop
 8002490:	e00a      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e008      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e006      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e004      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
    }
  } 
  
  return status; 
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e159      	b.n	8002788 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f040 8148 	bne.w	8002782 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002506:	2b02      	cmp	r3, #2
 8002508:	d130      	bne.n	800256c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d017      	beq.n	80025a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a2 	beq.w	8002782 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <HAL_GPIO_Init+0x2e8>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <HAL_GPIO_Init+0x2e8>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b54      	ldr	r3, [pc, #336]	; (80027a0 <HAL_GPIO_Init+0x2e8>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265a:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_GPIO_Init+0x2ec>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a49      	ldr	r2, [pc, #292]	; (80027a8 <HAL_GPIO_Init+0x2f0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d019      	beq.n	80026ba <HAL_GPIO_Init+0x202>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a48      	ldr	r2, [pc, #288]	; (80027ac <HAL_GPIO_Init+0x2f4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0x1fe>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a47      	ldr	r2, [pc, #284]	; (80027b0 <HAL_GPIO_Init+0x2f8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_Init+0x1fa>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a46      	ldr	r2, [pc, #280]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x1f6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a45      	ldr	r2, [pc, #276]	; (80027b8 <HAL_GPIO_Init+0x300>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_Init+0x1f2>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026aa:	2307      	movs	r3, #7
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026cc:	4935      	ldr	r1, [pc, #212]	; (80027a4 <HAL_GPIO_Init+0x2ec>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_GPIO_Init+0x304>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <HAL_GPIO_Init+0x304>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_GPIO_Init+0x304>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277c:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HAL_GPIO_Init+0x304>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f aea2 	bls.w	80024d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e001      	b.n	80027e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
 80027fc:	4613      	mov	r3, r2
 80027fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002800:	787b      	ldrb	r3, [r7, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800280c:	e003      	b.n	8002816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	041a      	lsls	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	619a      	str	r2, [r3, #24]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e12b      	b.n	8002a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fb42 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002888:	f001 fa08 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 800288c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a81      	ldr	r2, [pc, #516]	; (8002a98 <HAL_I2C_Init+0x274>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d807      	bhi.n	80028a8 <HAL_I2C_Init+0x84>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a80      	ldr	r2, [pc, #512]	; (8002a9c <HAL_I2C_Init+0x278>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e006      	b.n	80028b6 <HAL_I2C_Init+0x92>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a7d      	ldr	r2, [pc, #500]	; (8002aa0 <HAL_I2C_Init+0x27c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0e7      	b.n	8002a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a78      	ldr	r2, [pc, #480]	; (8002aa4 <HAL_I2C_Init+0x280>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a6a      	ldr	r2, [pc, #424]	; (8002a98 <HAL_I2C_Init+0x274>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d802      	bhi.n	80028f8 <HAL_I2C_Init+0xd4>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3301      	adds	r3, #1
 80028f6:	e009      	b.n	800290c <HAL_I2C_Init+0xe8>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	4a69      	ldr	r2, [pc, #420]	; (8002aa8 <HAL_I2C_Init+0x284>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	3301      	adds	r3, #1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800291e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	495c      	ldr	r1, [pc, #368]	; (8002a98 <HAL_I2C_Init+0x274>)
 8002928:	428b      	cmp	r3, r1
 800292a:	d819      	bhi.n	8002960 <HAL_I2C_Init+0x13c>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e59      	subs	r1, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fbb1 f3f3 	udiv	r3, r1, r3
 800293a:	1c59      	adds	r1, r3, #1
 800293c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002940:	400b      	ands	r3, r1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_I2C_Init+0x138>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e59      	subs	r1, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fbb1 f3f3 	udiv	r3, r1, r3
 8002954:	3301      	adds	r3, #1
 8002956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295a:	e051      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 800295c:	2304      	movs	r3, #4
 800295e:	e04f      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d111      	bne.n	800298c <HAL_I2C_Init+0x168>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e58      	subs	r0, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e012      	b.n	80029b2 <HAL_I2C_Init+0x18e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	0099      	lsls	r1, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x196>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e022      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10e      	bne.n	80029e0 <HAL_I2C_Init+0x1bc>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e58      	subs	r0, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	440b      	add	r3, r1
 80029d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029de:	e00f      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e58      	subs	r0, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	0099      	lsls	r1, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	6809      	ldr	r1, [r1, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6911      	ldr	r1, [r2, #16]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	000186a0 	.word	0x000186a0
 8002a9c:	001e847f 	.word	0x001e847f
 8002aa0:	003d08ff 	.word	0x003d08ff
 8002aa4:	431bde83 	.word	0x431bde83
 8002aa8:	10624dd3 	.word	0x10624dd3

08002aac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	460b      	mov	r3, r1
 8002aba:	817b      	strh	r3, [r7, #10]
 8002abc:	4613      	mov	r3, r2
 8002abe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7fe fc46 	bl	8001350 <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	f040 80e0 	bne.w	8002c94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2319      	movs	r3, #25
 8002ada:	2201      	movs	r2, #1
 8002adc:	4970      	ldr	r1, [pc, #448]	; (8002ca0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fa92 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0d3      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_I2C_Master_Transmit+0x50>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0cc      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d007      	beq.n	8002b22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2221      	movs	r2, #33	; 0x21
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	893a      	ldrh	r2, [r7, #8]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a50      	ldr	r2, [pc, #320]	; (8002ca4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b64:	8979      	ldrh	r1, [r7, #10]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f9ca 	bl	8002f04 <I2C_MasterRequestWrite>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e08d      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b90:	e066      	b.n	8002c60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fb50 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d11b      	bne.n	8002c34 <HAL_I2C_Master_Transmit+0x188>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	6a39      	ldr	r1, [r7, #32]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fb47 	bl	80032cc <I2C_WaitOnBTFFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d107      	bne.n	8002c5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e01a      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d194      	bne.n	8002b92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	00100002 	.word	0x00100002
 8002ca4:	ffff0000 	.word	0xffff0000

08002ca8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7fe fb4a 	bl	8001350 <HAL_GetTick>
 8002cbc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	f040 8111 	bne.w	8002ef2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2319      	movs	r3, #25
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4988      	ldr	r1, [pc, #544]	; (8002efc <HAL_I2C_IsDeviceReady+0x254>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f994 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e104      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_I2C_IsDeviceReady+0x50>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e0fd      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x24c>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d007      	beq.n	8002d1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2224      	movs	r2, #36	; 0x24
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a70      	ldr	r2, [pc, #448]	; (8002f00 <HAL_I2C_IsDeviceReady+0x258>)
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f952 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d78:	d103      	bne.n	8002d82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0b6      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d96:	f7fe fadb 	bl	8001350 <HAL_GetTick>
 8002d9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dca:	e025      	b.n	8002e18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dcc:	f7fe fac0 	bl	8001350 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d302      	bcc.n	8002de2 <HAL_I2C_IsDeviceReady+0x13a>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	22a0      	movs	r2, #160	; 0xa0
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2ba0      	cmp	r3, #160	; 0xa0
 8002e22:	d005      	beq.n	8002e30 <HAL_I2C_IsDeviceReady+0x188>
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_I2C_IsDeviceReady+0x188>
 8002e2a:	7dbb      	ldrb	r3, [r7, #22]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0cd      	beq.n	8002dcc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d129      	bne.n	8002e9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2319      	movs	r3, #25
 8002e72:	2201      	movs	r2, #1
 8002e74:	4921      	ldr	r1, [pc, #132]	; (8002efc <HAL_I2C_IsDeviceReady+0x254>)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8c6 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e036      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e02c      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2319      	movs	r3, #25
 8002eba:	2201      	movs	r2, #1
 8002ebc:	490f      	ldr	r1, [pc, #60]	; (8002efc <HAL_I2C_IsDeviceReady+0x254>)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f8a2 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e012      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f4ff af32 	bcc.w	8002d42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
  }
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	00100002 	.word	0x00100002
 8002f00:	ffff0000 	.word	0xffff0000

08002f04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	460b      	mov	r3, r1
 8002f12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d006      	beq.n	8002f2e <I2C_MasterRequestWrite+0x2a>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d003      	beq.n	8002f2e <I2C_MasterRequestWrite+0x2a>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f2c:	d108      	bne.n	8002f40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e00b      	b.n	8002f58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	2b12      	cmp	r3, #18
 8002f46:	d107      	bne.n	8002f58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f84f 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00d      	beq.n	8002f8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d103      	bne.n	8002f88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e035      	b.n	8002ff8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f94:	d108      	bne.n	8002fa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f96:	897b      	ldrh	r3, [r7, #10]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa4:	611a      	str	r2, [r3, #16]
 8002fa6:	e01b      	b.n	8002fe0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fa8:	897b      	ldrh	r3, [r7, #10]
 8002faa:	11db      	asrs	r3, r3, #7
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f003 0306 	and.w	r3, r3, #6
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f063 030f 	orn	r3, r3, #15
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	490e      	ldr	r1, [pc, #56]	; (8003000 <I2C_MasterRequestWrite+0xfc>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f898 	bl	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e010      	b.n	8002ff8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fd6:	897b      	ldrh	r3, [r7, #10]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4907      	ldr	r1, [pc, #28]	; (8003004 <I2C_MasterRequestWrite+0x100>)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f888 	bl	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	00010008 	.word	0x00010008
 8003004:	00010002 	.word	0x00010002

08003008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003018:	e048      	b.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d044      	beq.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fe f995 	bl	8001350 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d139      	bne.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d10d      	bne.n	800305e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	43da      	mvns	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	e00c      	b.n	8003078 <I2C_WaitOnFlagUntilTimeout+0x70>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	43da      	mvns	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	429a      	cmp	r2, r3
 800307c:	d116      	bne.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e023      	b.n	80030f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10d      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	43da      	mvns	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4013      	ands	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	e00c      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	43da      	mvns	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4013      	ands	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d093      	beq.n	800301a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800310a:	e071      	b.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311a:	d123      	bne.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0204 	orr.w	r2, r3, #4
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e067      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d041      	beq.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7fe f8f0 	bl	8001350 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d136      	bne.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10c      	bne.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	e00b      	b.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e021      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10c      	bne.n	8003214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	43da      	mvns	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e00b      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f af6d 	bne.w	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003248:	e034      	b.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f886 	bl	800335c <I2C_IsAcknowledgeFailed>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e034      	b.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d028      	beq.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fe f875 	bl	8001350 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d11d      	bne.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b80      	cmp	r3, #128	; 0x80
 8003284:	d016      	beq.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e007      	b.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d1c3      	bne.n	800324a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d8:	e034      	b.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f83e 	bl	800335c <I2C_IsAcknowledgeFailed>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e034      	b.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d028      	beq.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fe f82d 	bl	8001350 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d11d      	bne.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b04      	cmp	r3, #4
 8003314:	d016      	beq.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e007      	b.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d1c3      	bne.n	80032da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d11b      	bne.n	80033ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e267      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d075      	beq.n	80034c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033da:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d00c      	beq.n	8003400 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e6:	4b85      	ldr	r3, [pc, #532]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d112      	bne.n	8003418 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f2:	4b82      	ldr	r3, [pc, #520]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fe:	d10b      	bne.n	8003418 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05b      	beq.n	80034c4 <HAL_RCC_OscConfig+0x108>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d157      	bne.n	80034c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e242      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d106      	bne.n	8003430 <HAL_RCC_OscConfig+0x74>
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a75      	ldr	r2, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x98>
 800343a:	4b70      	ldr	r3, [pc, #448]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6f      	ldr	r2, [pc, #444]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a6c      	ldr	r2, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003454:	4b69      	ldr	r3, [pc, #420]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a68      	ldr	r2, [pc, #416]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b66      	ldr	r3, [pc, #408]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a65      	ldr	r2, [pc, #404]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fd ff6c 	bl	8001350 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fd ff68 	bl	8001350 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e207      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xc0>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fd ff58 	bl	8001350 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fd ff54 	bl	8001350 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e1f3      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	4b51      	ldr	r3, [pc, #324]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0xe8>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d063      	beq.n	800359a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x152>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1c7      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	e03a      	b.n	800359a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x244>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fd ff0d 	bl	8001350 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353a:	f7fd ff09 	bl	8001350 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1a8      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4925      	ldr	r1, [pc, #148]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_OscConfig+0x244>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fd feec 	bl	8001350 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357c:	f7fd fee8 	bl	8001350 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e187      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d036      	beq.n	8003614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCC_OscConfig+0x248>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd fecc 	bl	8001350 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fd fec8 	bl	8001350 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e167      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x200>
 80035da:	e01b      	b.n	8003614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x248>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7fd feb5 	bl	8001350 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	e00e      	b.n	8003608 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fd feb1 	bl	8001350 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d907      	bls.n	8003608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e150      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
 80035fc:	40023800 	.word	0x40023800
 8003600:	42470000 	.word	0x42470000
 8003604:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003608:	4b88      	ldr	r3, [pc, #544]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ea      	bne.n	80035ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8097 	beq.w	8003750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003626:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	4b7d      	ldr	r3, [pc, #500]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a7c      	ldr	r2, [pc, #496]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b7a      	ldr	r3, [pc, #488]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4b77      	ldr	r3, [pc, #476]	; (8003830 <HAL_RCC_OscConfig+0x474>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365e:	4b74      	ldr	r3, [pc, #464]	; (8003830 <HAL_RCC_OscConfig+0x474>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a73      	ldr	r2, [pc, #460]	; (8003830 <HAL_RCC_OscConfig+0x474>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fd fe71 	bl	8001350 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fd fe6d 	bl	8001350 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e10c      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCC_OscConfig+0x474>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x2ea>
 8003698:	4b64      	ldr	r3, [pc, #400]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a63      	ldr	r2, [pc, #396]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e01c      	b.n	80036e0 <HAL_RCC_OscConfig+0x324>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x30c>
 80036ae:	4b5f      	ldr	r3, [pc, #380]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a5e      	ldr	r2, [pc, #376]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b5c      	ldr	r3, [pc, #368]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a5b      	ldr	r2, [pc, #364]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x324>
 80036c8:	4b58      	ldr	r3, [pc, #352]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a57      	ldr	r2, [pc, #348]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	4b55      	ldr	r3, [pc, #340]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a54      	ldr	r2, [pc, #336]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd fe32 	bl	8001350 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fd fe2e 	bl	8001350 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e0cb      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	4b49      	ldr	r3, [pc, #292]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ee      	beq.n	80036f0 <HAL_RCC_OscConfig+0x334>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003714:	f7fd fe1c 	bl	8001350 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fd fe18 	bl	8001350 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0b5      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003732:	4b3e      	ldr	r3, [pc, #248]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ee      	bne.n	800371c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d105      	bne.n	8003750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003744:	4b39      	ldr	r3, [pc, #228]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	4a38      	ldr	r2, [pc, #224]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800374a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a1 	beq.w	800389c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375a:	4b34      	ldr	r3, [pc, #208]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	d05c      	beq.n	8003820 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d141      	bne.n	80037f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_RCC_OscConfig+0x478>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fdec 	bl	8001350 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fde8 	bl	8001350 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e087      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	4b27      	ldr	r3, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	019b      	lsls	r3, r3, #6
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	3b01      	subs	r3, #1
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	491b      	ldr	r1, [pc, #108]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x478>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fd fdc1 	bl	8001350 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fd fdbd 	bl	8001350 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e05c      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x416>
 80037f0:	e054      	b.n	800389c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <HAL_RCC_OscConfig+0x478>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fd fdaa 	bl	8001350 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fd fda6 	bl	8001350 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e045      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x444>
 800381e:	e03d      	b.n	800389c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e038      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
 800382c:	40023800 	.word	0x40023800
 8003830:	40007000 	.word	0x40007000
 8003834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x4ec>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d028      	beq.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d121      	bne.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d11a      	bne.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800386e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003870:	4293      	cmp	r3, r2
 8003872:	d111      	bne.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	3b01      	subs	r3, #1
 8003882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d107      	bne.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800

080038ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0cc      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b68      	ldr	r3, [pc, #416]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d90c      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b8      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003900:	4b59      	ldr	r3, [pc, #356]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800390a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003918:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a52      	ldr	r2, [pc, #328]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	494d      	ldr	r1, [pc, #308]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d044      	beq.n	80039cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d119      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e07f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d003      	beq.n	800396a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003966:	2b03      	cmp	r3, #3
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e06f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e067      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4934      	ldr	r1, [pc, #208]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800399c:	f7fd fcd8 	bl	8001350 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fd fcd4 	bl	8001350 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e04f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d20c      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e032      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4916      	ldr	r1, [pc, #88]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	490e      	ldr	r1, [pc, #56]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a32:	f000 f821 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	490a      	ldr	r1, [pc, #40]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fc38 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023c00 	.word	0x40023c00
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	08005e88 	.word	0x08005e88
 8003a70:	20000000 	.word	0x20000000
 8003a74:	20000004 	.word	0x20000004

08003a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a7c:	b094      	sub	sp, #80	; 0x50
 8003a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a90:	4b79      	ldr	r3, [pc, #484]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	f200 80e1 	bhi.w	8003c64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x34>
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aaa:	e0db      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab0:	e0db      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ab2:	4b73      	ldr	r3, [pc, #460]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab6:	e0d8      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab8:	4b6f      	ldr	r3, [pc, #444]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d063      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ace:	4b6a      	ldr	r3, [pc, #424]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003aea:	4622      	mov	r2, r4
 8003aec:	462b      	mov	r3, r5
 8003aee:	f04f 0000 	mov.w	r0, #0
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	0159      	lsls	r1, r3, #5
 8003af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afc:	0150      	lsls	r0, r2, #5
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4621      	mov	r1, r4
 8003b04:	1a51      	subs	r1, r2, r1
 8003b06:	6139      	str	r1, [r7, #16]
 8003b08:	4629      	mov	r1, r5
 8003b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b1c:	4659      	mov	r1, fp
 8003b1e:	018b      	lsls	r3, r1, #6
 8003b20:	4651      	mov	r1, sl
 8003b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b26:	4651      	mov	r1, sl
 8003b28:	018a      	lsls	r2, r1, #6
 8003b2a:	4651      	mov	r1, sl
 8003b2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003b30:	4659      	mov	r1, fp
 8003b32:	eb63 0901 	sbc.w	r9, r3, r1
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b4a:	4690      	mov	r8, r2
 8003b4c:	4699      	mov	r9, r3
 8003b4e:	4623      	mov	r3, r4
 8003b50:	eb18 0303 	adds.w	r3, r8, r3
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	462b      	mov	r3, r5
 8003b58:	eb49 0303 	adc.w	r3, r9, r3
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	024b      	lsls	r3, r1, #9
 8003b6e:	4621      	mov	r1, r4
 8003b70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b74:	4621      	mov	r1, r4
 8003b76:	024a      	lsls	r2, r1, #9
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7e:	2200      	movs	r2, #0
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b88:	f7fc fb7a 	bl	8000280 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4613      	mov	r3, r2
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b94:	e058      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b96:	4b38      	ldr	r3, [pc, #224]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	099b      	lsrs	r3, r3, #6
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	f04f 0000 	mov.w	r0, #0
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	0159      	lsls	r1, r3, #5
 8003bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc2:	0150      	lsls	r0, r2, #5
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4641      	mov	r1, r8
 8003bca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bce:	4649      	mov	r1, r9
 8003bd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003be0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003be4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003be8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bec:	eb63 050b 	sbc.w	r5, r3, fp
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	00eb      	lsls	r3, r5, #3
 8003bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfe:	00e2      	lsls	r2, r4, #3
 8003c00:	4614      	mov	r4, r2
 8003c02:	461d      	mov	r5, r3
 8003c04:	4643      	mov	r3, r8
 8003c06:	18e3      	adds	r3, r4, r3
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	eb45 0303 	adc.w	r3, r5, r3
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c1e:	4629      	mov	r1, r5
 8003c20:	028b      	lsls	r3, r1, #10
 8003c22:	4621      	mov	r1, r4
 8003c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c28:	4621      	mov	r1, r4
 8003c2a:	028a      	lsls	r2, r1, #10
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c32:	2200      	movs	r2, #0
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	61fa      	str	r2, [r7, #28]
 8003c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c3c:	f7fc fb20 	bl	8000280 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4613      	mov	r3, r2
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	3301      	adds	r3, #1
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c62:	e002      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3750      	adds	r7, #80	; 0x50
 8003c70:	46bd      	mov	sp, r7
 8003c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	00f42400 	.word	0x00f42400
 8003c80:	007a1200 	.word	0x007a1200

08003c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000000 	.word	0x20000000

08003c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ca0:	f7ff fff0 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0a9b      	lsrs	r3, r3, #10
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	08005e98 	.word	0x08005e98

08003cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cc8:	f7ff ffdc 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0b5b      	lsrs	r3, r3, #13
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	08005e98 	.word	0x08005e98

08003cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e041      	b.n	8003d82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd f938 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f000 f950 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d001      	beq.n	8003da4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e03c      	b.n	8003e1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_TIM_Base_Start+0xa0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_TIM_Base_Start+0x5c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbe:	d013      	beq.n	8003de8 <HAL_TIM_Base_Start+0x5c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <HAL_TIM_Base_Start+0xa4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_TIM_Base_Start+0x5c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <HAL_TIM_Base_Start+0xa8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_TIM_Base_Start+0x5c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <HAL_TIM_Base_Start+0xac>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_TIM_Base_Start+0x5c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <HAL_TIM_Base_Start+0xb0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d111      	bne.n	8003e0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d010      	beq.n	8003e1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	e007      	b.n	8003e1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40014000 	.word	0x40014000

08003e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_ConfigClockSource+0x1c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0b4      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x186>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d03e      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0xd4>
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	f200 8087 	bhi.w	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	f000 8086 	beq.w	8003fb2 <HAL_TIM_ConfigClockSource+0x172>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d87f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b70      	cmp	r3, #112	; 0x70
 8003eae:	d01a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xa6>
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d87b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b60      	cmp	r3, #96	; 0x60
 8003eb6:	d050      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x11a>
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d877      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b50      	cmp	r3, #80	; 0x50
 8003ebe:	d03c      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xfa>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d873      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d058      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x13a>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d86f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	d064      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d86b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d060      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d867      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d05a      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	e062      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ef6:	f000 f971 	bl	80041dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
      break;
 8003f12:	e04f      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f24:	f000 f95a 	bl	80041dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f36:	609a      	str	r2, [r3, #8]
      break;
 8003f38:	e03c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 f8ce 	bl	80040e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2150      	movs	r1, #80	; 0x50
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f927 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 8003f58:	e02c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 f8ed 	bl	8004146 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2160      	movs	r1, #96	; 0x60
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f917 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 8003f78:	e01c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f86:	461a      	mov	r2, r3
 8003f88:	f000 f8ae 	bl	80040e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2140      	movs	r1, #64	; 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f907 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 8003f98:	e00c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f000 f8fe 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 8003faa:	e003      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3a      	ldr	r2, [pc, #232]	; (80040cc <TIM_Base_SetConfig+0xfc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00f      	beq.n	8004008 <TIM_Base_SetConfig+0x38>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x38>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a37      	ldr	r2, [pc, #220]	; (80040d0 <TIM_Base_SetConfig+0x100>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x38>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a36      	ldr	r2, [pc, #216]	; (80040d4 <TIM_Base_SetConfig+0x104>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x38>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <TIM_Base_SetConfig+0x108>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <TIM_Base_SetConfig+0xfc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01b      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d017      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <TIM_Base_SetConfig+0x100>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <TIM_Base_SetConfig+0x104>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00f      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <TIM_Base_SetConfig+0x108>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00b      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a25      	ldr	r2, [pc, #148]	; (80040dc <TIM_Base_SetConfig+0x10c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <TIM_Base_SetConfig+0x110>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a23      	ldr	r2, [pc, #140]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d108      	bne.n	800406c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <TIM_Base_SetConfig+0xfc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	611a      	str	r2, [r3, #16]
  }
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800

080040e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f023 0201 	bic.w	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f023 030a 	bic.w	r3, r3, #10
 8004124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 0210 	bic.w	r2, r3, #16
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	031b      	lsls	r3, r3, #12
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004182:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f043 0307 	orr.w	r3, r3, #7
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	431a      	orrs	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004230:	2302      	movs	r3, #2
 8004232:	e050      	b.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d013      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10c      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	40014000 	.word	0x40014000

080042f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e042      	b.n	8004390 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fe54 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2224      	movs	r2, #36	; 0x24
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f973 	bl	8004628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d175      	bne.n	80044a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_UART_Transmit+0x2c>
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e06e      	b.n	80044a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2221      	movs	r2, #33	; 0x21
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d6:	f7fc ffbb 	bl	8001350 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f0:	d108      	bne.n	8004404 <HAL_UART_Transmit+0x6c>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e003      	b.n	800440c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800440c:	e02e      	b.n	800446c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2200      	movs	r2, #0
 8004416:	2180      	movs	r1, #128	; 0x80
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f848 	bl	80044ae <UART_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e03a      	b.n	80044a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	3302      	adds	r3, #2
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	e007      	b.n	800445e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1cb      	bne.n	800440e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f814 	bl	80044ae <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e006      	b.n	80044a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044be:	e03b      	b.n	8004538 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d037      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c8:	f7fc ff42 	bl	8001350 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d302      	bcc.n	80044de <UART_WaitOnFlagUntilTimeout+0x30>
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e03a      	b.n	8004558 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d023      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d020      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d01d      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b08      	cmp	r3, #8
 8004508:	d116      	bne.n	8004538 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f81d 	bl	8004560 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2208      	movs	r2, #8
 800452a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e00f      	b.n	8004558 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	429a      	cmp	r2, r3
 8004554:	d0b4      	beq.n	80044c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b095      	sub	sp, #84	; 0x54
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800457e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004588:	643a      	str	r2, [r7, #64]	; 0x40
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800458e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e5      	bne.n	8004568 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3314      	adds	r3, #20
 80045a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e5      	bne.n	800459c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d119      	bne.n	800460c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f023 0310 	bic.w	r3, r3, #16
 80045ee:	647b      	str	r3, [r7, #68]	; 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f8:	61ba      	str	r2, [r7, #24]
 80045fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	613b      	str	r3, [r7, #16]
   return(result);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e5      	bne.n	80045d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
}
 800461a:	bf00      	nop
 800461c:	3754      	adds	r7, #84	; 0x54
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800462c:	b0c0      	sub	sp, #256	; 0x100
 800462e:	af00      	add	r7, sp, #0
 8004630:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	68d9      	ldr	r1, [r3, #12]
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	ea40 0301 	orr.w	r3, r0, r1
 8004650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	431a      	orrs	r2, r3
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	431a      	orrs	r2, r3
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004680:	f021 010c 	bic.w	r1, r1, #12
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800468e:	430b      	orrs	r3, r1
 8004690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	6999      	ldr	r1, [r3, #24]
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	ea40 0301 	orr.w	r3, r0, r1
 80046ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b8f      	ldr	r3, [pc, #572]	; (80048f4 <UART_SetConfig+0x2cc>)
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d005      	beq.n	80046c8 <UART_SetConfig+0xa0>
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b8d      	ldr	r3, [pc, #564]	; (80048f8 <UART_SetConfig+0x2d0>)
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d104      	bne.n	80046d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c8:	f7ff fafc 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 80046cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046d0:	e003      	b.n	80046da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046d2:	f7ff fae3 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 80046d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e4:	f040 810c 	bne.w	8004900 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046fa:	4622      	mov	r2, r4
 80046fc:	462b      	mov	r3, r5
 80046fe:	1891      	adds	r1, r2, r2
 8004700:	65b9      	str	r1, [r7, #88]	; 0x58
 8004702:	415b      	adcs	r3, r3
 8004704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800470a:	4621      	mov	r1, r4
 800470c:	eb12 0801 	adds.w	r8, r2, r1
 8004710:	4629      	mov	r1, r5
 8004712:	eb43 0901 	adc.w	r9, r3, r1
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800472a:	4690      	mov	r8, r2
 800472c:	4699      	mov	r9, r3
 800472e:	4623      	mov	r3, r4
 8004730:	eb18 0303 	adds.w	r3, r8, r3
 8004734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004738:	462b      	mov	r3, r5
 800473a:	eb49 0303 	adc.w	r3, r9, r3
 800473e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800474e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004756:	460b      	mov	r3, r1
 8004758:	18db      	adds	r3, r3, r3
 800475a:	653b      	str	r3, [r7, #80]	; 0x50
 800475c:	4613      	mov	r3, r2
 800475e:	eb42 0303 	adc.w	r3, r2, r3
 8004762:	657b      	str	r3, [r7, #84]	; 0x54
 8004764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800476c:	f7fb fd88 	bl	8000280 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4b61      	ldr	r3, [pc, #388]	; (80048fc <UART_SetConfig+0x2d4>)
 8004776:	fba3 2302 	umull	r2, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	011c      	lsls	r4, r3, #4
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004788:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800478c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	64b9      	str	r1, [r7, #72]	; 0x48
 8004798:	415b      	adcs	r3, r3
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047a0:	4641      	mov	r1, r8
 80047a2:	eb12 0a01 	adds.w	sl, r2, r1
 80047a6:	4649      	mov	r1, r9
 80047a8:	eb43 0b01 	adc.w	fp, r3, r1
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047c0:	4692      	mov	sl, r2
 80047c2:	469b      	mov	fp, r3
 80047c4:	4643      	mov	r3, r8
 80047c6:	eb1a 0303 	adds.w	r3, sl, r3
 80047ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ce:	464b      	mov	r3, r9
 80047d0:	eb4b 0303 	adc.w	r3, fp, r3
 80047d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047ec:	460b      	mov	r3, r1
 80047ee:	18db      	adds	r3, r3, r3
 80047f0:	643b      	str	r3, [r7, #64]	; 0x40
 80047f2:	4613      	mov	r3, r2
 80047f4:	eb42 0303 	adc.w	r3, r2, r3
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
 80047fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004802:	f7fb fd3d 	bl	8000280 <__aeabi_uldivmod>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4611      	mov	r1, r2
 800480c:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <UART_SetConfig+0x2d4>)
 800480e:	fba3 2301 	umull	r2, r3, r3, r1
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	2264      	movs	r2, #100	; 0x64
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	1acb      	subs	r3, r1, r3
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <UART_SetConfig+0x2d4>)
 8004824:	fba3 2302 	umull	r2, r3, r3, r2
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004830:	441c      	add	r4, r3
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800483c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004840:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	63b9      	str	r1, [r7, #56]	; 0x38
 800484c:	415b      	adcs	r3, r3
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004854:	4641      	mov	r1, r8
 8004856:	1851      	adds	r1, r2, r1
 8004858:	6339      	str	r1, [r7, #48]	; 0x30
 800485a:	4649      	mov	r1, r9
 800485c:	414b      	adcs	r3, r1
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800486c:	4659      	mov	r1, fp
 800486e:	00cb      	lsls	r3, r1, #3
 8004870:	4651      	mov	r1, sl
 8004872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004876:	4651      	mov	r1, sl
 8004878:	00ca      	lsls	r2, r1, #3
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	4603      	mov	r3, r0
 8004880:	4642      	mov	r2, r8
 8004882:	189b      	adds	r3, r3, r2
 8004884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004888:	464b      	mov	r3, r9
 800488a:	460a      	mov	r2, r1
 800488c:	eb42 0303 	adc.w	r3, r2, r3
 8004890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048a8:	460b      	mov	r3, r1
 80048aa:	18db      	adds	r3, r3, r3
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ae:	4613      	mov	r3, r2
 80048b0:	eb42 0303 	adc.w	r3, r2, r3
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048be:	f7fb fcdf 	bl	8000280 <__aeabi_uldivmod>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <UART_SetConfig+0x2d4>)
 80048c8:	fba3 1302 	umull	r1, r3, r3, r2
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	2164      	movs	r1, #100	; 0x64
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	3332      	adds	r3, #50	; 0x32
 80048da:	4a08      	ldr	r2, [pc, #32]	; (80048fc <UART_SetConfig+0x2d4>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f003 0207 	and.w	r2, r3, #7
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4422      	add	r2, r4
 80048ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048f0:	e106      	b.n	8004b00 <UART_SetConfig+0x4d8>
 80048f2:	bf00      	nop
 80048f4:	40011000 	.word	0x40011000
 80048f8:	40011400 	.word	0x40011400
 80048fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004904:	2200      	movs	r2, #0
 8004906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800490a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800490e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004912:	4642      	mov	r2, r8
 8004914:	464b      	mov	r3, r9
 8004916:	1891      	adds	r1, r2, r2
 8004918:	6239      	str	r1, [r7, #32]
 800491a:	415b      	adcs	r3, r3
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004922:	4641      	mov	r1, r8
 8004924:	1854      	adds	r4, r2, r1
 8004926:	4649      	mov	r1, r9
 8004928:	eb43 0501 	adc.w	r5, r3, r1
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	00eb      	lsls	r3, r5, #3
 8004936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800493a:	00e2      	lsls	r2, r4, #3
 800493c:	4614      	mov	r4, r2
 800493e:	461d      	mov	r5, r3
 8004940:	4643      	mov	r3, r8
 8004942:	18e3      	adds	r3, r4, r3
 8004944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004948:	464b      	mov	r3, r9
 800494a:	eb45 0303 	adc.w	r3, r5, r3
 800494e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800495e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800496e:	4629      	mov	r1, r5
 8004970:	008b      	lsls	r3, r1, #2
 8004972:	4621      	mov	r1, r4
 8004974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004978:	4621      	mov	r1, r4
 800497a:	008a      	lsls	r2, r1, #2
 800497c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004980:	f7fb fc7e 	bl	8000280 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4b60      	ldr	r3, [pc, #384]	; (8004b0c <UART_SetConfig+0x4e4>)
 800498a:	fba3 2302 	umull	r2, r3, r3, r2
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	011c      	lsls	r4, r3, #4
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800499c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	61b9      	str	r1, [r7, #24]
 80049ac:	415b      	adcs	r3, r3
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b4:	4641      	mov	r1, r8
 80049b6:	1851      	adds	r1, r2, r1
 80049b8:	6139      	str	r1, [r7, #16]
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049cc:	4659      	mov	r1, fp
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d6:	4651      	mov	r1, sl
 80049d8:	00ca      	lsls	r2, r1, #3
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	4642      	mov	r2, r8
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e8:	464b      	mov	r3, r9
 80049ea:	460a      	mov	r2, r1
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80049fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	008b      	lsls	r3, r1, #2
 8004a10:	4641      	mov	r1, r8
 8004a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a16:	4641      	mov	r1, r8
 8004a18:	008a      	lsls	r2, r1, #2
 8004a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a1e:	f7fb fc2f 	bl	8000280 <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	4b38      	ldr	r3, [pc, #224]	; (8004b0c <UART_SetConfig+0x4e4>)
 8004a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2264      	movs	r2, #100	; 0x64
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	1acb      	subs	r3, r1, r3
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	3332      	adds	r3, #50	; 0x32
 8004a3c:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <UART_SetConfig+0x4e4>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a48:	441c      	add	r4, r3
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4e:	2200      	movs	r2, #0
 8004a50:	673b      	str	r3, [r7, #112]	; 0x70
 8004a52:	677a      	str	r2, [r7, #116]	; 0x74
 8004a54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	1891      	adds	r1, r2, r2
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	415b      	adcs	r3, r3
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a68:	4641      	mov	r1, r8
 8004a6a:	1851      	adds	r1, r2, r1
 8004a6c:	6039      	str	r1, [r7, #0]
 8004a6e:	4649      	mov	r1, r9
 8004a70:	414b      	adcs	r3, r1
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a80:	4659      	mov	r1, fp
 8004a82:	00cb      	lsls	r3, r1, #3
 8004a84:	4651      	mov	r1, sl
 8004a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	00ca      	lsls	r2, r1, #3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	4642      	mov	r2, r8
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	460a      	mov	r2, r1
 8004a9e:	eb42 0303 	adc.w	r3, r2, r3
 8004aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	663b      	str	r3, [r7, #96]	; 0x60
 8004aae:	667a      	str	r2, [r7, #100]	; 0x64
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004abc:	4649      	mov	r1, r9
 8004abe:	008b      	lsls	r3, r1, #2
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	008a      	lsls	r2, r1, #2
 8004aca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ace:	f7fb fbd7 	bl	8000280 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <UART_SetConfig+0x4e4>)
 8004ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	2164      	movs	r1, #100	; 0x64
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	3332      	adds	r3, #50	; 0x32
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <UART_SetConfig+0x4e4>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	f003 020f 	and.w	r2, r3, #15
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4422      	add	r2, r4
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b06:	46bd      	mov	sp, r7
 8004b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0c:	51eb851f 	.word	0x51eb851f

08004b10 <std>:
 8004b10:	2300      	movs	r3, #0
 8004b12:	b510      	push	{r4, lr}
 8004b14:	4604      	mov	r4, r0
 8004b16:	e9c0 3300 	strd	r3, r3, [r0]
 8004b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b1e:	6083      	str	r3, [r0, #8]
 8004b20:	8181      	strh	r1, [r0, #12]
 8004b22:	6643      	str	r3, [r0, #100]	; 0x64
 8004b24:	81c2      	strh	r2, [r0, #14]
 8004b26:	6183      	str	r3, [r0, #24]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	305c      	adds	r0, #92	; 0x5c
 8004b2e:	f000 fa17 	bl	8004f60 <memset>
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <std+0x58>)
 8004b34:	6263      	str	r3, [r4, #36]	; 0x24
 8004b36:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <std+0x5c>)
 8004b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <std+0x60>)
 8004b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <std+0x64>)
 8004b40:	6323      	str	r3, [r4, #48]	; 0x30
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <std+0x68>)
 8004b44:	6224      	str	r4, [r4, #32]
 8004b46:	429c      	cmp	r4, r3
 8004b48:	d006      	beq.n	8004b58 <std+0x48>
 8004b4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b4e:	4294      	cmp	r4, r2
 8004b50:	d002      	beq.n	8004b58 <std+0x48>
 8004b52:	33d0      	adds	r3, #208	; 0xd0
 8004b54:	429c      	cmp	r4, r3
 8004b56:	d105      	bne.n	8004b64 <std+0x54>
 8004b58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b60:	f000 ba76 	b.w	8005050 <__retarget_lock_init_recursive>
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	bf00      	nop
 8004b68:	08004db1 	.word	0x08004db1
 8004b6c:	08004dd3 	.word	0x08004dd3
 8004b70:	08004e0b 	.word	0x08004e0b
 8004b74:	08004e2f 	.word	0x08004e2f
 8004b78:	20000220 	.word	0x20000220

08004b7c <stdio_exit_handler>:
 8004b7c:	4a02      	ldr	r2, [pc, #8]	; (8004b88 <stdio_exit_handler+0xc>)
 8004b7e:	4903      	ldr	r1, [pc, #12]	; (8004b8c <stdio_exit_handler+0x10>)
 8004b80:	4803      	ldr	r0, [pc, #12]	; (8004b90 <stdio_exit_handler+0x14>)
 8004b82:	f000 b869 	b.w	8004c58 <_fwalk_sglue>
 8004b86:	bf00      	nop
 8004b88:	2000000c 	.word	0x2000000c
 8004b8c:	08005bad 	.word	0x08005bad
 8004b90:	20000018 	.word	0x20000018

08004b94 <cleanup_stdio>:
 8004b94:	6841      	ldr	r1, [r0, #4]
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <cleanup_stdio+0x34>)
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	d001      	beq.n	8004ba4 <cleanup_stdio+0x10>
 8004ba0:	f001 f804 	bl	8005bac <_fflush_r>
 8004ba4:	68a1      	ldr	r1, [r4, #8]
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <cleanup_stdio+0x38>)
 8004ba8:	4299      	cmp	r1, r3
 8004baa:	d002      	beq.n	8004bb2 <cleanup_stdio+0x1e>
 8004bac:	4620      	mov	r0, r4
 8004bae:	f000 fffd 	bl	8005bac <_fflush_r>
 8004bb2:	68e1      	ldr	r1, [r4, #12]
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <cleanup_stdio+0x3c>)
 8004bb6:	4299      	cmp	r1, r3
 8004bb8:	d004      	beq.n	8004bc4 <cleanup_stdio+0x30>
 8004bba:	4620      	mov	r0, r4
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc0:	f000 bff4 	b.w	8005bac <_fflush_r>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000220 	.word	0x20000220
 8004bcc:	20000288 	.word	0x20000288
 8004bd0:	200002f0 	.word	0x200002f0

08004bd4 <global_stdio_init.part.0>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <global_stdio_init.part.0+0x30>)
 8004bd8:	4c0b      	ldr	r4, [pc, #44]	; (8004c08 <global_stdio_init.part.0+0x34>)
 8004bda:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <global_stdio_init.part.0+0x38>)
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	4620      	mov	r0, r4
 8004be0:	2200      	movs	r2, #0
 8004be2:	2104      	movs	r1, #4
 8004be4:	f7ff ff94 	bl	8004b10 <std>
 8004be8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004bec:	2201      	movs	r2, #1
 8004bee:	2109      	movs	r1, #9
 8004bf0:	f7ff ff8e 	bl	8004b10 <std>
 8004bf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bfe:	2112      	movs	r1, #18
 8004c00:	f7ff bf86 	b.w	8004b10 <std>
 8004c04:	20000358 	.word	0x20000358
 8004c08:	20000220 	.word	0x20000220
 8004c0c:	08004b7d 	.word	0x08004b7d

08004c10 <__sfp_lock_acquire>:
 8004c10:	4801      	ldr	r0, [pc, #4]	; (8004c18 <__sfp_lock_acquire+0x8>)
 8004c12:	f000 ba1e 	b.w	8005052 <__retarget_lock_acquire_recursive>
 8004c16:	bf00      	nop
 8004c18:	20000361 	.word	0x20000361

08004c1c <__sfp_lock_release>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__sfp_lock_release+0x8>)
 8004c1e:	f000 ba19 	b.w	8005054 <__retarget_lock_release_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000361 	.word	0x20000361

08004c28 <__sinit>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	f7ff fff0 	bl	8004c10 <__sfp_lock_acquire>
 8004c30:	6a23      	ldr	r3, [r4, #32]
 8004c32:	b11b      	cbz	r3, 8004c3c <__sinit+0x14>
 8004c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c38:	f7ff bff0 	b.w	8004c1c <__sfp_lock_release>
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <__sinit+0x28>)
 8004c3e:	6223      	str	r3, [r4, #32]
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <__sinit+0x2c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f5      	bne.n	8004c34 <__sinit+0xc>
 8004c48:	f7ff ffc4 	bl	8004bd4 <global_stdio_init.part.0>
 8004c4c:	e7f2      	b.n	8004c34 <__sinit+0xc>
 8004c4e:	bf00      	nop
 8004c50:	08004b95 	.word	0x08004b95
 8004c54:	20000358 	.word	0x20000358

08004c58 <_fwalk_sglue>:
 8004c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	4688      	mov	r8, r1
 8004c60:	4614      	mov	r4, r2
 8004c62:	2600      	movs	r6, #0
 8004c64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c68:	f1b9 0901 	subs.w	r9, r9, #1
 8004c6c:	d505      	bpl.n	8004c7a <_fwalk_sglue+0x22>
 8004c6e:	6824      	ldr	r4, [r4, #0]
 8004c70:	2c00      	cmp	r4, #0
 8004c72:	d1f7      	bne.n	8004c64 <_fwalk_sglue+0xc>
 8004c74:	4630      	mov	r0, r6
 8004c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d907      	bls.n	8004c90 <_fwalk_sglue+0x38>
 8004c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c84:	3301      	adds	r3, #1
 8004c86:	d003      	beq.n	8004c90 <_fwalk_sglue+0x38>
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	47c0      	blx	r8
 8004c8e:	4306      	orrs	r6, r0
 8004c90:	3568      	adds	r5, #104	; 0x68
 8004c92:	e7e9      	b.n	8004c68 <_fwalk_sglue+0x10>

08004c94 <iprintf>:
 8004c94:	b40f      	push	{r0, r1, r2, r3}
 8004c96:	b507      	push	{r0, r1, r2, lr}
 8004c98:	4906      	ldr	r1, [pc, #24]	; (8004cb4 <iprintf+0x20>)
 8004c9a:	ab04      	add	r3, sp, #16
 8004c9c:	6808      	ldr	r0, [r1, #0]
 8004c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ca2:	6881      	ldr	r1, [r0, #8]
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	f000 fc51 	bl	800554c <_vfiprintf_r>
 8004caa:	b003      	add	sp, #12
 8004cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cb0:	b004      	add	sp, #16
 8004cb2:	4770      	bx	lr
 8004cb4:	20000064 	.word	0x20000064

08004cb8 <_puts_r>:
 8004cb8:	6a03      	ldr	r3, [r0, #32]
 8004cba:	b570      	push	{r4, r5, r6, lr}
 8004cbc:	6884      	ldr	r4, [r0, #8]
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	b90b      	cbnz	r3, 8004cc8 <_puts_r+0x10>
 8004cc4:	f7ff ffb0 	bl	8004c28 <__sinit>
 8004cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cca:	07db      	lsls	r3, r3, #31
 8004ccc:	d405      	bmi.n	8004cda <_puts_r+0x22>
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	0598      	lsls	r0, r3, #22
 8004cd2:	d402      	bmi.n	8004cda <_puts_r+0x22>
 8004cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd6:	f000 f9bc 	bl	8005052 <__retarget_lock_acquire_recursive>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	0719      	lsls	r1, r3, #28
 8004cde:	d513      	bpl.n	8004d08 <_puts_r+0x50>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	b18b      	cbz	r3, 8004d08 <_puts_r+0x50>
 8004ce4:	3e01      	subs	r6, #1
 8004ce6:	68a3      	ldr	r3, [r4, #8]
 8004ce8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cec:	3b01      	subs	r3, #1
 8004cee:	60a3      	str	r3, [r4, #8]
 8004cf0:	b9e9      	cbnz	r1, 8004d2e <_puts_r+0x76>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da2e      	bge.n	8004d54 <_puts_r+0x9c>
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	210a      	movs	r1, #10
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 f89b 	bl	8004e36 <__swbuf_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d007      	beq.n	8004d14 <_puts_r+0x5c>
 8004d04:	250a      	movs	r5, #10
 8004d06:	e007      	b.n	8004d18 <_puts_r+0x60>
 8004d08:	4621      	mov	r1, r4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 f8d0 	bl	8004eb0 <__swsetup_r>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d0e7      	beq.n	8004ce4 <_puts_r+0x2c>
 8004d14:	f04f 35ff 	mov.w	r5, #4294967295
 8004d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d1a:	07da      	lsls	r2, r3, #31
 8004d1c:	d405      	bmi.n	8004d2a <_puts_r+0x72>
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	059b      	lsls	r3, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_puts_r+0x72>
 8004d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d26:	f000 f995 	bl	8005054 <__retarget_lock_release_recursive>
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da04      	bge.n	8004d3c <_puts_r+0x84>
 8004d32:	69a2      	ldr	r2, [r4, #24]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	dc06      	bgt.n	8004d46 <_puts_r+0x8e>
 8004d38:	290a      	cmp	r1, #10
 8004d3a:	d004      	beq.n	8004d46 <_puts_r+0x8e>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	6022      	str	r2, [r4, #0]
 8004d42:	7019      	strb	r1, [r3, #0]
 8004d44:	e7cf      	b.n	8004ce6 <_puts_r+0x2e>
 8004d46:	4622      	mov	r2, r4
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f874 	bl	8004e36 <__swbuf_r>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d1c9      	bne.n	8004ce6 <_puts_r+0x2e>
 8004d52:	e7df      	b.n	8004d14 <_puts_r+0x5c>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	250a      	movs	r5, #10
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	6022      	str	r2, [r4, #0]
 8004d5c:	701d      	strb	r5, [r3, #0]
 8004d5e:	e7db      	b.n	8004d18 <_puts_r+0x60>

08004d60 <puts>:
 8004d60:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <puts+0xc>)
 8004d62:	4601      	mov	r1, r0
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	f7ff bfa7 	b.w	8004cb8 <_puts_r>
 8004d6a:	bf00      	nop
 8004d6c:	20000064 	.word	0x20000064

08004d70 <siprintf>:
 8004d70:	b40e      	push	{r1, r2, r3}
 8004d72:	b500      	push	{lr}
 8004d74:	b09c      	sub	sp, #112	; 0x70
 8004d76:	ab1d      	add	r3, sp, #116	; 0x74
 8004d78:	9002      	str	r0, [sp, #8]
 8004d7a:	9006      	str	r0, [sp, #24]
 8004d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d80:	4809      	ldr	r0, [pc, #36]	; (8004da8 <siprintf+0x38>)
 8004d82:	9107      	str	r1, [sp, #28]
 8004d84:	9104      	str	r1, [sp, #16]
 8004d86:	4909      	ldr	r1, [pc, #36]	; (8004dac <siprintf+0x3c>)
 8004d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8c:	9105      	str	r1, [sp, #20]
 8004d8e:	6800      	ldr	r0, [r0, #0]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	a902      	add	r1, sp, #8
 8004d94:	f000 fab2 	bl	80052fc <_svfiprintf_r>
 8004d98:	9b02      	ldr	r3, [sp, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	b01c      	add	sp, #112	; 0x70
 8004da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da4:	b003      	add	sp, #12
 8004da6:	4770      	bx	lr
 8004da8:	20000064 	.word	0x20000064
 8004dac:	ffff0208 	.word	0xffff0208

08004db0 <__sread>:
 8004db0:	b510      	push	{r4, lr}
 8004db2:	460c      	mov	r4, r1
 8004db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db8:	f000 f8fc 	bl	8004fb4 <_read_r>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	bfab      	itete	ge
 8004dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8004dc4:	181b      	addge	r3, r3, r0
 8004dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dca:	bfac      	ite	ge
 8004dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dce:	81a3      	strhlt	r3, [r4, #12]
 8004dd0:	bd10      	pop	{r4, pc}

08004dd2 <__swrite>:
 8004dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	898b      	ldrh	r3, [r1, #12]
 8004dda:	05db      	lsls	r3, r3, #23
 8004ddc:	4605      	mov	r5, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	4616      	mov	r6, r2
 8004de2:	d505      	bpl.n	8004df0 <__swrite+0x1e>
 8004de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de8:	2302      	movs	r3, #2
 8004dea:	2200      	movs	r2, #0
 8004dec:	f000 f8d0 	bl	8004f90 <_lseek_r>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	463b      	mov	r3, r7
 8004e00:	4628      	mov	r0, r5
 8004e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e06:	f000 b8e7 	b.w	8004fd8 <_write_r>

08004e0a <__sseek>:
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e12:	f000 f8bd 	bl	8004f90 <_lseek_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	bf15      	itete	ne
 8004e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e26:	81a3      	strheq	r3, [r4, #12]
 8004e28:	bf18      	it	ne
 8004e2a:	81a3      	strhne	r3, [r4, #12]
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <__sclose>:
 8004e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e32:	f000 b89d 	b.w	8004f70 <_close_r>

08004e36 <__swbuf_r>:
 8004e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e38:	460e      	mov	r6, r1
 8004e3a:	4614      	mov	r4, r2
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	b118      	cbz	r0, 8004e48 <__swbuf_r+0x12>
 8004e40:	6a03      	ldr	r3, [r0, #32]
 8004e42:	b90b      	cbnz	r3, 8004e48 <__swbuf_r+0x12>
 8004e44:	f7ff fef0 	bl	8004c28 <__sinit>
 8004e48:	69a3      	ldr	r3, [r4, #24]
 8004e4a:	60a3      	str	r3, [r4, #8]
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	071a      	lsls	r2, r3, #28
 8004e50:	d525      	bpl.n	8004e9e <__swbuf_r+0x68>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	b31b      	cbz	r3, 8004e9e <__swbuf_r+0x68>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	6922      	ldr	r2, [r4, #16]
 8004e5a:	1a98      	subs	r0, r3, r2
 8004e5c:	6963      	ldr	r3, [r4, #20]
 8004e5e:	b2f6      	uxtb	r6, r6
 8004e60:	4283      	cmp	r3, r0
 8004e62:	4637      	mov	r7, r6
 8004e64:	dc04      	bgt.n	8004e70 <__swbuf_r+0x3a>
 8004e66:	4621      	mov	r1, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 fe9f 	bl	8005bac <_fflush_r>
 8004e6e:	b9e0      	cbnz	r0, 8004eaa <__swbuf_r+0x74>
 8004e70:	68a3      	ldr	r3, [r4, #8]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	60a3      	str	r3, [r4, #8]
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	701e      	strb	r6, [r3, #0]
 8004e7e:	6962      	ldr	r2, [r4, #20]
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d004      	beq.n	8004e90 <__swbuf_r+0x5a>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	07db      	lsls	r3, r3, #31
 8004e8a:	d506      	bpl.n	8004e9a <__swbuf_r+0x64>
 8004e8c:	2e0a      	cmp	r6, #10
 8004e8e:	d104      	bne.n	8004e9a <__swbuf_r+0x64>
 8004e90:	4621      	mov	r1, r4
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 fe8a 	bl	8005bac <_fflush_r>
 8004e98:	b938      	cbnz	r0, 8004eaa <__swbuf_r+0x74>
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f000 f805 	bl	8004eb0 <__swsetup_r>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d0d5      	beq.n	8004e56 <__swbuf_r+0x20>
 8004eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8004eae:	e7f4      	b.n	8004e9a <__swbuf_r+0x64>

08004eb0 <__swsetup_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <__swsetup_r+0xac>)
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	460c      	mov	r4, r1
 8004eba:	b118      	cbz	r0, 8004ec4 <__swsetup_r+0x14>
 8004ebc:	6a03      	ldr	r3, [r0, #32]
 8004ebe:	b90b      	cbnz	r3, 8004ec4 <__swsetup_r+0x14>
 8004ec0:	f7ff feb2 	bl	8004c28 <__sinit>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eca:	0718      	lsls	r0, r3, #28
 8004ecc:	d422      	bmi.n	8004f14 <__swsetup_r+0x64>
 8004ece:	06d9      	lsls	r1, r3, #27
 8004ed0:	d407      	bmi.n	8004ee2 <__swsetup_r+0x32>
 8004ed2:	2309      	movs	r3, #9
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eda:	81a3      	strh	r3, [r4, #12]
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	e034      	b.n	8004f4c <__swsetup_r+0x9c>
 8004ee2:	0758      	lsls	r0, r3, #29
 8004ee4:	d512      	bpl.n	8004f0c <__swsetup_r+0x5c>
 8004ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ee8:	b141      	cbz	r1, 8004efc <__swsetup_r+0x4c>
 8004eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d002      	beq.n	8004ef8 <__swsetup_r+0x48>
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 f8b0 	bl	8005058 <_free_r>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6363      	str	r3, [r4, #52]	; 0x34
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	2300      	movs	r3, #0
 8004f06:	6063      	str	r3, [r4, #4]
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f043 0308 	orr.w	r3, r3, #8
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	6923      	ldr	r3, [r4, #16]
 8004f16:	b94b      	cbnz	r3, 8004f2c <__swsetup_r+0x7c>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f22:	d003      	beq.n	8004f2c <__swsetup_r+0x7c>
 8004f24:	4621      	mov	r1, r4
 8004f26:	4628      	mov	r0, r5
 8004f28:	f000 fe8e 	bl	8005c48 <__smakebuf_r>
 8004f2c:	89a0      	ldrh	r0, [r4, #12]
 8004f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f32:	f010 0301 	ands.w	r3, r0, #1
 8004f36:	d00a      	beq.n	8004f4e <__swsetup_r+0x9e>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60a3      	str	r3, [r4, #8]
 8004f3c:	6963      	ldr	r3, [r4, #20]
 8004f3e:	425b      	negs	r3, r3
 8004f40:	61a3      	str	r3, [r4, #24]
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	b943      	cbnz	r3, 8004f58 <__swsetup_r+0xa8>
 8004f46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f4a:	d1c4      	bne.n	8004ed6 <__swsetup_r+0x26>
 8004f4c:	bd38      	pop	{r3, r4, r5, pc}
 8004f4e:	0781      	lsls	r1, r0, #30
 8004f50:	bf58      	it	pl
 8004f52:	6963      	ldrpl	r3, [r4, #20]
 8004f54:	60a3      	str	r3, [r4, #8]
 8004f56:	e7f4      	b.n	8004f42 <__swsetup_r+0x92>
 8004f58:	2000      	movs	r0, #0
 8004f5a:	e7f7      	b.n	8004f4c <__swsetup_r+0x9c>
 8004f5c:	20000064 	.word	0x20000064

08004f60 <memset>:
 8004f60:	4402      	add	r2, r0
 8004f62:	4603      	mov	r3, r0
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d100      	bne.n	8004f6a <memset+0xa>
 8004f68:	4770      	bx	lr
 8004f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6e:	e7f9      	b.n	8004f64 <memset+0x4>

08004f70 <_close_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d06      	ldr	r5, [pc, #24]	; (8004f8c <_close_r+0x1c>)
 8004f74:	2300      	movs	r3, #0
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fc f8db 	bl	8001136 <_close>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_close_r+0x1a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_close_r+0x1a>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	2000035c 	.word	0x2000035c

08004f90 <_lseek_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d07      	ldr	r5, [pc, #28]	; (8004fb0 <_lseek_r+0x20>)
 8004f94:	4604      	mov	r4, r0
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fc f8f0 	bl	8001184 <_lseek>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_lseek_r+0x1e>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_lseek_r+0x1e>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	2000035c 	.word	0x2000035c

08004fb4 <_read_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d07      	ldr	r5, [pc, #28]	; (8004fd4 <_read_r+0x20>)
 8004fb8:	4604      	mov	r4, r0
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fc f87e 	bl	80010c4 <_read>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_read_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_read_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	2000035c 	.word	0x2000035c

08004fd8 <_write_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d07      	ldr	r5, [pc, #28]	; (8004ff8 <_write_r+0x20>)
 8004fdc:	4604      	mov	r4, r0
 8004fde:	4608      	mov	r0, r1
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	602a      	str	r2, [r5, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f7fc f889 	bl	80010fe <_write>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_write_r+0x1e>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_write_r+0x1e>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	2000035c 	.word	0x2000035c

08004ffc <__errno>:
 8004ffc:	4b01      	ldr	r3, [pc, #4]	; (8005004 <__errno+0x8>)
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000064 	.word	0x20000064

08005008 <__libc_init_array>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4d0d      	ldr	r5, [pc, #52]	; (8005040 <__libc_init_array+0x38>)
 800500c:	4c0d      	ldr	r4, [pc, #52]	; (8005044 <__libc_init_array+0x3c>)
 800500e:	1b64      	subs	r4, r4, r5
 8005010:	10a4      	asrs	r4, r4, #2
 8005012:	2600      	movs	r6, #0
 8005014:	42a6      	cmp	r6, r4
 8005016:	d109      	bne.n	800502c <__libc_init_array+0x24>
 8005018:	4d0b      	ldr	r5, [pc, #44]	; (8005048 <__libc_init_array+0x40>)
 800501a:	4c0c      	ldr	r4, [pc, #48]	; (800504c <__libc_init_array+0x44>)
 800501c:	f000 fee2 	bl	8005de4 <_init>
 8005020:	1b64      	subs	r4, r4, r5
 8005022:	10a4      	asrs	r4, r4, #2
 8005024:	2600      	movs	r6, #0
 8005026:	42a6      	cmp	r6, r4
 8005028:	d105      	bne.n	8005036 <__libc_init_array+0x2e>
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005030:	4798      	blx	r3
 8005032:	3601      	adds	r6, #1
 8005034:	e7ee      	b.n	8005014 <__libc_init_array+0xc>
 8005036:	f855 3b04 	ldr.w	r3, [r5], #4
 800503a:	4798      	blx	r3
 800503c:	3601      	adds	r6, #1
 800503e:	e7f2      	b.n	8005026 <__libc_init_array+0x1e>
 8005040:	08005ee4 	.word	0x08005ee4
 8005044:	08005ee4 	.word	0x08005ee4
 8005048:	08005ee4 	.word	0x08005ee4
 800504c:	08005ee8 	.word	0x08005ee8

08005050 <__retarget_lock_init_recursive>:
 8005050:	4770      	bx	lr

08005052 <__retarget_lock_acquire_recursive>:
 8005052:	4770      	bx	lr

08005054 <__retarget_lock_release_recursive>:
 8005054:	4770      	bx	lr
	...

08005058 <_free_r>:
 8005058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800505a:	2900      	cmp	r1, #0
 800505c:	d044      	beq.n	80050e8 <_free_r+0x90>
 800505e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005062:	9001      	str	r0, [sp, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f1a1 0404 	sub.w	r4, r1, #4
 800506a:	bfb8      	it	lt
 800506c:	18e4      	addlt	r4, r4, r3
 800506e:	f000 f8df 	bl	8005230 <__malloc_lock>
 8005072:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <_free_r+0x94>)
 8005074:	9801      	ldr	r0, [sp, #4]
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	b933      	cbnz	r3, 8005088 <_free_r+0x30>
 800507a:	6063      	str	r3, [r4, #4]
 800507c:	6014      	str	r4, [r2, #0]
 800507e:	b003      	add	sp, #12
 8005080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005084:	f000 b8da 	b.w	800523c <__malloc_unlock>
 8005088:	42a3      	cmp	r3, r4
 800508a:	d908      	bls.n	800509e <_free_r+0x46>
 800508c:	6825      	ldr	r5, [r4, #0]
 800508e:	1961      	adds	r1, r4, r5
 8005090:	428b      	cmp	r3, r1
 8005092:	bf01      	itttt	eq
 8005094:	6819      	ldreq	r1, [r3, #0]
 8005096:	685b      	ldreq	r3, [r3, #4]
 8005098:	1949      	addeq	r1, r1, r5
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	e7ed      	b.n	800507a <_free_r+0x22>
 800509e:	461a      	mov	r2, r3
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	b10b      	cbz	r3, 80050a8 <_free_r+0x50>
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d9fa      	bls.n	800509e <_free_r+0x46>
 80050a8:	6811      	ldr	r1, [r2, #0]
 80050aa:	1855      	adds	r5, r2, r1
 80050ac:	42a5      	cmp	r5, r4
 80050ae:	d10b      	bne.n	80050c8 <_free_r+0x70>
 80050b0:	6824      	ldr	r4, [r4, #0]
 80050b2:	4421      	add	r1, r4
 80050b4:	1854      	adds	r4, r2, r1
 80050b6:	42a3      	cmp	r3, r4
 80050b8:	6011      	str	r1, [r2, #0]
 80050ba:	d1e0      	bne.n	800507e <_free_r+0x26>
 80050bc:	681c      	ldr	r4, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	6053      	str	r3, [r2, #4]
 80050c2:	440c      	add	r4, r1
 80050c4:	6014      	str	r4, [r2, #0]
 80050c6:	e7da      	b.n	800507e <_free_r+0x26>
 80050c8:	d902      	bls.n	80050d0 <_free_r+0x78>
 80050ca:	230c      	movs	r3, #12
 80050cc:	6003      	str	r3, [r0, #0]
 80050ce:	e7d6      	b.n	800507e <_free_r+0x26>
 80050d0:	6825      	ldr	r5, [r4, #0]
 80050d2:	1961      	adds	r1, r4, r5
 80050d4:	428b      	cmp	r3, r1
 80050d6:	bf04      	itt	eq
 80050d8:	6819      	ldreq	r1, [r3, #0]
 80050da:	685b      	ldreq	r3, [r3, #4]
 80050dc:	6063      	str	r3, [r4, #4]
 80050de:	bf04      	itt	eq
 80050e0:	1949      	addeq	r1, r1, r5
 80050e2:	6021      	streq	r1, [r4, #0]
 80050e4:	6054      	str	r4, [r2, #4]
 80050e6:	e7ca      	b.n	800507e <_free_r+0x26>
 80050e8:	b003      	add	sp, #12
 80050ea:	bd30      	pop	{r4, r5, pc}
 80050ec:	20000364 	.word	0x20000364

080050f0 <sbrk_aligned>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4e0e      	ldr	r6, [pc, #56]	; (800512c <sbrk_aligned+0x3c>)
 80050f4:	460c      	mov	r4, r1
 80050f6:	6831      	ldr	r1, [r6, #0]
 80050f8:	4605      	mov	r5, r0
 80050fa:	b911      	cbnz	r1, 8005102 <sbrk_aligned+0x12>
 80050fc:	f000 fe1c 	bl	8005d38 <_sbrk_r>
 8005100:	6030      	str	r0, [r6, #0]
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f000 fe17 	bl	8005d38 <_sbrk_r>
 800510a:	1c43      	adds	r3, r0, #1
 800510c:	d00a      	beq.n	8005124 <sbrk_aligned+0x34>
 800510e:	1cc4      	adds	r4, r0, #3
 8005110:	f024 0403 	bic.w	r4, r4, #3
 8005114:	42a0      	cmp	r0, r4
 8005116:	d007      	beq.n	8005128 <sbrk_aligned+0x38>
 8005118:	1a21      	subs	r1, r4, r0
 800511a:	4628      	mov	r0, r5
 800511c:	f000 fe0c 	bl	8005d38 <_sbrk_r>
 8005120:	3001      	adds	r0, #1
 8005122:	d101      	bne.n	8005128 <sbrk_aligned+0x38>
 8005124:	f04f 34ff 	mov.w	r4, #4294967295
 8005128:	4620      	mov	r0, r4
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	20000368 	.word	0x20000368

08005130 <_malloc_r>:
 8005130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005134:	1ccd      	adds	r5, r1, #3
 8005136:	f025 0503 	bic.w	r5, r5, #3
 800513a:	3508      	adds	r5, #8
 800513c:	2d0c      	cmp	r5, #12
 800513e:	bf38      	it	cc
 8005140:	250c      	movcc	r5, #12
 8005142:	2d00      	cmp	r5, #0
 8005144:	4607      	mov	r7, r0
 8005146:	db01      	blt.n	800514c <_malloc_r+0x1c>
 8005148:	42a9      	cmp	r1, r5
 800514a:	d905      	bls.n	8005158 <_malloc_r+0x28>
 800514c:	230c      	movs	r3, #12
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	2600      	movs	r6, #0
 8005152:	4630      	mov	r0, r6
 8005154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005158:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800522c <_malloc_r+0xfc>
 800515c:	f000 f868 	bl	8005230 <__malloc_lock>
 8005160:	f8d8 3000 	ldr.w	r3, [r8]
 8005164:	461c      	mov	r4, r3
 8005166:	bb5c      	cbnz	r4, 80051c0 <_malloc_r+0x90>
 8005168:	4629      	mov	r1, r5
 800516a:	4638      	mov	r0, r7
 800516c:	f7ff ffc0 	bl	80050f0 <sbrk_aligned>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	4604      	mov	r4, r0
 8005174:	d155      	bne.n	8005222 <_malloc_r+0xf2>
 8005176:	f8d8 4000 	ldr.w	r4, [r8]
 800517a:	4626      	mov	r6, r4
 800517c:	2e00      	cmp	r6, #0
 800517e:	d145      	bne.n	800520c <_malloc_r+0xdc>
 8005180:	2c00      	cmp	r4, #0
 8005182:	d048      	beq.n	8005216 <_malloc_r+0xe6>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	4631      	mov	r1, r6
 8005188:	4638      	mov	r0, r7
 800518a:	eb04 0903 	add.w	r9, r4, r3
 800518e:	f000 fdd3 	bl	8005d38 <_sbrk_r>
 8005192:	4581      	cmp	r9, r0
 8005194:	d13f      	bne.n	8005216 <_malloc_r+0xe6>
 8005196:	6821      	ldr	r1, [r4, #0]
 8005198:	1a6d      	subs	r5, r5, r1
 800519a:	4629      	mov	r1, r5
 800519c:	4638      	mov	r0, r7
 800519e:	f7ff ffa7 	bl	80050f0 <sbrk_aligned>
 80051a2:	3001      	adds	r0, #1
 80051a4:	d037      	beq.n	8005216 <_malloc_r+0xe6>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	442b      	add	r3, r5
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	f8d8 3000 	ldr.w	r3, [r8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d038      	beq.n	8005226 <_malloc_r+0xf6>
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	42a2      	cmp	r2, r4
 80051b8:	d12b      	bne.n	8005212 <_malloc_r+0xe2>
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	e00f      	b.n	80051e0 <_malloc_r+0xb0>
 80051c0:	6822      	ldr	r2, [r4, #0]
 80051c2:	1b52      	subs	r2, r2, r5
 80051c4:	d41f      	bmi.n	8005206 <_malloc_r+0xd6>
 80051c6:	2a0b      	cmp	r2, #11
 80051c8:	d917      	bls.n	80051fa <_malloc_r+0xca>
 80051ca:	1961      	adds	r1, r4, r5
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	6025      	str	r5, [r4, #0]
 80051d0:	bf18      	it	ne
 80051d2:	6059      	strne	r1, [r3, #4]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	bf08      	it	eq
 80051d8:	f8c8 1000 	streq.w	r1, [r8]
 80051dc:	5162      	str	r2, [r4, r5]
 80051de:	604b      	str	r3, [r1, #4]
 80051e0:	4638      	mov	r0, r7
 80051e2:	f104 060b 	add.w	r6, r4, #11
 80051e6:	f000 f829 	bl	800523c <__malloc_unlock>
 80051ea:	f026 0607 	bic.w	r6, r6, #7
 80051ee:	1d23      	adds	r3, r4, #4
 80051f0:	1af2      	subs	r2, r6, r3
 80051f2:	d0ae      	beq.n	8005152 <_malloc_r+0x22>
 80051f4:	1b9b      	subs	r3, r3, r6
 80051f6:	50a3      	str	r3, [r4, r2]
 80051f8:	e7ab      	b.n	8005152 <_malloc_r+0x22>
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	6862      	ldr	r2, [r4, #4]
 80051fe:	d1dd      	bne.n	80051bc <_malloc_r+0x8c>
 8005200:	f8c8 2000 	str.w	r2, [r8]
 8005204:	e7ec      	b.n	80051e0 <_malloc_r+0xb0>
 8005206:	4623      	mov	r3, r4
 8005208:	6864      	ldr	r4, [r4, #4]
 800520a:	e7ac      	b.n	8005166 <_malloc_r+0x36>
 800520c:	4634      	mov	r4, r6
 800520e:	6876      	ldr	r6, [r6, #4]
 8005210:	e7b4      	b.n	800517c <_malloc_r+0x4c>
 8005212:	4613      	mov	r3, r2
 8005214:	e7cc      	b.n	80051b0 <_malloc_r+0x80>
 8005216:	230c      	movs	r3, #12
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	4638      	mov	r0, r7
 800521c:	f000 f80e 	bl	800523c <__malloc_unlock>
 8005220:	e797      	b.n	8005152 <_malloc_r+0x22>
 8005222:	6025      	str	r5, [r4, #0]
 8005224:	e7dc      	b.n	80051e0 <_malloc_r+0xb0>
 8005226:	605b      	str	r3, [r3, #4]
 8005228:	deff      	udf	#255	; 0xff
 800522a:	bf00      	nop
 800522c:	20000364 	.word	0x20000364

08005230 <__malloc_lock>:
 8005230:	4801      	ldr	r0, [pc, #4]	; (8005238 <__malloc_lock+0x8>)
 8005232:	f7ff bf0e 	b.w	8005052 <__retarget_lock_acquire_recursive>
 8005236:	bf00      	nop
 8005238:	20000360 	.word	0x20000360

0800523c <__malloc_unlock>:
 800523c:	4801      	ldr	r0, [pc, #4]	; (8005244 <__malloc_unlock+0x8>)
 800523e:	f7ff bf09 	b.w	8005054 <__retarget_lock_release_recursive>
 8005242:	bf00      	nop
 8005244:	20000360 	.word	0x20000360

08005248 <__ssputs_r>:
 8005248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	688e      	ldr	r6, [r1, #8]
 800524e:	461f      	mov	r7, r3
 8005250:	42be      	cmp	r6, r7
 8005252:	680b      	ldr	r3, [r1, #0]
 8005254:	4682      	mov	sl, r0
 8005256:	460c      	mov	r4, r1
 8005258:	4690      	mov	r8, r2
 800525a:	d82c      	bhi.n	80052b6 <__ssputs_r+0x6e>
 800525c:	898a      	ldrh	r2, [r1, #12]
 800525e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005262:	d026      	beq.n	80052b2 <__ssputs_r+0x6a>
 8005264:	6965      	ldr	r5, [r4, #20]
 8005266:	6909      	ldr	r1, [r1, #16]
 8005268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800526c:	eba3 0901 	sub.w	r9, r3, r1
 8005270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005274:	1c7b      	adds	r3, r7, #1
 8005276:	444b      	add	r3, r9
 8005278:	106d      	asrs	r5, r5, #1
 800527a:	429d      	cmp	r5, r3
 800527c:	bf38      	it	cc
 800527e:	461d      	movcc	r5, r3
 8005280:	0553      	lsls	r3, r2, #21
 8005282:	d527      	bpl.n	80052d4 <__ssputs_r+0x8c>
 8005284:	4629      	mov	r1, r5
 8005286:	f7ff ff53 	bl	8005130 <_malloc_r>
 800528a:	4606      	mov	r6, r0
 800528c:	b360      	cbz	r0, 80052e8 <__ssputs_r+0xa0>
 800528e:	6921      	ldr	r1, [r4, #16]
 8005290:	464a      	mov	r2, r9
 8005292:	f000 fd61 	bl	8005d58 <memcpy>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800529c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	6126      	str	r6, [r4, #16]
 80052a4:	6165      	str	r5, [r4, #20]
 80052a6:	444e      	add	r6, r9
 80052a8:	eba5 0509 	sub.w	r5, r5, r9
 80052ac:	6026      	str	r6, [r4, #0]
 80052ae:	60a5      	str	r5, [r4, #8]
 80052b0:	463e      	mov	r6, r7
 80052b2:	42be      	cmp	r6, r7
 80052b4:	d900      	bls.n	80052b8 <__ssputs_r+0x70>
 80052b6:	463e      	mov	r6, r7
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	4632      	mov	r2, r6
 80052bc:	4641      	mov	r1, r8
 80052be:	f000 fcff 	bl	8005cc0 <memmove>
 80052c2:	68a3      	ldr	r3, [r4, #8]
 80052c4:	1b9b      	subs	r3, r3, r6
 80052c6:	60a3      	str	r3, [r4, #8]
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	4433      	add	r3, r6
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	2000      	movs	r0, #0
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	462a      	mov	r2, r5
 80052d6:	f000 fd4d 	bl	8005d74 <_realloc_r>
 80052da:	4606      	mov	r6, r0
 80052dc:	2800      	cmp	r0, #0
 80052de:	d1e0      	bne.n	80052a2 <__ssputs_r+0x5a>
 80052e0:	6921      	ldr	r1, [r4, #16]
 80052e2:	4650      	mov	r0, sl
 80052e4:	f7ff feb8 	bl	8005058 <_free_r>
 80052e8:	230c      	movs	r3, #12
 80052ea:	f8ca 3000 	str.w	r3, [sl]
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f4:	81a3      	strh	r3, [r4, #12]
 80052f6:	f04f 30ff 	mov.w	r0, #4294967295
 80052fa:	e7e9      	b.n	80052d0 <__ssputs_r+0x88>

080052fc <_svfiprintf_r>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4698      	mov	r8, r3
 8005302:	898b      	ldrh	r3, [r1, #12]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	b09d      	sub	sp, #116	; 0x74
 8005308:	4607      	mov	r7, r0
 800530a:	460d      	mov	r5, r1
 800530c:	4614      	mov	r4, r2
 800530e:	d50e      	bpl.n	800532e <_svfiprintf_r+0x32>
 8005310:	690b      	ldr	r3, [r1, #16]
 8005312:	b963      	cbnz	r3, 800532e <_svfiprintf_r+0x32>
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	f7ff ff0b 	bl	8005130 <_malloc_r>
 800531a:	6028      	str	r0, [r5, #0]
 800531c:	6128      	str	r0, [r5, #16]
 800531e:	b920      	cbnz	r0, 800532a <_svfiprintf_r+0x2e>
 8005320:	230c      	movs	r3, #12
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e0d0      	b.n	80054cc <_svfiprintf_r+0x1d0>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	616b      	str	r3, [r5, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
 8005332:	2320      	movs	r3, #32
 8005334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005338:	f8cd 800c 	str.w	r8, [sp, #12]
 800533c:	2330      	movs	r3, #48	; 0x30
 800533e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80054e4 <_svfiprintf_r+0x1e8>
 8005342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005346:	f04f 0901 	mov.w	r9, #1
 800534a:	4623      	mov	r3, r4
 800534c:	469a      	mov	sl, r3
 800534e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005352:	b10a      	cbz	r2, 8005358 <_svfiprintf_r+0x5c>
 8005354:	2a25      	cmp	r2, #37	; 0x25
 8005356:	d1f9      	bne.n	800534c <_svfiprintf_r+0x50>
 8005358:	ebba 0b04 	subs.w	fp, sl, r4
 800535c:	d00b      	beq.n	8005376 <_svfiprintf_r+0x7a>
 800535e:	465b      	mov	r3, fp
 8005360:	4622      	mov	r2, r4
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ff6f 	bl	8005248 <__ssputs_r>
 800536a:	3001      	adds	r0, #1
 800536c:	f000 80a9 	beq.w	80054c2 <_svfiprintf_r+0x1c6>
 8005370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005372:	445a      	add	r2, fp
 8005374:	9209      	str	r2, [sp, #36]	; 0x24
 8005376:	f89a 3000 	ldrb.w	r3, [sl]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a1 	beq.w	80054c2 <_svfiprintf_r+0x1c6>
 8005380:	2300      	movs	r3, #0
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800538a:	f10a 0a01 	add.w	sl, sl, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	9307      	str	r3, [sp, #28]
 8005392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005396:	931a      	str	r3, [sp, #104]	; 0x68
 8005398:	4654      	mov	r4, sl
 800539a:	2205      	movs	r2, #5
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	4850      	ldr	r0, [pc, #320]	; (80054e4 <_svfiprintf_r+0x1e8>)
 80053a2:	f7fa ff1d 	bl	80001e0 <memchr>
 80053a6:	9a04      	ldr	r2, [sp, #16]
 80053a8:	b9d8      	cbnz	r0, 80053e2 <_svfiprintf_r+0xe6>
 80053aa:	06d0      	lsls	r0, r2, #27
 80053ac:	bf44      	itt	mi
 80053ae:	2320      	movmi	r3, #32
 80053b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b4:	0711      	lsls	r1, r2, #28
 80053b6:	bf44      	itt	mi
 80053b8:	232b      	movmi	r3, #43	; 0x2b
 80053ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053be:	f89a 3000 	ldrb.w	r3, [sl]
 80053c2:	2b2a      	cmp	r3, #42	; 0x2a
 80053c4:	d015      	beq.n	80053f2 <_svfiprintf_r+0xf6>
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	4654      	mov	r4, sl
 80053ca:	2000      	movs	r0, #0
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4621      	mov	r1, r4
 80053d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d6:	3b30      	subs	r3, #48	; 0x30
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d94d      	bls.n	8005478 <_svfiprintf_r+0x17c>
 80053dc:	b1b0      	cbz	r0, 800540c <_svfiprintf_r+0x110>
 80053de:	9207      	str	r2, [sp, #28]
 80053e0:	e014      	b.n	800540c <_svfiprintf_r+0x110>
 80053e2:	eba0 0308 	sub.w	r3, r0, r8
 80053e6:	fa09 f303 	lsl.w	r3, r9, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	46a2      	mov	sl, r4
 80053f0:	e7d2      	b.n	8005398 <_svfiprintf_r+0x9c>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfbb      	ittet	lt
 80053fe:	425b      	neglt	r3, r3
 8005400:	f042 0202 	orrlt.w	r2, r2, #2
 8005404:	9307      	strge	r3, [sp, #28]
 8005406:	9307      	strlt	r3, [sp, #28]
 8005408:	bfb8      	it	lt
 800540a:	9204      	strlt	r2, [sp, #16]
 800540c:	7823      	ldrb	r3, [r4, #0]
 800540e:	2b2e      	cmp	r3, #46	; 0x2e
 8005410:	d10c      	bne.n	800542c <_svfiprintf_r+0x130>
 8005412:	7863      	ldrb	r3, [r4, #1]
 8005414:	2b2a      	cmp	r3, #42	; 0x2a
 8005416:	d134      	bne.n	8005482 <_svfiprintf_r+0x186>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	9203      	str	r2, [sp, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfb8      	it	lt
 8005424:	f04f 33ff 	movlt.w	r3, #4294967295
 8005428:	3402      	adds	r4, #2
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80054f4 <_svfiprintf_r+0x1f8>
 8005430:	7821      	ldrb	r1, [r4, #0]
 8005432:	2203      	movs	r2, #3
 8005434:	4650      	mov	r0, sl
 8005436:	f7fa fed3 	bl	80001e0 <memchr>
 800543a:	b138      	cbz	r0, 800544c <_svfiprintf_r+0x150>
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	eba0 000a 	sub.w	r0, r0, sl
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	4082      	lsls	r2, r0
 8005446:	4313      	orrs	r3, r2
 8005448:	3401      	adds	r4, #1
 800544a:	9304      	str	r3, [sp, #16]
 800544c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005450:	4825      	ldr	r0, [pc, #148]	; (80054e8 <_svfiprintf_r+0x1ec>)
 8005452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005456:	2206      	movs	r2, #6
 8005458:	f7fa fec2 	bl	80001e0 <memchr>
 800545c:	2800      	cmp	r0, #0
 800545e:	d038      	beq.n	80054d2 <_svfiprintf_r+0x1d6>
 8005460:	4b22      	ldr	r3, [pc, #136]	; (80054ec <_svfiprintf_r+0x1f0>)
 8005462:	bb1b      	cbnz	r3, 80054ac <_svfiprintf_r+0x1b0>
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	3307      	adds	r3, #7
 8005468:	f023 0307 	bic.w	r3, r3, #7
 800546c:	3308      	adds	r3, #8
 800546e:	9303      	str	r3, [sp, #12]
 8005470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005472:	4433      	add	r3, r6
 8005474:	9309      	str	r3, [sp, #36]	; 0x24
 8005476:	e768      	b.n	800534a <_svfiprintf_r+0x4e>
 8005478:	fb0c 3202 	mla	r2, ip, r2, r3
 800547c:	460c      	mov	r4, r1
 800547e:	2001      	movs	r0, #1
 8005480:	e7a6      	b.n	80053d0 <_svfiprintf_r+0xd4>
 8005482:	2300      	movs	r3, #0
 8005484:	3401      	adds	r4, #1
 8005486:	9305      	str	r3, [sp, #20]
 8005488:	4619      	mov	r1, r3
 800548a:	f04f 0c0a 	mov.w	ip, #10
 800548e:	4620      	mov	r0, r4
 8005490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005494:	3a30      	subs	r2, #48	; 0x30
 8005496:	2a09      	cmp	r2, #9
 8005498:	d903      	bls.n	80054a2 <_svfiprintf_r+0x1a6>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0c6      	beq.n	800542c <_svfiprintf_r+0x130>
 800549e:	9105      	str	r1, [sp, #20]
 80054a0:	e7c4      	b.n	800542c <_svfiprintf_r+0x130>
 80054a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a6:	4604      	mov	r4, r0
 80054a8:	2301      	movs	r3, #1
 80054aa:	e7f0      	b.n	800548e <_svfiprintf_r+0x192>
 80054ac:	ab03      	add	r3, sp, #12
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	462a      	mov	r2, r5
 80054b2:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <_svfiprintf_r+0x1f4>)
 80054b4:	a904      	add	r1, sp, #16
 80054b6:	4638      	mov	r0, r7
 80054b8:	f3af 8000 	nop.w
 80054bc:	1c42      	adds	r2, r0, #1
 80054be:	4606      	mov	r6, r0
 80054c0:	d1d6      	bne.n	8005470 <_svfiprintf_r+0x174>
 80054c2:	89ab      	ldrh	r3, [r5, #12]
 80054c4:	065b      	lsls	r3, r3, #25
 80054c6:	f53f af2d 	bmi.w	8005324 <_svfiprintf_r+0x28>
 80054ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054cc:	b01d      	add	sp, #116	; 0x74
 80054ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d2:	ab03      	add	r3, sp, #12
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	462a      	mov	r2, r5
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <_svfiprintf_r+0x1f4>)
 80054da:	a904      	add	r1, sp, #16
 80054dc:	4638      	mov	r0, r7
 80054de:	f000 f9bd 	bl	800585c <_printf_i>
 80054e2:	e7eb      	b.n	80054bc <_svfiprintf_r+0x1c0>
 80054e4:	08005ea8 	.word	0x08005ea8
 80054e8:	08005eb2 	.word	0x08005eb2
 80054ec:	00000000 	.word	0x00000000
 80054f0:	08005249 	.word	0x08005249
 80054f4:	08005eae 	.word	0x08005eae

080054f8 <__sfputc_r>:
 80054f8:	6893      	ldr	r3, [r2, #8]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	b410      	push	{r4}
 8005500:	6093      	str	r3, [r2, #8]
 8005502:	da08      	bge.n	8005516 <__sfputc_r+0x1e>
 8005504:	6994      	ldr	r4, [r2, #24]
 8005506:	42a3      	cmp	r3, r4
 8005508:	db01      	blt.n	800550e <__sfputc_r+0x16>
 800550a:	290a      	cmp	r1, #10
 800550c:	d103      	bne.n	8005516 <__sfputc_r+0x1e>
 800550e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005512:	f7ff bc90 	b.w	8004e36 <__swbuf_r>
 8005516:	6813      	ldr	r3, [r2, #0]
 8005518:	1c58      	adds	r0, r3, #1
 800551a:	6010      	str	r0, [r2, #0]
 800551c:	7019      	strb	r1, [r3, #0]
 800551e:	4608      	mov	r0, r1
 8005520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005524:	4770      	bx	lr

08005526 <__sfputs_r>:
 8005526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005528:	4606      	mov	r6, r0
 800552a:	460f      	mov	r7, r1
 800552c:	4614      	mov	r4, r2
 800552e:	18d5      	adds	r5, r2, r3
 8005530:	42ac      	cmp	r4, r5
 8005532:	d101      	bne.n	8005538 <__sfputs_r+0x12>
 8005534:	2000      	movs	r0, #0
 8005536:	e007      	b.n	8005548 <__sfputs_r+0x22>
 8005538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553c:	463a      	mov	r2, r7
 800553e:	4630      	mov	r0, r6
 8005540:	f7ff ffda 	bl	80054f8 <__sfputc_r>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d1f3      	bne.n	8005530 <__sfputs_r+0xa>
 8005548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800554c <_vfiprintf_r>:
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	460d      	mov	r5, r1
 8005552:	b09d      	sub	sp, #116	; 0x74
 8005554:	4614      	mov	r4, r2
 8005556:	4698      	mov	r8, r3
 8005558:	4606      	mov	r6, r0
 800555a:	b118      	cbz	r0, 8005564 <_vfiprintf_r+0x18>
 800555c:	6a03      	ldr	r3, [r0, #32]
 800555e:	b90b      	cbnz	r3, 8005564 <_vfiprintf_r+0x18>
 8005560:	f7ff fb62 	bl	8004c28 <__sinit>
 8005564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005566:	07d9      	lsls	r1, r3, #31
 8005568:	d405      	bmi.n	8005576 <_vfiprintf_r+0x2a>
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	059a      	lsls	r2, r3, #22
 800556e:	d402      	bmi.n	8005576 <_vfiprintf_r+0x2a>
 8005570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005572:	f7ff fd6e 	bl	8005052 <__retarget_lock_acquire_recursive>
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	071b      	lsls	r3, r3, #28
 800557a:	d501      	bpl.n	8005580 <_vfiprintf_r+0x34>
 800557c:	692b      	ldr	r3, [r5, #16]
 800557e:	b99b      	cbnz	r3, 80055a8 <_vfiprintf_r+0x5c>
 8005580:	4629      	mov	r1, r5
 8005582:	4630      	mov	r0, r6
 8005584:	f7ff fc94 	bl	8004eb0 <__swsetup_r>
 8005588:	b170      	cbz	r0, 80055a8 <_vfiprintf_r+0x5c>
 800558a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800558c:	07dc      	lsls	r4, r3, #31
 800558e:	d504      	bpl.n	800559a <_vfiprintf_r+0x4e>
 8005590:	f04f 30ff 	mov.w	r0, #4294967295
 8005594:	b01d      	add	sp, #116	; 0x74
 8005596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559a:	89ab      	ldrh	r3, [r5, #12]
 800559c:	0598      	lsls	r0, r3, #22
 800559e:	d4f7      	bmi.n	8005590 <_vfiprintf_r+0x44>
 80055a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055a2:	f7ff fd57 	bl	8005054 <__retarget_lock_release_recursive>
 80055a6:	e7f3      	b.n	8005590 <_vfiprintf_r+0x44>
 80055a8:	2300      	movs	r3, #0
 80055aa:	9309      	str	r3, [sp, #36]	; 0x24
 80055ac:	2320      	movs	r3, #32
 80055ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80055b6:	2330      	movs	r3, #48	; 0x30
 80055b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800576c <_vfiprintf_r+0x220>
 80055bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055c0:	f04f 0901 	mov.w	r9, #1
 80055c4:	4623      	mov	r3, r4
 80055c6:	469a      	mov	sl, r3
 80055c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055cc:	b10a      	cbz	r2, 80055d2 <_vfiprintf_r+0x86>
 80055ce:	2a25      	cmp	r2, #37	; 0x25
 80055d0:	d1f9      	bne.n	80055c6 <_vfiprintf_r+0x7a>
 80055d2:	ebba 0b04 	subs.w	fp, sl, r4
 80055d6:	d00b      	beq.n	80055f0 <_vfiprintf_r+0xa4>
 80055d8:	465b      	mov	r3, fp
 80055da:	4622      	mov	r2, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	4630      	mov	r0, r6
 80055e0:	f7ff ffa1 	bl	8005526 <__sfputs_r>
 80055e4:	3001      	adds	r0, #1
 80055e6:	f000 80a9 	beq.w	800573c <_vfiprintf_r+0x1f0>
 80055ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ec:	445a      	add	r2, fp
 80055ee:	9209      	str	r2, [sp, #36]	; 0x24
 80055f0:	f89a 3000 	ldrb.w	r3, [sl]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a1 	beq.w	800573c <_vfiprintf_r+0x1f0>
 80055fa:	2300      	movs	r3, #0
 80055fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005604:	f10a 0a01 	add.w	sl, sl, #1
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	9307      	str	r3, [sp, #28]
 800560c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005610:	931a      	str	r3, [sp, #104]	; 0x68
 8005612:	4654      	mov	r4, sl
 8005614:	2205      	movs	r2, #5
 8005616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561a:	4854      	ldr	r0, [pc, #336]	; (800576c <_vfiprintf_r+0x220>)
 800561c:	f7fa fde0 	bl	80001e0 <memchr>
 8005620:	9a04      	ldr	r2, [sp, #16]
 8005622:	b9d8      	cbnz	r0, 800565c <_vfiprintf_r+0x110>
 8005624:	06d1      	lsls	r1, r2, #27
 8005626:	bf44      	itt	mi
 8005628:	2320      	movmi	r3, #32
 800562a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800562e:	0713      	lsls	r3, r2, #28
 8005630:	bf44      	itt	mi
 8005632:	232b      	movmi	r3, #43	; 0x2b
 8005634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005638:	f89a 3000 	ldrb.w	r3, [sl]
 800563c:	2b2a      	cmp	r3, #42	; 0x2a
 800563e:	d015      	beq.n	800566c <_vfiprintf_r+0x120>
 8005640:	9a07      	ldr	r2, [sp, #28]
 8005642:	4654      	mov	r4, sl
 8005644:	2000      	movs	r0, #0
 8005646:	f04f 0c0a 	mov.w	ip, #10
 800564a:	4621      	mov	r1, r4
 800564c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005650:	3b30      	subs	r3, #48	; 0x30
 8005652:	2b09      	cmp	r3, #9
 8005654:	d94d      	bls.n	80056f2 <_vfiprintf_r+0x1a6>
 8005656:	b1b0      	cbz	r0, 8005686 <_vfiprintf_r+0x13a>
 8005658:	9207      	str	r2, [sp, #28]
 800565a:	e014      	b.n	8005686 <_vfiprintf_r+0x13a>
 800565c:	eba0 0308 	sub.w	r3, r0, r8
 8005660:	fa09 f303 	lsl.w	r3, r9, r3
 8005664:	4313      	orrs	r3, r2
 8005666:	9304      	str	r3, [sp, #16]
 8005668:	46a2      	mov	sl, r4
 800566a:	e7d2      	b.n	8005612 <_vfiprintf_r+0xc6>
 800566c:	9b03      	ldr	r3, [sp, #12]
 800566e:	1d19      	adds	r1, r3, #4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	9103      	str	r1, [sp, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	bfbb      	ittet	lt
 8005678:	425b      	neglt	r3, r3
 800567a:	f042 0202 	orrlt.w	r2, r2, #2
 800567e:	9307      	strge	r3, [sp, #28]
 8005680:	9307      	strlt	r3, [sp, #28]
 8005682:	bfb8      	it	lt
 8005684:	9204      	strlt	r2, [sp, #16]
 8005686:	7823      	ldrb	r3, [r4, #0]
 8005688:	2b2e      	cmp	r3, #46	; 0x2e
 800568a:	d10c      	bne.n	80056a6 <_vfiprintf_r+0x15a>
 800568c:	7863      	ldrb	r3, [r4, #1]
 800568e:	2b2a      	cmp	r3, #42	; 0x2a
 8005690:	d134      	bne.n	80056fc <_vfiprintf_r+0x1b0>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	9203      	str	r2, [sp, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	bfb8      	it	lt
 800569e:	f04f 33ff 	movlt.w	r3, #4294967295
 80056a2:	3402      	adds	r4, #2
 80056a4:	9305      	str	r3, [sp, #20]
 80056a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800577c <_vfiprintf_r+0x230>
 80056aa:	7821      	ldrb	r1, [r4, #0]
 80056ac:	2203      	movs	r2, #3
 80056ae:	4650      	mov	r0, sl
 80056b0:	f7fa fd96 	bl	80001e0 <memchr>
 80056b4:	b138      	cbz	r0, 80056c6 <_vfiprintf_r+0x17a>
 80056b6:	9b04      	ldr	r3, [sp, #16]
 80056b8:	eba0 000a 	sub.w	r0, r0, sl
 80056bc:	2240      	movs	r2, #64	; 0x40
 80056be:	4082      	lsls	r2, r0
 80056c0:	4313      	orrs	r3, r2
 80056c2:	3401      	adds	r4, #1
 80056c4:	9304      	str	r3, [sp, #16]
 80056c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ca:	4829      	ldr	r0, [pc, #164]	; (8005770 <_vfiprintf_r+0x224>)
 80056cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056d0:	2206      	movs	r2, #6
 80056d2:	f7fa fd85 	bl	80001e0 <memchr>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d03f      	beq.n	800575a <_vfiprintf_r+0x20e>
 80056da:	4b26      	ldr	r3, [pc, #152]	; (8005774 <_vfiprintf_r+0x228>)
 80056dc:	bb1b      	cbnz	r3, 8005726 <_vfiprintf_r+0x1da>
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	3307      	adds	r3, #7
 80056e2:	f023 0307 	bic.w	r3, r3, #7
 80056e6:	3308      	adds	r3, #8
 80056e8:	9303      	str	r3, [sp, #12]
 80056ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ec:	443b      	add	r3, r7
 80056ee:	9309      	str	r3, [sp, #36]	; 0x24
 80056f0:	e768      	b.n	80055c4 <_vfiprintf_r+0x78>
 80056f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056f6:	460c      	mov	r4, r1
 80056f8:	2001      	movs	r0, #1
 80056fa:	e7a6      	b.n	800564a <_vfiprintf_r+0xfe>
 80056fc:	2300      	movs	r3, #0
 80056fe:	3401      	adds	r4, #1
 8005700:	9305      	str	r3, [sp, #20]
 8005702:	4619      	mov	r1, r3
 8005704:	f04f 0c0a 	mov.w	ip, #10
 8005708:	4620      	mov	r0, r4
 800570a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800570e:	3a30      	subs	r2, #48	; 0x30
 8005710:	2a09      	cmp	r2, #9
 8005712:	d903      	bls.n	800571c <_vfiprintf_r+0x1d0>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0c6      	beq.n	80056a6 <_vfiprintf_r+0x15a>
 8005718:	9105      	str	r1, [sp, #20]
 800571a:	e7c4      	b.n	80056a6 <_vfiprintf_r+0x15a>
 800571c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005720:	4604      	mov	r4, r0
 8005722:	2301      	movs	r3, #1
 8005724:	e7f0      	b.n	8005708 <_vfiprintf_r+0x1bc>
 8005726:	ab03      	add	r3, sp, #12
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	462a      	mov	r2, r5
 800572c:	4b12      	ldr	r3, [pc, #72]	; (8005778 <_vfiprintf_r+0x22c>)
 800572e:	a904      	add	r1, sp, #16
 8005730:	4630      	mov	r0, r6
 8005732:	f3af 8000 	nop.w
 8005736:	4607      	mov	r7, r0
 8005738:	1c78      	adds	r0, r7, #1
 800573a:	d1d6      	bne.n	80056ea <_vfiprintf_r+0x19e>
 800573c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800573e:	07d9      	lsls	r1, r3, #31
 8005740:	d405      	bmi.n	800574e <_vfiprintf_r+0x202>
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	059a      	lsls	r2, r3, #22
 8005746:	d402      	bmi.n	800574e <_vfiprintf_r+0x202>
 8005748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800574a:	f7ff fc83 	bl	8005054 <__retarget_lock_release_recursive>
 800574e:	89ab      	ldrh	r3, [r5, #12]
 8005750:	065b      	lsls	r3, r3, #25
 8005752:	f53f af1d 	bmi.w	8005590 <_vfiprintf_r+0x44>
 8005756:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005758:	e71c      	b.n	8005594 <_vfiprintf_r+0x48>
 800575a:	ab03      	add	r3, sp, #12
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	462a      	mov	r2, r5
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <_vfiprintf_r+0x22c>)
 8005762:	a904      	add	r1, sp, #16
 8005764:	4630      	mov	r0, r6
 8005766:	f000 f879 	bl	800585c <_printf_i>
 800576a:	e7e4      	b.n	8005736 <_vfiprintf_r+0x1ea>
 800576c:	08005ea8 	.word	0x08005ea8
 8005770:	08005eb2 	.word	0x08005eb2
 8005774:	00000000 	.word	0x00000000
 8005778:	08005527 	.word	0x08005527
 800577c:	08005eae 	.word	0x08005eae

08005780 <_printf_common>:
 8005780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	4616      	mov	r6, r2
 8005786:	4699      	mov	r9, r3
 8005788:	688a      	ldr	r2, [r1, #8]
 800578a:	690b      	ldr	r3, [r1, #16]
 800578c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005790:	4293      	cmp	r3, r2
 8005792:	bfb8      	it	lt
 8005794:	4613      	movlt	r3, r2
 8005796:	6033      	str	r3, [r6, #0]
 8005798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800579c:	4607      	mov	r7, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	b10a      	cbz	r2, 80057a6 <_printf_common+0x26>
 80057a2:	3301      	adds	r3, #1
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	0699      	lsls	r1, r3, #26
 80057aa:	bf42      	ittt	mi
 80057ac:	6833      	ldrmi	r3, [r6, #0]
 80057ae:	3302      	addmi	r3, #2
 80057b0:	6033      	strmi	r3, [r6, #0]
 80057b2:	6825      	ldr	r5, [r4, #0]
 80057b4:	f015 0506 	ands.w	r5, r5, #6
 80057b8:	d106      	bne.n	80057c8 <_printf_common+0x48>
 80057ba:	f104 0a19 	add.w	sl, r4, #25
 80057be:	68e3      	ldr	r3, [r4, #12]
 80057c0:	6832      	ldr	r2, [r6, #0]
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	dc26      	bgt.n	8005816 <_printf_common+0x96>
 80057c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057cc:	1e13      	subs	r3, r2, #0
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	bf18      	it	ne
 80057d2:	2301      	movne	r3, #1
 80057d4:	0692      	lsls	r2, r2, #26
 80057d6:	d42b      	bmi.n	8005830 <_printf_common+0xb0>
 80057d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057dc:	4649      	mov	r1, r9
 80057de:	4638      	mov	r0, r7
 80057e0:	47c0      	blx	r8
 80057e2:	3001      	adds	r0, #1
 80057e4:	d01e      	beq.n	8005824 <_printf_common+0xa4>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	6922      	ldr	r2, [r4, #16]
 80057ea:	f003 0306 	and.w	r3, r3, #6
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	bf02      	ittt	eq
 80057f2:	68e5      	ldreq	r5, [r4, #12]
 80057f4:	6833      	ldreq	r3, [r6, #0]
 80057f6:	1aed      	subeq	r5, r5, r3
 80057f8:	68a3      	ldr	r3, [r4, #8]
 80057fa:	bf0c      	ite	eq
 80057fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005800:	2500      	movne	r5, #0
 8005802:	4293      	cmp	r3, r2
 8005804:	bfc4      	itt	gt
 8005806:	1a9b      	subgt	r3, r3, r2
 8005808:	18ed      	addgt	r5, r5, r3
 800580a:	2600      	movs	r6, #0
 800580c:	341a      	adds	r4, #26
 800580e:	42b5      	cmp	r5, r6
 8005810:	d11a      	bne.n	8005848 <_printf_common+0xc8>
 8005812:	2000      	movs	r0, #0
 8005814:	e008      	b.n	8005828 <_printf_common+0xa8>
 8005816:	2301      	movs	r3, #1
 8005818:	4652      	mov	r2, sl
 800581a:	4649      	mov	r1, r9
 800581c:	4638      	mov	r0, r7
 800581e:	47c0      	blx	r8
 8005820:	3001      	adds	r0, #1
 8005822:	d103      	bne.n	800582c <_printf_common+0xac>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582c:	3501      	adds	r5, #1
 800582e:	e7c6      	b.n	80057be <_printf_common+0x3e>
 8005830:	18e1      	adds	r1, r4, r3
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	2030      	movs	r0, #48	; 0x30
 8005836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800583a:	4422      	add	r2, r4
 800583c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005844:	3302      	adds	r3, #2
 8005846:	e7c7      	b.n	80057d8 <_printf_common+0x58>
 8005848:	2301      	movs	r3, #1
 800584a:	4622      	mov	r2, r4
 800584c:	4649      	mov	r1, r9
 800584e:	4638      	mov	r0, r7
 8005850:	47c0      	blx	r8
 8005852:	3001      	adds	r0, #1
 8005854:	d0e6      	beq.n	8005824 <_printf_common+0xa4>
 8005856:	3601      	adds	r6, #1
 8005858:	e7d9      	b.n	800580e <_printf_common+0x8e>
	...

0800585c <_printf_i>:
 800585c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	7e0f      	ldrb	r7, [r1, #24]
 8005862:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005864:	2f78      	cmp	r7, #120	; 0x78
 8005866:	4691      	mov	r9, r2
 8005868:	4680      	mov	r8, r0
 800586a:	460c      	mov	r4, r1
 800586c:	469a      	mov	sl, r3
 800586e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005872:	d807      	bhi.n	8005884 <_printf_i+0x28>
 8005874:	2f62      	cmp	r7, #98	; 0x62
 8005876:	d80a      	bhi.n	800588e <_printf_i+0x32>
 8005878:	2f00      	cmp	r7, #0
 800587a:	f000 80d4 	beq.w	8005a26 <_printf_i+0x1ca>
 800587e:	2f58      	cmp	r7, #88	; 0x58
 8005880:	f000 80c0 	beq.w	8005a04 <_printf_i+0x1a8>
 8005884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800588c:	e03a      	b.n	8005904 <_printf_i+0xa8>
 800588e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005892:	2b15      	cmp	r3, #21
 8005894:	d8f6      	bhi.n	8005884 <_printf_i+0x28>
 8005896:	a101      	add	r1, pc, #4	; (adr r1, 800589c <_printf_i+0x40>)
 8005898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	08005909 	.word	0x08005909
 80058a4:	08005885 	.word	0x08005885
 80058a8:	08005885 	.word	0x08005885
 80058ac:	08005885 	.word	0x08005885
 80058b0:	08005885 	.word	0x08005885
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005885 	.word	0x08005885
 80058bc:	08005885 	.word	0x08005885
 80058c0:	08005885 	.word	0x08005885
 80058c4:	08005885 	.word	0x08005885
 80058c8:	08005a0d 	.word	0x08005a0d
 80058cc:	08005935 	.word	0x08005935
 80058d0:	080059c7 	.word	0x080059c7
 80058d4:	08005885 	.word	0x08005885
 80058d8:	08005885 	.word	0x08005885
 80058dc:	08005a2f 	.word	0x08005a2f
 80058e0:	08005885 	.word	0x08005885
 80058e4:	08005935 	.word	0x08005935
 80058e8:	08005885 	.word	0x08005885
 80058ec:	08005885 	.word	0x08005885
 80058f0:	080059cf 	.word	0x080059cf
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	1d1a      	adds	r2, r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	602a      	str	r2, [r5, #0]
 80058fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005904:	2301      	movs	r3, #1
 8005906:	e09f      	b.n	8005a48 <_printf_i+0x1ec>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	682b      	ldr	r3, [r5, #0]
 800590c:	0607      	lsls	r7, r0, #24
 800590e:	f103 0104 	add.w	r1, r3, #4
 8005912:	6029      	str	r1, [r5, #0]
 8005914:	d501      	bpl.n	800591a <_printf_i+0xbe>
 8005916:	681e      	ldr	r6, [r3, #0]
 8005918:	e003      	b.n	8005922 <_printf_i+0xc6>
 800591a:	0646      	lsls	r6, r0, #25
 800591c:	d5fb      	bpl.n	8005916 <_printf_i+0xba>
 800591e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005922:	2e00      	cmp	r6, #0
 8005924:	da03      	bge.n	800592e <_printf_i+0xd2>
 8005926:	232d      	movs	r3, #45	; 0x2d
 8005928:	4276      	negs	r6, r6
 800592a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592e:	485a      	ldr	r0, [pc, #360]	; (8005a98 <_printf_i+0x23c>)
 8005930:	230a      	movs	r3, #10
 8005932:	e012      	b.n	800595a <_printf_i+0xfe>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	1d19      	adds	r1, r3, #4
 800593a:	6029      	str	r1, [r5, #0]
 800593c:	0605      	lsls	r5, r0, #24
 800593e:	d501      	bpl.n	8005944 <_printf_i+0xe8>
 8005940:	681e      	ldr	r6, [r3, #0]
 8005942:	e002      	b.n	800594a <_printf_i+0xee>
 8005944:	0641      	lsls	r1, r0, #25
 8005946:	d5fb      	bpl.n	8005940 <_printf_i+0xe4>
 8005948:	881e      	ldrh	r6, [r3, #0]
 800594a:	4853      	ldr	r0, [pc, #332]	; (8005a98 <_printf_i+0x23c>)
 800594c:	2f6f      	cmp	r7, #111	; 0x6f
 800594e:	bf0c      	ite	eq
 8005950:	2308      	moveq	r3, #8
 8005952:	230a      	movne	r3, #10
 8005954:	2100      	movs	r1, #0
 8005956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800595a:	6865      	ldr	r5, [r4, #4]
 800595c:	60a5      	str	r5, [r4, #8]
 800595e:	2d00      	cmp	r5, #0
 8005960:	bfa2      	ittt	ge
 8005962:	6821      	ldrge	r1, [r4, #0]
 8005964:	f021 0104 	bicge.w	r1, r1, #4
 8005968:	6021      	strge	r1, [r4, #0]
 800596a:	b90e      	cbnz	r6, 8005970 <_printf_i+0x114>
 800596c:	2d00      	cmp	r5, #0
 800596e:	d04b      	beq.n	8005a08 <_printf_i+0x1ac>
 8005970:	4615      	mov	r5, r2
 8005972:	fbb6 f1f3 	udiv	r1, r6, r3
 8005976:	fb03 6711 	mls	r7, r3, r1, r6
 800597a:	5dc7      	ldrb	r7, [r0, r7]
 800597c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005980:	4637      	mov	r7, r6
 8005982:	42bb      	cmp	r3, r7
 8005984:	460e      	mov	r6, r1
 8005986:	d9f4      	bls.n	8005972 <_printf_i+0x116>
 8005988:	2b08      	cmp	r3, #8
 800598a:	d10b      	bne.n	80059a4 <_printf_i+0x148>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	07de      	lsls	r6, r3, #31
 8005990:	d508      	bpl.n	80059a4 <_printf_i+0x148>
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	6861      	ldr	r1, [r4, #4]
 8005996:	4299      	cmp	r1, r3
 8005998:	bfde      	ittt	le
 800599a:	2330      	movle	r3, #48	; 0x30
 800599c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059a4:	1b52      	subs	r2, r2, r5
 80059a6:	6122      	str	r2, [r4, #16]
 80059a8:	f8cd a000 	str.w	sl, [sp]
 80059ac:	464b      	mov	r3, r9
 80059ae:	aa03      	add	r2, sp, #12
 80059b0:	4621      	mov	r1, r4
 80059b2:	4640      	mov	r0, r8
 80059b4:	f7ff fee4 	bl	8005780 <_printf_common>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d14a      	bne.n	8005a52 <_printf_i+0x1f6>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	b004      	add	sp, #16
 80059c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	f043 0320 	orr.w	r3, r3, #32
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	4833      	ldr	r0, [pc, #204]	; (8005a9c <_printf_i+0x240>)
 80059d0:	2778      	movs	r7, #120	; 0x78
 80059d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	6829      	ldr	r1, [r5, #0]
 80059da:	061f      	lsls	r7, r3, #24
 80059dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80059e0:	d402      	bmi.n	80059e8 <_printf_i+0x18c>
 80059e2:	065f      	lsls	r7, r3, #25
 80059e4:	bf48      	it	mi
 80059e6:	b2b6      	uxthmi	r6, r6
 80059e8:	07df      	lsls	r7, r3, #31
 80059ea:	bf48      	it	mi
 80059ec:	f043 0320 	orrmi.w	r3, r3, #32
 80059f0:	6029      	str	r1, [r5, #0]
 80059f2:	bf48      	it	mi
 80059f4:	6023      	strmi	r3, [r4, #0]
 80059f6:	b91e      	cbnz	r6, 8005a00 <_printf_i+0x1a4>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	f023 0320 	bic.w	r3, r3, #32
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	2310      	movs	r3, #16
 8005a02:	e7a7      	b.n	8005954 <_printf_i+0xf8>
 8005a04:	4824      	ldr	r0, [pc, #144]	; (8005a98 <_printf_i+0x23c>)
 8005a06:	e7e4      	b.n	80059d2 <_printf_i+0x176>
 8005a08:	4615      	mov	r5, r2
 8005a0a:	e7bd      	b.n	8005988 <_printf_i+0x12c>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	6826      	ldr	r6, [r4, #0]
 8005a10:	6961      	ldr	r1, [r4, #20]
 8005a12:	1d18      	adds	r0, r3, #4
 8005a14:	6028      	str	r0, [r5, #0]
 8005a16:	0635      	lsls	r5, r6, #24
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	d501      	bpl.n	8005a20 <_printf_i+0x1c4>
 8005a1c:	6019      	str	r1, [r3, #0]
 8005a1e:	e002      	b.n	8005a26 <_printf_i+0x1ca>
 8005a20:	0670      	lsls	r0, r6, #25
 8005a22:	d5fb      	bpl.n	8005a1c <_printf_i+0x1c0>
 8005a24:	8019      	strh	r1, [r3, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	4615      	mov	r5, r2
 8005a2c:	e7bc      	b.n	80059a8 <_printf_i+0x14c>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	1d1a      	adds	r2, r3, #4
 8005a32:	602a      	str	r2, [r5, #0]
 8005a34:	681d      	ldr	r5, [r3, #0]
 8005a36:	6862      	ldr	r2, [r4, #4]
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f7fa fbd0 	bl	80001e0 <memchr>
 8005a40:	b108      	cbz	r0, 8005a46 <_printf_i+0x1ea>
 8005a42:	1b40      	subs	r0, r0, r5
 8005a44:	6060      	str	r0, [r4, #4]
 8005a46:	6863      	ldr	r3, [r4, #4]
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a50:	e7aa      	b.n	80059a8 <_printf_i+0x14c>
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	462a      	mov	r2, r5
 8005a56:	4649      	mov	r1, r9
 8005a58:	4640      	mov	r0, r8
 8005a5a:	47d0      	blx	sl
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d0ad      	beq.n	80059bc <_printf_i+0x160>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	079b      	lsls	r3, r3, #30
 8005a64:	d413      	bmi.n	8005a8e <_printf_i+0x232>
 8005a66:	68e0      	ldr	r0, [r4, #12]
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	4298      	cmp	r0, r3
 8005a6c:	bfb8      	it	lt
 8005a6e:	4618      	movlt	r0, r3
 8005a70:	e7a6      	b.n	80059c0 <_printf_i+0x164>
 8005a72:	2301      	movs	r3, #1
 8005a74:	4632      	mov	r2, r6
 8005a76:	4649      	mov	r1, r9
 8005a78:	4640      	mov	r0, r8
 8005a7a:	47d0      	blx	sl
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d09d      	beq.n	80059bc <_printf_i+0x160>
 8005a80:	3501      	adds	r5, #1
 8005a82:	68e3      	ldr	r3, [r4, #12]
 8005a84:	9903      	ldr	r1, [sp, #12]
 8005a86:	1a5b      	subs	r3, r3, r1
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	dcf2      	bgt.n	8005a72 <_printf_i+0x216>
 8005a8c:	e7eb      	b.n	8005a66 <_printf_i+0x20a>
 8005a8e:	2500      	movs	r5, #0
 8005a90:	f104 0619 	add.w	r6, r4, #25
 8005a94:	e7f5      	b.n	8005a82 <_printf_i+0x226>
 8005a96:	bf00      	nop
 8005a98:	08005eb9 	.word	0x08005eb9
 8005a9c:	08005eca 	.word	0x08005eca

08005aa0 <__sflush_r>:
 8005aa0:	898a      	ldrh	r2, [r1, #12]
 8005aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	0710      	lsls	r0, r2, #28
 8005aaa:	460c      	mov	r4, r1
 8005aac:	d458      	bmi.n	8005b60 <__sflush_r+0xc0>
 8005aae:	684b      	ldr	r3, [r1, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	dc05      	bgt.n	8005ac0 <__sflush_r+0x20>
 8005ab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dc02      	bgt.n	8005ac0 <__sflush_r+0x20>
 8005aba:	2000      	movs	r0, #0
 8005abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ac2:	2e00      	cmp	r6, #0
 8005ac4:	d0f9      	beq.n	8005aba <__sflush_r+0x1a>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005acc:	682f      	ldr	r7, [r5, #0]
 8005ace:	6a21      	ldr	r1, [r4, #32]
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	d032      	beq.n	8005b3a <__sflush_r+0x9a>
 8005ad4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	075a      	lsls	r2, r3, #29
 8005ada:	d505      	bpl.n	8005ae8 <__sflush_r+0x48>
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	1ac0      	subs	r0, r0, r3
 8005ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ae2:	b10b      	cbz	r3, 8005ae8 <__sflush_r+0x48>
 8005ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ae6:	1ac0      	subs	r0, r0, r3
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4602      	mov	r2, r0
 8005aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aee:	6a21      	ldr	r1, [r4, #32]
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b0      	blx	r6
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	d106      	bne.n	8005b08 <__sflush_r+0x68>
 8005afa:	6829      	ldr	r1, [r5, #0]
 8005afc:	291d      	cmp	r1, #29
 8005afe:	d82b      	bhi.n	8005b58 <__sflush_r+0xb8>
 8005b00:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <__sflush_r+0x108>)
 8005b02:	410a      	asrs	r2, r1
 8005b04:	07d6      	lsls	r6, r2, #31
 8005b06:	d427      	bmi.n	8005b58 <__sflush_r+0xb8>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	6062      	str	r2, [r4, #4]
 8005b0c:	04d9      	lsls	r1, r3, #19
 8005b0e:	6922      	ldr	r2, [r4, #16]
 8005b10:	6022      	str	r2, [r4, #0]
 8005b12:	d504      	bpl.n	8005b1e <__sflush_r+0x7e>
 8005b14:	1c42      	adds	r2, r0, #1
 8005b16:	d101      	bne.n	8005b1c <__sflush_r+0x7c>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b903      	cbnz	r3, 8005b1e <__sflush_r+0x7e>
 8005b1c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b20:	602f      	str	r7, [r5, #0]
 8005b22:	2900      	cmp	r1, #0
 8005b24:	d0c9      	beq.n	8005aba <__sflush_r+0x1a>
 8005b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b2a:	4299      	cmp	r1, r3
 8005b2c:	d002      	beq.n	8005b34 <__sflush_r+0x94>
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f7ff fa92 	bl	8005058 <_free_r>
 8005b34:	2000      	movs	r0, #0
 8005b36:	6360      	str	r0, [r4, #52]	; 0x34
 8005b38:	e7c0      	b.n	8005abc <__sflush_r+0x1c>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b0      	blx	r6
 8005b40:	1c41      	adds	r1, r0, #1
 8005b42:	d1c8      	bne.n	8005ad6 <__sflush_r+0x36>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0c5      	beq.n	8005ad6 <__sflush_r+0x36>
 8005b4a:	2b1d      	cmp	r3, #29
 8005b4c:	d001      	beq.n	8005b52 <__sflush_r+0xb2>
 8005b4e:	2b16      	cmp	r3, #22
 8005b50:	d101      	bne.n	8005b56 <__sflush_r+0xb6>
 8005b52:	602f      	str	r7, [r5, #0]
 8005b54:	e7b1      	b.n	8005aba <__sflush_r+0x1a>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5c:	81a3      	strh	r3, [r4, #12]
 8005b5e:	e7ad      	b.n	8005abc <__sflush_r+0x1c>
 8005b60:	690f      	ldr	r7, [r1, #16]
 8005b62:	2f00      	cmp	r7, #0
 8005b64:	d0a9      	beq.n	8005aba <__sflush_r+0x1a>
 8005b66:	0793      	lsls	r3, r2, #30
 8005b68:	680e      	ldr	r6, [r1, #0]
 8005b6a:	bf08      	it	eq
 8005b6c:	694b      	ldreq	r3, [r1, #20]
 8005b6e:	600f      	str	r7, [r1, #0]
 8005b70:	bf18      	it	ne
 8005b72:	2300      	movne	r3, #0
 8005b74:	eba6 0807 	sub.w	r8, r6, r7
 8005b78:	608b      	str	r3, [r1, #8]
 8005b7a:	f1b8 0f00 	cmp.w	r8, #0
 8005b7e:	dd9c      	ble.n	8005aba <__sflush_r+0x1a>
 8005b80:	6a21      	ldr	r1, [r4, #32]
 8005b82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b84:	4643      	mov	r3, r8
 8005b86:	463a      	mov	r2, r7
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b0      	blx	r6
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	dc06      	bgt.n	8005b9e <__sflush_r+0xfe>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e78e      	b.n	8005abc <__sflush_r+0x1c>
 8005b9e:	4407      	add	r7, r0
 8005ba0:	eba8 0800 	sub.w	r8, r8, r0
 8005ba4:	e7e9      	b.n	8005b7a <__sflush_r+0xda>
 8005ba6:	bf00      	nop
 8005ba8:	dfbffffe 	.word	0xdfbffffe

08005bac <_fflush_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	690b      	ldr	r3, [r1, #16]
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b913      	cbnz	r3, 8005bbc <_fflush_r+0x10>
 8005bb6:	2500      	movs	r5, #0
 8005bb8:	4628      	mov	r0, r5
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	b118      	cbz	r0, 8005bc6 <_fflush_r+0x1a>
 8005bbe:	6a03      	ldr	r3, [r0, #32]
 8005bc0:	b90b      	cbnz	r3, 8005bc6 <_fflush_r+0x1a>
 8005bc2:	f7ff f831 	bl	8004c28 <__sinit>
 8005bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f3      	beq.n	8005bb6 <_fflush_r+0xa>
 8005bce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bd0:	07d0      	lsls	r0, r2, #31
 8005bd2:	d404      	bmi.n	8005bde <_fflush_r+0x32>
 8005bd4:	0599      	lsls	r1, r3, #22
 8005bd6:	d402      	bmi.n	8005bde <_fflush_r+0x32>
 8005bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bda:	f7ff fa3a 	bl	8005052 <__retarget_lock_acquire_recursive>
 8005bde:	4628      	mov	r0, r5
 8005be0:	4621      	mov	r1, r4
 8005be2:	f7ff ff5d 	bl	8005aa0 <__sflush_r>
 8005be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005be8:	07da      	lsls	r2, r3, #31
 8005bea:	4605      	mov	r5, r0
 8005bec:	d4e4      	bmi.n	8005bb8 <_fflush_r+0xc>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	059b      	lsls	r3, r3, #22
 8005bf2:	d4e1      	bmi.n	8005bb8 <_fflush_r+0xc>
 8005bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bf6:	f7ff fa2d 	bl	8005054 <__retarget_lock_release_recursive>
 8005bfa:	e7dd      	b.n	8005bb8 <_fflush_r+0xc>

08005bfc <__swhatbuf_r>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	460c      	mov	r4, r1
 8005c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c04:	2900      	cmp	r1, #0
 8005c06:	b096      	sub	sp, #88	; 0x58
 8005c08:	4615      	mov	r5, r2
 8005c0a:	461e      	mov	r6, r3
 8005c0c:	da0d      	bge.n	8005c2a <__swhatbuf_r+0x2e>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	bf0c      	ite	eq
 8005c1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c1e:	2340      	movne	r3, #64	; 0x40
 8005c20:	2000      	movs	r0, #0
 8005c22:	6031      	str	r1, [r6, #0]
 8005c24:	602b      	str	r3, [r5, #0]
 8005c26:	b016      	add	sp, #88	; 0x58
 8005c28:	bd70      	pop	{r4, r5, r6, pc}
 8005c2a:	466a      	mov	r2, sp
 8005c2c:	f000 f862 	bl	8005cf4 <_fstat_r>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	dbec      	blt.n	8005c0e <__swhatbuf_r+0x12>
 8005c34:	9901      	ldr	r1, [sp, #4]
 8005c36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005c3e:	4259      	negs	r1, r3
 8005c40:	4159      	adcs	r1, r3
 8005c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c46:	e7eb      	b.n	8005c20 <__swhatbuf_r+0x24>

08005c48 <__smakebuf_r>:
 8005c48:	898b      	ldrh	r3, [r1, #12]
 8005c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c4c:	079d      	lsls	r5, r3, #30
 8005c4e:	4606      	mov	r6, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	d507      	bpl.n	8005c64 <__smakebuf_r+0x1c>
 8005c54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	6123      	str	r3, [r4, #16]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	6163      	str	r3, [r4, #20]
 8005c60:	b002      	add	sp, #8
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	ab01      	add	r3, sp, #4
 8005c66:	466a      	mov	r2, sp
 8005c68:	f7ff ffc8 	bl	8005bfc <__swhatbuf_r>
 8005c6c:	9900      	ldr	r1, [sp, #0]
 8005c6e:	4605      	mov	r5, r0
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7ff fa5d 	bl	8005130 <_malloc_r>
 8005c76:	b948      	cbnz	r0, 8005c8c <__smakebuf_r+0x44>
 8005c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c7c:	059a      	lsls	r2, r3, #22
 8005c7e:	d4ef      	bmi.n	8005c60 <__smakebuf_r+0x18>
 8005c80:	f023 0303 	bic.w	r3, r3, #3
 8005c84:	f043 0302 	orr.w	r3, r3, #2
 8005c88:	81a3      	strh	r3, [r4, #12]
 8005c8a:	e7e3      	b.n	8005c54 <__smakebuf_r+0xc>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	6020      	str	r0, [r4, #0]
 8005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	9b00      	ldr	r3, [sp, #0]
 8005c98:	6163      	str	r3, [r4, #20]
 8005c9a:	9b01      	ldr	r3, [sp, #4]
 8005c9c:	6120      	str	r0, [r4, #16]
 8005c9e:	b15b      	cbz	r3, 8005cb8 <__smakebuf_r+0x70>
 8005ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 f837 	bl	8005d18 <_isatty_r>
 8005caa:	b128      	cbz	r0, 8005cb8 <__smakebuf_r+0x70>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	431d      	orrs	r5, r3
 8005cbc:	81a5      	strh	r5, [r4, #12]
 8005cbe:	e7cf      	b.n	8005c60 <__smakebuf_r+0x18>

08005cc0 <memmove>:
 8005cc0:	4288      	cmp	r0, r1
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	eb01 0402 	add.w	r4, r1, r2
 8005cc8:	d902      	bls.n	8005cd0 <memmove+0x10>
 8005cca:	4284      	cmp	r4, r0
 8005ccc:	4623      	mov	r3, r4
 8005cce:	d807      	bhi.n	8005ce0 <memmove+0x20>
 8005cd0:	1e43      	subs	r3, r0, #1
 8005cd2:	42a1      	cmp	r1, r4
 8005cd4:	d008      	beq.n	8005ce8 <memmove+0x28>
 8005cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cde:	e7f8      	b.n	8005cd2 <memmove+0x12>
 8005ce0:	4402      	add	r2, r0
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	428a      	cmp	r2, r1
 8005ce6:	d100      	bne.n	8005cea <memmove+0x2a>
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cf2:	e7f7      	b.n	8005ce4 <memmove+0x24>

08005cf4 <_fstat_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d07      	ldr	r5, [pc, #28]	; (8005d14 <_fstat_r+0x20>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	f7fb fa24 	bl	800114e <_fstat>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d102      	bne.n	8005d10 <_fstat_r+0x1c>
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	b103      	cbz	r3, 8005d10 <_fstat_r+0x1c>
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	bd38      	pop	{r3, r4, r5, pc}
 8005d12:	bf00      	nop
 8005d14:	2000035c 	.word	0x2000035c

08005d18 <_isatty_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d06      	ldr	r5, [pc, #24]	; (8005d34 <_isatty_r+0x1c>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	f7fb fa23 	bl	800116e <_isatty>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_isatty_r+0x1a>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_isatty_r+0x1a>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	2000035c 	.word	0x2000035c

08005d38 <_sbrk_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d06      	ldr	r5, [pc, #24]	; (8005d54 <_sbrk_r+0x1c>)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4604      	mov	r4, r0
 8005d40:	4608      	mov	r0, r1
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	f7fb fa2c 	bl	80011a0 <_sbrk>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_sbrk_r+0x1a>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_sbrk_r+0x1a>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	2000035c 	.word	0x2000035c

08005d58 <memcpy>:
 8005d58:	440a      	add	r2, r1
 8005d5a:	4291      	cmp	r1, r2
 8005d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d60:	d100      	bne.n	8005d64 <memcpy+0xc>
 8005d62:	4770      	bx	lr
 8005d64:	b510      	push	{r4, lr}
 8005d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d6e:	4291      	cmp	r1, r2
 8005d70:	d1f9      	bne.n	8005d66 <memcpy+0xe>
 8005d72:	bd10      	pop	{r4, pc}

08005d74 <_realloc_r>:
 8005d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d78:	4680      	mov	r8, r0
 8005d7a:	4614      	mov	r4, r2
 8005d7c:	460e      	mov	r6, r1
 8005d7e:	b921      	cbnz	r1, 8005d8a <_realloc_r+0x16>
 8005d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d84:	4611      	mov	r1, r2
 8005d86:	f7ff b9d3 	b.w	8005130 <_malloc_r>
 8005d8a:	b92a      	cbnz	r2, 8005d98 <_realloc_r+0x24>
 8005d8c:	f7ff f964 	bl	8005058 <_free_r>
 8005d90:	4625      	mov	r5, r4
 8005d92:	4628      	mov	r0, r5
 8005d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d98:	f000 f81b 	bl	8005dd2 <_malloc_usable_size_r>
 8005d9c:	4284      	cmp	r4, r0
 8005d9e:	4607      	mov	r7, r0
 8005da0:	d802      	bhi.n	8005da8 <_realloc_r+0x34>
 8005da2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005da6:	d812      	bhi.n	8005dce <_realloc_r+0x5a>
 8005da8:	4621      	mov	r1, r4
 8005daa:	4640      	mov	r0, r8
 8005dac:	f7ff f9c0 	bl	8005130 <_malloc_r>
 8005db0:	4605      	mov	r5, r0
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d0ed      	beq.n	8005d92 <_realloc_r+0x1e>
 8005db6:	42bc      	cmp	r4, r7
 8005db8:	4622      	mov	r2, r4
 8005dba:	4631      	mov	r1, r6
 8005dbc:	bf28      	it	cs
 8005dbe:	463a      	movcs	r2, r7
 8005dc0:	f7ff ffca 	bl	8005d58 <memcpy>
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	f7ff f946 	bl	8005058 <_free_r>
 8005dcc:	e7e1      	b.n	8005d92 <_realloc_r+0x1e>
 8005dce:	4635      	mov	r5, r6
 8005dd0:	e7df      	b.n	8005d92 <_realloc_r+0x1e>

08005dd2 <_malloc_usable_size_r>:
 8005dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd6:	1f18      	subs	r0, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bfbc      	itt	lt
 8005ddc:	580b      	ldrlt	r3, [r1, r0]
 8005dde:	18c0      	addlt	r0, r0, r3
 8005de0:	4770      	bx	lr
	...

08005de4 <_init>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	bf00      	nop
 8005de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dea:	bc08      	pop	{r3}
 8005dec:	469e      	mov	lr, r3
 8005dee:	4770      	bx	lr

08005df0 <_fini>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	bf00      	nop
 8005df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df6:	bc08      	pop	{r3}
 8005df8:	469e      	mov	lr, r3
 8005dfa:	4770      	bx	lr
