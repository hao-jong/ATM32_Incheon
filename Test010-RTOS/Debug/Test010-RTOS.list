
Test010-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006918  08006918  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006920  08006920  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004208  2000006c  08006994  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004274  08006994  00024274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015830  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003386  00000000  00000000  0003590f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00038c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e61  00000000  00000000  00039f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193a2  00000000  00000000  0003ad91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015186  00000000  00000000  00054133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000990b6  00000000  00000000  000692b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005648  00000000  00000000  00102370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001079b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800677c 	.word	0x0800677c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800677c 	.word	0x0800677c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000088 	.word	0x20000088
 80005ac:	20000128 	.word	0x20000128

080005b0 <HAL_GPIO_EXTI_Callback>:
void StartTask03(void const * argument);
void StartTask04(void const * argument);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	osSemaphoreRelease(myBinarySem01Handle);
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <HAL_GPIO_EXTI_Callback+0x1c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fc6c 	bl	8002e9c <osSemaphoreRelease>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000380 	.word	0x20000380

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b09e      	sub	sp, #120	; 0x78
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fc7d 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f875 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f907 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f8db 	bl	800079c <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80005e6:	2300      	movs	r3, #0
 80005e8:	673b      	str	r3, [r7, #112]	; 0x70
 80005ea:	2300      	movs	r3, #0
 80005ec:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80005ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005f2:	2101      	movs	r1, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fbd0 	bl	8002d9a <osSemaphoreCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <main+0xd0>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <main+0xd4>)
 8000602:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000614:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fb5d 	bl	8002cda <osThreadCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <main+0xd8>)
 8000624:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <main+0xdc>)
 8000628:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800062c:	461d      	mov	r5, r3
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800063a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fb4a 	bl	8002cda <osThreadCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <main+0xe0>)
 800064a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <main+0xe4>)
 800064e:	f107 041c 	add.w	r4, r7, #28
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fb37 	bl	8002cda <osThreadCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <main+0xe8>)
 8000670:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <main+0xec>)
 8000674:	463c      	mov	r4, r7
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000684:	463b      	mov	r3, r7
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fb26 	bl	8002cda <osThreadCreate>
 800068e:	4603      	mov	r3, r0
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <main+0xf0>)
 8000692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart("RTOS TEST.....");
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <main+0xf4>)
 8000696:	f000 fa13 	bl	8000ac0 <ProgramStart>
  //  osSemaphoreRelease(myBinarySem01Handle);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069a:	f002 fb17 	bl	8002ccc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	e7fe      	b.n	800069e <main+0xce>
 80006a0:	20000380 	.word	0x20000380
 80006a4:	080067b0 	.word	0x080067b0
 80006a8:	20000370 	.word	0x20000370
 80006ac:	080067d8 	.word	0x080067d8
 80006b0:	20000374 	.word	0x20000374
 80006b4:	08006800 	.word	0x08006800
 80006b8:	20000378 	.word	0x20000378
 80006bc:	08006828 	.word	0x08006828
 80006c0:	2000037c 	.word	0x2000037c
 80006c4:	08006794 	.word	0x08006794

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 f8b8 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000746:	2304      	movs	r3, #4
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f000 feb2 	bl	80014b8 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075a:	f000 f951 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f914 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f93b 	bl	8000a00 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f001 fdae 	bl	8002334 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f90f 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000328 	.word	0x20000328
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b38      	ldr	r3, [pc, #224]	; (80008ec <MX_GPIO_Init+0xfc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a37      	ldr	r2, [pc, #220]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a30      	ldr	r2, [pc, #192]	; (80008ec <MX_GPIO_Init+0xfc>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a29      	ldr	r2, [pc, #164]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a22      	ldr	r2, [pc, #136]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <MX_GPIO_Init+0xfc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	481d      	ldr	r0, [pc, #116]	; (80008f0 <MX_GPIO_Init+0x100>)
 800087c:	f000 fdea 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000886:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4817      	ldr	r0, [pc, #92]	; (80008f4 <MX_GPIO_Init+0x104>)
 8000898:	f000 fc40 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089c:	2320      	movs	r3, #32
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x100>)
 80008b4:	f000 fc32 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Pin */
  GPIO_InitStruct.Pin = Interrupt_Pin;
 80008b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Interrupt_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <MX_GPIO_Init+0x100>)
 80008d0:	f000 fc24 	bl	800111c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2105      	movs	r1, #5
 80008d8:	2028      	movs	r0, #40	; 0x28
 80008da:	f000 fbf5 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008de:	2028      	movs	r0, #40	; 0x28
 80008e0:	f000 fc0e 	bl	8001100 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020800 	.word	0x40020800

080008f8 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <StartTask01+0x34>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fa7a 	bl	8002e00 <osSemaphoreWait>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d107      	bne.n	8000922 <StartTask01+0x2a>
	 {
	  printf("Task 01 N \r\n");
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <StartTask01+0x38>)
 8000914:	f004 fe9a 	bl	800564c <puts>
	  osSemaphoreRelease(myBinarySem01Handle);
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <StartTask01+0x34>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fabd 	bl	8002e9c <osSemaphoreRelease>
	 }
	  osDelay(100);
 8000922:	2064      	movs	r0, #100	; 0x64
 8000924:	f002 fa25 	bl	8002d72 <osDelay>
	 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000928:	e7ea      	b.n	8000900 <StartTask01+0x8>
 800092a:	bf00      	nop
 800092c:	20000380 	.word	0x20000380
 8000930:	08006844 	.word	0x08006844

08000934 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;)
	{
		 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <StartTask02+0x34>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fa5c 	bl	8002e00 <osSemaphoreWait>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d107      	bne.n	800095e <StartTask02+0x2a>
		 {
		  printf("Task 02 BN \r\n");
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <StartTask02+0x38>)
 8000950:	f004 fe7c 	bl	800564c <puts>
		  osSemaphoreRelease(myBinarySem01Handle);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <StartTask02+0x34>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fa9f 	bl	8002e9c <osSemaphoreRelease>
		 }
	  osDelay(100);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f002 fa07 	bl	8002d72 <osDelay>
		 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000964:	e7ea      	b.n	800093c <StartTask02+0x8>
 8000966:	bf00      	nop
 8000968:	20000380 	.word	0x20000380
 800096c:	08006850 	.word	0x08006850

08000970 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
		 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <StartTask03+0x34>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f002 fa3e 	bl	8002e00 <osSemaphoreWait>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d107      	bne.n	800099a <StartTask03+0x2a>
		 {
		  printf("Task 3 L \r\n");
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <StartTask03+0x38>)
 800098c:	f004 fe5e 	bl	800564c <puts>
		  osSemaphoreRelease(myBinarySem01Handle);
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <StartTask03+0x34>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fa81 	bl	8002e9c <osSemaphoreRelease>
		 }
	osDelay(100);
 800099a:	2064      	movs	r0, #100	; 0x64
 800099c:	f002 f9e9 	bl	8002d72 <osDelay>
		 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009a0:	e7ea      	b.n	8000978 <StartTask03+0x8>
 80009a2:	bf00      	nop
 80009a4:	20000380 	.word	0x20000380
 80009a8:	08006860 	.word	0x08006860

080009ac <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	  for(;;)
	  {
			 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <StartTask04+0x28>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fa20 	bl	8002e00 <osSemaphoreWait>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <StartTask04+0x20>
			 {
			  printf("Task 4 I \r\n");
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <StartTask04+0x2c>)
 80009c8:	f004 fe40 	bl	800564c <puts>
//			  osSemaphoreRelease(myBinarySem01Handle);
			 }
		osDelay(100);
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f002 f9d0 	bl	8002d72 <osDelay>
			 if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009d2:	e7ef      	b.n	80009b4 <StartTask04+0x8>
 80009d4:	20000380 	.word	0x20000380
 80009d8:	0800686c 	.word	0x0800686c

080009dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ee:	f000 fa93 	bl	8000f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40014400 	.word	0x40014400

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <__io_getchar>:


extern UART_HandleTypeDef huart2;

int __io_getchar(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	int ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK)
 8000a12:	bf00      	nop
 8000a14:	1d39      	adds	r1, r7, #4
 8000a16:	230a      	movs	r3, #10
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <__io_getchar+0x28>)
 8000a1c:	f001 fd65 	bl	80024ea <HAL_UART_Receive>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <__io_getchar+0x1e>
	{
		return ch;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	e7ff      	b.n	8000a2a <__io_getchar+0x1e>
	}
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000328 	.word	0x20000328

08000a38 <__io_putchar>:

int __io_putchar(int ch)
	{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000a40:	1d39      	adds	r1, r7, #4
 8000a42:	230a      	movs	r3, #10
 8000a44:	2201      	movs	r2, #1
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <__io_putchar+0x20>)
 8000a48:	f001 fcc4 	bl	80023d4 <HAL_UART_Transmit>
		return ch;
 8000a4c:	687b      	ldr	r3, [r7, #4]
	}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000328 	.word	0x20000328

08000a5c <Standby>:

void Standby()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000a60:	bf00      	nop
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <Standby+0x1c>)
 8000a68:	f000 fcdc 	bl	8001424 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f7      	bne.n	8000a62 <Standby+0x6>
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40020800 	.word	0x40020800

08000a7c <cls>:
void cls()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	printf("\033[2j");
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <cls+0x10>)
 8000a82:	f004 fd7d 	bl	8005580 <iprintf>

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08006878 	.word	0x08006878

08000a90 <Cursor>:
void Cursor(int x, int y)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	char buf [20];
	sprintf(buf,"\033[%d;%dH",y,x);
 8000a9a:	f107 000c 	add.w	r0, r7, #12
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	4906      	ldr	r1, [pc, #24]	; (8000abc <Cursor+0x2c>)
 8000aa4:	f004 fdda 	bl	800565c <siprintf>
	puts(buf);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 fdcd 	bl	800564c <puts>
}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	08006880 	.word	0x08006880

08000ac0 <ProgramStart>:
void ProgramStart (char * str)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	cls();
 8000ac8:	f7ff ffd8 	bl	8000a7c <cls>
	Cursor(0,0);
 8000acc:	2100      	movs	r1, #0
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff ffde 	bl	8000a90 <Cursor>
	printf("Program Start - %s\r\n",str);
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <ProgramStart+0x30>)
 8000ad8:	f004 fd52 	bl	8005580 <iprintf>
	printf("Press Blue-button(b1)to start\r\n");
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <ProgramStart+0x34>)
 8000ade:	f004 fdb5 	bl	800564c <puts>
	Standby();
 8000ae2:	f7ff ffbb 	bl	8000a5c <Standby>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	0800688c 	.word	0x0800688c
 8000af4:	080068a4 	.word	0x080068a4

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_MspInit+0x54>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_MspInit+0x54>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x54>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_MspInit+0x54>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_MspInit+0x54>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_MspInit+0x54>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	210f      	movs	r1, #15
 8000b3a:	f06f 0001 	mvn.w	r0, #1
 8000b3e:	f000 fac3 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12b      	bne.n	8000bca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000baa:	230c      	movs	r3, #12
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_UART_MspInit+0x8c>)
 8000bc6:	f000 faa9 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <HAL_InitTick+0xd0>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0c:	f107 020c 	add.w	r2, r7, #12
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 f8e6 	bl	8001de8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c1c:	f001 f8d0 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 8000c20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c24:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <HAL_InitTick+0xd4>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	0c9b      	lsrs	r3, r3, #18
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c32:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <HAL_InitTick+0xdc>)
 8000c34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c3c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000c56:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c58:	f001 f8f8 	bl	8001e4c <HAL_TIM_Base_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d11b      	bne.n	8000ca2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000c6a:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <HAL_InitTick+0xd8>)
 8000c6c:	f001 f948 	bl	8001f00 <HAL_TIM_Base_Start_IT>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d111      	bne.n	8000ca2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c7e:	2019      	movs	r0, #25
 8000c80:	f000 fa3e 	bl	8001100 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b0f      	cmp	r3, #15
 8000c88:	d808      	bhi.n	8000c9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	2019      	movs	r0, #25
 8000c90:	f000 fa1a 	bl	80010c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_InitTick+0xe0>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e002      	b.n	8000ca2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3730      	adds	r7, #48	; 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	20000384 	.word	0x20000384
 8000cbc:	40014400 	.word	0x40014400
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cf6:	f001 f965 	bl	8001fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000384 	.word	0x20000384

08000d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d0c:	f000 fbbc 	bl	8001488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e00a      	b.n	8000d3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d26:	f7ff fe71 	bl	8000a0c <__io_getchar>
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	60ba      	str	r2, [r7, #8]
 8000d32:	b2ca      	uxtb	r2, r1
 8000d34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dbf0      	blt.n	8000d26 <_read+0x12>
  }

  return len;
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	e009      	b.n	8000d74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fe65 	bl	8000a38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf1      	blt.n	8000d60 <_write+0x12>
  }
  return len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_close>:

int _close(int file)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dae:	605a      	str	r2, [r3, #4]
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_isatty>:

int _isatty(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f004 fdb8 	bl	8005994 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20020000 	.word	0x20020000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	200003cc 	.word	0x200003cc
 8000e58:	20004278 	.word	0x20004278

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e84:	f7ff ffea 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	; (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	; (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eae:	f004 fd77 	bl	80059a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb8d 	bl	80005d0 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ec4:	08006928 	.word	0x08006928
  ldr r2, =_sbss
 8000ec8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ecc:	20004274 	.word	0x20004274

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f8d8 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f7ff fe6c 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fdf6 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	200003d0 	.word	0x200003d0

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200003d0 	.word	0x200003d0

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff4c 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010da:	f7ff ff61 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	6978      	ldr	r0, [r7, #20]
 80010e6:	f7ff ffb1 	bl	800104c <NVIC_EncodePriority>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff80 	bl	8000ff8 <__NVIC_SetPriority>
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff54 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e159      	b.n	80013ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8148 	bne.w	80013e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	2b02      	cmp	r3, #2
 800116c:	d130      	bne.n	80011d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a2 	beq.w	80013e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a56      	ldr	r2, [pc, #344]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012be:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x2ec>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a49      	ldr	r2, [pc, #292]	; (800140c <HAL_GPIO_Init+0x2f0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x202>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_GPIO_Init+0x2f4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x1fe>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a47      	ldr	r2, [pc, #284]	; (8001414 <HAL_GPIO_Init+0x2f8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x1fa>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_GPIO_Init+0x2fc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x1f6>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_GPIO_Init+0x300>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x1f2>
 800130a:	2304      	movs	r3, #4
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800130e:	2307      	movs	r3, #7
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x204>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x204>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800131e:	2300      	movs	r3, #0
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <HAL_GPIO_Init+0x2ec>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_GPIO_Init+0x304>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a24      	ldr	r2, [pc, #144]	; (8001420 <HAL_GPIO_Init+0x304>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b6:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3301      	adds	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	f67f aea2 	bls.w	8001138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40013800 	.word	0x40013800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40021000 	.word	0x40021000
 8001420:	40013c00 	.word	0x40013c00

08001424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e001      	b.n	8001446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f882 	bl	80005b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013c00 	.word	0x40013c00

080014b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e267      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d075      	beq.n	80015c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d00c      	beq.n	80014fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	4b85      	ldr	r3, [pc, #532]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d112      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fa:	d10b      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d05b      	beq.n	80015c0 <HAL_RCC_OscConfig+0x108>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d157      	bne.n	80015c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e242      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d106      	bne.n	800152c <HAL_RCC_OscConfig+0x74>
 800151e:	4b76      	ldr	r3, [pc, #472]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a75      	ldr	r2, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e01d      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x98>
 8001536:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6f      	ldr	r2, [pc, #444]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b6d      	ldr	r3, [pc, #436]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6c      	ldr	r2, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a68      	ldr	r2, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fce6 	bl	8000f40 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fce2 	bl	8000f40 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e207      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xc0>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fcd2 	bl	8000f40 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fcce 	bl	8000f40 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1f3      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0xe8>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d063      	beq.n	8001696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ce:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d11c      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1c7      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4937      	ldr	r1, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	e03a      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x244>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fc87 	bl	8000f40 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fc83 	bl	8000f40 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1a8      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4925      	ldr	r1, [pc, #148]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_OscConfig+0x244>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc66 	bl	8000f40 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fc62 	bl	8000f40 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e187      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d036      	beq.n	8001710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d016      	beq.n	80016d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_RCC_OscConfig+0x248>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fc46 	bl	8000f40 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc42 	bl	8000f40 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e167      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80016cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x200>
 80016d6:	e01b      	b.n	8001710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_OscConfig+0x248>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fc2f 	bl	8000f40 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	e00e      	b.n	8001704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fc2b 	bl	8000f40 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d907      	bls.n	8001704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e150      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	42470000 	.word	0x42470000
 8001700:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ea      	bne.n	80016e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8097 	beq.w	800184c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b81      	ldr	r3, [pc, #516]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a7c      	ldr	r2, [pc, #496]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b7a      	ldr	r3, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b77      	ldr	r3, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b74      	ldr	r3, [pc, #464]	; (800192c <HAL_RCC_OscConfig+0x474>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a73      	ldr	r2, [pc, #460]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fbeb 	bl	8000f40 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff fbe7 	bl	8000f40 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e10c      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2ea>
 8001794:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a63      	ldr	r2, [pc, #396]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	e01c      	b.n	80017dc <HAL_RCC_OscConfig+0x324>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x30c>
 80017aa:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0x324>
 80017c4:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	4a57      	ldr	r2, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6713      	str	r3, [r2, #112]	; 0x70
 80017d0:	4b55      	ldr	r3, [pc, #340]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d015      	beq.n	8001810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff fbac 	bl	8000f40 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ec:	f7ff fba8 	bl	8000f40 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0cb      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001802:	4b49      	ldr	r3, [pc, #292]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0ee      	beq.n	80017ec <HAL_RCC_OscConfig+0x334>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff fb96 	bl	8000f40 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001816:	e00a      	b.n	800182e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff fb92 	bl	8000f40 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0b5      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1ee      	bne.n	8001818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a38      	ldr	r2, [pc, #224]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a1 	beq.w	8001998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	d05c      	beq.n	800191c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d141      	bne.n	80018ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb66 	bl	8000f40 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fb62 	bl	8000f40 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e087      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	3b01      	subs	r3, #1
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	061b      	lsls	r3, r3, #24
 80018ba:	491b      	ldr	r1, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff fb3b 	bl	8000f40 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff fb37 	bl	8000f40 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e05c      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x416>
 80018ec:	e054      	b.n	8001998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb24 	bl	8000f40 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fb20 	bl	8000f40 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e045      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x444>
 800191a:	e03d      	b.n	8001998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e038      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000
 8001930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_RCC_OscConfig+0x4ec>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d028      	beq.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d121      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d11a      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800196a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800196c:	4293      	cmp	r3, r2
 800196e:	d111      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	3b01      	subs	r3, #1
 800197e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0cc      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d90c      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d044      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e067      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff fa52 	bl	8000f40 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff fa4e 	bl	8000f40 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d20c      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f821 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490a      	ldr	r1, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f846 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	080068cc 	.word	0x080068cc
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b78:	b094      	sub	sp, #80	; 0x50
 8001b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8c:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d00d      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	f200 80e1 	bhi.w	8001d60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba6:	e0db      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bac:	e0db      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bae:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x208>)
 8001bb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb2:	e0d8      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bbc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d063      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
 8001be2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001be6:	4622      	mov	r2, r4
 8001be8:	462b      	mov	r3, r5
 8001bea:	f04f 0000 	mov.w	r0, #0
 8001bee:	f04f 0100 	mov.w	r1, #0
 8001bf2:	0159      	lsls	r1, r3, #5
 8001bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf8:	0150      	lsls	r0, r2, #5
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4621      	mov	r1, r4
 8001c00:	1a51      	subs	r1, r2, r1
 8001c02:	6139      	str	r1, [r7, #16]
 8001c04:	4629      	mov	r1, r5
 8001c06:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c18:	4659      	mov	r1, fp
 8001c1a:	018b      	lsls	r3, r1, #6
 8001c1c:	4651      	mov	r1, sl
 8001c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c22:	4651      	mov	r1, sl
 8001c24:	018a      	lsls	r2, r1, #6
 8001c26:	4651      	mov	r1, sl
 8001c28:	ebb2 0801 	subs.w	r8, r2, r1
 8001c2c:	4659      	mov	r1, fp
 8001c2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c46:	4690      	mov	r8, r2
 8001c48:	4699      	mov	r9, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	eb18 0303 	adds.w	r3, r8, r3
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	462b      	mov	r3, r5
 8001c54:	eb49 0303 	adc.w	r3, r9, r3
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c66:	4629      	mov	r1, r5
 8001c68:	024b      	lsls	r3, r1, #9
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c70:	4621      	mov	r1, r4
 8001c72:	024a      	lsls	r2, r1, #9
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c84:	f7fe fafc 	bl	8000280 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c90:	e058      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ca2:	623b      	str	r3, [r7, #32]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cac:	4642      	mov	r2, r8
 8001cae:	464b      	mov	r3, r9
 8001cb0:	f04f 0000 	mov.w	r0, #0
 8001cb4:	f04f 0100 	mov.w	r1, #0
 8001cb8:	0159      	lsls	r1, r3, #5
 8001cba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cbe:	0150      	lsls	r0, r2, #5
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4641      	mov	r1, r8
 8001cc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cca:	4649      	mov	r1, r9
 8001ccc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ce0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	00eb      	lsls	r3, r5, #3
 8001cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfa:	00e2      	lsls	r2, r4, #3
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	461d      	mov	r5, r3
 8001d00:	4643      	mov	r3, r8
 8001d02:	18e3      	adds	r3, r4, r3
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	464b      	mov	r3, r9
 8001d08:	eb45 0303 	adc.w	r3, r5, r3
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	028b      	lsls	r3, r1, #10
 8001d1e:	4621      	mov	r1, r4
 8001d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d24:	4621      	mov	r1, r4
 8001d26:	028a      	lsls	r2, r1, #10
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	61fa      	str	r2, [r7, #28]
 8001d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d38:	f7fe faa2 	bl	8000280 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5e:	e002      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3750      	adds	r7, #80	; 0x50
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	007a1200 	.word	0x007a1200

08001d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d9c:	f7ff fff0 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0a9b      	lsrs	r3, r3, #10
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4903      	ldr	r1, [pc, #12]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	080068dc 	.word	0x080068dc

08001dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc4:	f7ff ffdc 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0b5b      	lsrs	r3, r3, #13
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4903      	ldr	r1, [pc, #12]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	080068dc 	.word	0x080068dc

08001de8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	220f      	movs	r2, #15
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_RCC_GetClockConfig+0x60>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0207 	and.w	r2, r3, #7
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e041      	b.n	8001ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f839 	bl	8001eea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f000 f9b2 	bl	80021f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d001      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e044      	b.n	8001fa2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d018      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x6c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f42:	d013      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x6c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00e      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x6c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x6c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_TIM_Base_Start_IT+0xbc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x6c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d111      	bne.n	8001f90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d010      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8e:	e007      	b.n	8001fa0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40000c00 	.word	0x40000c00
 8001fc0:	40014000 	.word	0x40014000

08001fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d020      	beq.n	8002028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01b      	beq.n	8002028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0202 	mvn.w	r2, #2
 8001ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8d2 	bl	80021b8 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8c4 	bl	80021a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f8d5 	bl	80021cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d020      	beq.n	8002074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01b      	beq.n	8002074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0204 	mvn.w	r2, #4
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8ac 	bl	80021b8 <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f89e 	bl	80021a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f8af 	bl	80021cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d020      	beq.n	80020c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01b      	beq.n	80020c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0208 	mvn.w	r2, #8
 8002090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2204      	movs	r2, #4
 8002096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f886 	bl	80021b8 <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f878 	bl	80021a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f889 	bl	80021cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d020      	beq.n	800210c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0210 	mvn.w	r2, #16
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2208      	movs	r2, #8
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f860 	bl	80021b8 <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f852 	bl	80021a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f863 	bl	80021cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0201 	mvn.w	r2, #1
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fc56 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00c      	beq.n	8002154 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8e6 	bl	8002320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f834 	bl	80021e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0220 	mvn.w	r2, #32
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8b8 	bl	800230c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3a      	ldr	r2, [pc, #232]	; (80022f0 <TIM_Base_SetConfig+0xfc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00f      	beq.n	800222c <TIM_Base_SetConfig+0x38>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002212:	d00b      	beq.n	800222c <TIM_Base_SetConfig+0x38>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a37      	ldr	r2, [pc, #220]	; (80022f4 <TIM_Base_SetConfig+0x100>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d007      	beq.n	800222c <TIM_Base_SetConfig+0x38>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a36      	ldr	r2, [pc, #216]	; (80022f8 <TIM_Base_SetConfig+0x104>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_Base_SetConfig+0x38>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a35      	ldr	r2, [pc, #212]	; (80022fc <TIM_Base_SetConfig+0x108>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d108      	bne.n	800223e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <TIM_Base_SetConfig+0xfc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01b      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224c:	d017      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <TIM_Base_SetConfig+0x100>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <TIM_Base_SetConfig+0x104>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00f      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a26      	ldr	r2, [pc, #152]	; (80022fc <TIM_Base_SetConfig+0x108>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00b      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a25      	ldr	r2, [pc, #148]	; (8002300 <TIM_Base_SetConfig+0x10c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <TIM_Base_SetConfig+0x110>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a23      	ldr	r2, [pc, #140]	; (8002308 <TIM_Base_SetConfig+0x114>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d108      	bne.n	8002290 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <TIM_Base_SetConfig+0xfc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d105      	bne.n	80022e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f023 0201 	bic.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]
  }
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40000800 	.word	0x40000800
 80022fc:	40000c00 	.word	0x40000c00
 8002300:	40014000 	.word	0x40014000
 8002304:	40014400 	.word	0x40014400
 8002308:	40014800 	.word	0x40014800

0800230c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e042      	b.n	80023cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fbf8 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fa09 	bl	8002790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800238c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800239c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d175      	bne.n	80024e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_UART_Transmit+0x2c>
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e06e      	b.n	80024e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2221      	movs	r2, #33	; 0x21
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002412:	f7fe fd95 	bl	8000f40 <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242c:	d108      	bne.n	8002440 <HAL_UART_Transmit+0x6c>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e003      	b.n	8002448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002448:	e02e      	b.n	80024a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f8df 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e03a      	b.n	80024e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	3302      	adds	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e007      	b.n	800249a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	3301      	adds	r3, #1
 8002498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1cb      	bne.n	800244a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f8ab 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e006      	b.n	80024e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e000      	b.n	80024e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024e0:	2302      	movs	r3, #2
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b08a      	sub	sp, #40	; 0x28
 80024ee:	af02      	add	r7, sp, #8
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 8081 	bne.w	800260e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_UART_Receive+0x2e>
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e079      	b.n	8002610 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2222      	movs	r2, #34	; 0x22
 8002526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002530:	f7fe fd06 	bl	8000f40 <HAL_GetTick>
 8002534:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254a:	d108      	bne.n	800255e <HAL_UART_Receive+0x74>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e003      	b.n	8002566 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002566:	e047      	b.n	80025f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	2120      	movs	r1, #32
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f850 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e042      	b.n	8002610 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10c      	bne.n	80025aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259c:	b29a      	uxth	r2, r3
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	3302      	adds	r3, #2
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	e01f      	b.n	80025ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b2:	d007      	beq.n	80025c4 <HAL_UART_Receive+0xda>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <HAL_UART_Receive+0xe8>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d106      	bne.n	80025d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e008      	b.n	80025e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1b2      	bne.n	8002568 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002628:	e03b      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d037      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7fe fc85 	bl	8000f40 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	6a3a      	ldr	r2, [r7, #32]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <UART_WaitOnFlagUntilTimeout+0x30>
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e03a      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d023      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d020      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d01d      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b08      	cmp	r3, #8
 8002672:	d116      	bne.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f81d 	bl	80026ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2208      	movs	r2, #8
 8002694:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d0b4      	beq.n	800262a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b095      	sub	sp, #84	; 0x54
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	330c      	adds	r3, #12
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	e853 3f00 	ldrex	r3, [r3]
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026f2:	643a      	str	r2, [r7, #64]	; 0x40
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e5      	bne.n	80026d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3314      	adds	r3, #20
 800270c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	61fb      	str	r3, [r7, #28]
   return(result);
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	64bb      	str	r3, [r7, #72]	; 0x48
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3314      	adds	r3, #20
 8002724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800272c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272e:	e841 2300 	strex	r3, r2, [r1]
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e5      	bne.n	8002706 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	2b01      	cmp	r3, #1
 8002740:	d119      	bne.n	8002776 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	330c      	adds	r3, #12
 8002748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	60bb      	str	r3, [r7, #8]
   return(result);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f023 0310 	bic.w	r3, r3, #16
 8002758:	647b      	str	r3, [r7, #68]	; 0x44
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	330c      	adds	r3, #12
 8002760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002762:	61ba      	str	r2, [r7, #24]
 8002764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002766:	6979      	ldr	r1, [r7, #20]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	e841 2300 	strex	r3, r2, [r1]
 800276e:	613b      	str	r3, [r7, #16]
   return(result);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e5      	bne.n	8002742 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002784:	bf00      	nop
 8002786:	3754      	adds	r7, #84	; 0x54
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002794:	b0c0      	sub	sp, #256	; 0x100
 8002796:	af00      	add	r7, sp, #0
 8002798:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ac:	68d9      	ldr	r1, [r3, #12]
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	ea40 0301 	orr.w	r3, r0, r1
 80027b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027e8:	f021 010c 	bic.w	r1, r1, #12
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027f6:	430b      	orrs	r3, r1
 80027f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	6999      	ldr	r1, [r3, #24]
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	ea40 0301 	orr.w	r3, r0, r1
 8002816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b8f      	ldr	r3, [pc, #572]	; (8002a5c <UART_SetConfig+0x2cc>)
 8002820:	429a      	cmp	r2, r3
 8002822:	d005      	beq.n	8002830 <UART_SetConfig+0xa0>
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b8d      	ldr	r3, [pc, #564]	; (8002a60 <UART_SetConfig+0x2d0>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d104      	bne.n	800283a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002830:	f7ff fac6 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 8002834:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002838:	e003      	b.n	8002842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800283a:	f7ff faad 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 800283e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284c:	f040 810c 	bne.w	8002a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002854:	2200      	movs	r2, #0
 8002856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800285a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800285e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002862:	4622      	mov	r2, r4
 8002864:	462b      	mov	r3, r5
 8002866:	1891      	adds	r1, r2, r2
 8002868:	65b9      	str	r1, [r7, #88]	; 0x58
 800286a:	415b      	adcs	r3, r3
 800286c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800286e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002872:	4621      	mov	r1, r4
 8002874:	eb12 0801 	adds.w	r8, r2, r1
 8002878:	4629      	mov	r1, r5
 800287a:	eb43 0901 	adc.w	r9, r3, r1
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800288a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800288e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002892:	4690      	mov	r8, r2
 8002894:	4699      	mov	r9, r3
 8002896:	4623      	mov	r3, r4
 8002898:	eb18 0303 	adds.w	r3, r8, r3
 800289c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028a0:	462b      	mov	r3, r5
 80028a2:	eb49 0303 	adc.w	r3, r9, r3
 80028a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028be:	460b      	mov	r3, r1
 80028c0:	18db      	adds	r3, r3, r3
 80028c2:	653b      	str	r3, [r7, #80]	; 0x50
 80028c4:	4613      	mov	r3, r2
 80028c6:	eb42 0303 	adc.w	r3, r2, r3
 80028ca:	657b      	str	r3, [r7, #84]	; 0x54
 80028cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028d4:	f7fd fcd4 	bl	8000280 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <UART_SetConfig+0x2d4>)
 80028de:	fba3 2302 	umull	r2, r3, r3, r2
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	011c      	lsls	r4, r3, #4
 80028e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028f8:	4642      	mov	r2, r8
 80028fa:	464b      	mov	r3, r9
 80028fc:	1891      	adds	r1, r2, r2
 80028fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002900:	415b      	adcs	r3, r3
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002908:	4641      	mov	r1, r8
 800290a:	eb12 0a01 	adds.w	sl, r2, r1
 800290e:	4649      	mov	r1, r9
 8002910:	eb43 0b01 	adc.w	fp, r3, r1
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002928:	4692      	mov	sl, r2
 800292a:	469b      	mov	fp, r3
 800292c:	4643      	mov	r3, r8
 800292e:	eb1a 0303 	adds.w	r3, sl, r3
 8002932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002936:	464b      	mov	r3, r9
 8002938:	eb4b 0303 	adc.w	r3, fp, r3
 800293c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800294c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002954:	460b      	mov	r3, r1
 8002956:	18db      	adds	r3, r3, r3
 8002958:	643b      	str	r3, [r7, #64]	; 0x40
 800295a:	4613      	mov	r3, r2
 800295c:	eb42 0303 	adc.w	r3, r2, r3
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
 8002962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800296a:	f7fd fc89 	bl	8000280 <__aeabi_uldivmod>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4611      	mov	r1, r2
 8002974:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <UART_SetConfig+0x2d4>)
 8002976:	fba3 2301 	umull	r2, r3, r3, r1
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2264      	movs	r2, #100	; 0x64
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	1acb      	subs	r3, r1, r3
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800298a:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <UART_SetConfig+0x2d4>)
 800298c:	fba3 2302 	umull	r2, r3, r3, r2
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002998:	441c      	add	r4, r3
 800299a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029ac:	4642      	mov	r2, r8
 80029ae:	464b      	mov	r3, r9
 80029b0:	1891      	adds	r1, r2, r2
 80029b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80029b4:	415b      	adcs	r3, r3
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029bc:	4641      	mov	r1, r8
 80029be:	1851      	adds	r1, r2, r1
 80029c0:	6339      	str	r1, [r7, #48]	; 0x30
 80029c2:	4649      	mov	r1, r9
 80029c4:	414b      	adcs	r3, r1
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029d4:	4659      	mov	r1, fp
 80029d6:	00cb      	lsls	r3, r1, #3
 80029d8:	4651      	mov	r1, sl
 80029da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029de:	4651      	mov	r1, sl
 80029e0:	00ca      	lsls	r2, r1, #3
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	4642      	mov	r2, r8
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029f0:	464b      	mov	r3, r9
 80029f2:	460a      	mov	r2, r1
 80029f4:	eb42 0303 	adc.w	r3, r2, r3
 80029f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a10:	460b      	mov	r3, r1
 8002a12:	18db      	adds	r3, r3, r3
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a16:	4613      	mov	r3, r2
 8002a18:	eb42 0303 	adc.w	r3, r2, r3
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a26:	f7fd fc2b 	bl	8000280 <__aeabi_uldivmod>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <UART_SetConfig+0x2d4>)
 8002a30:	fba3 1302 	umull	r1, r3, r3, r2
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	2164      	movs	r1, #100	; 0x64
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	3332      	adds	r3, #50	; 0x32
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <UART_SetConfig+0x2d4>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	f003 0207 	and.w	r2, r3, #7
 8002a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4422      	add	r2, r4
 8002a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a58:	e106      	b.n	8002c68 <UART_SetConfig+0x4d8>
 8002a5a:	bf00      	nop
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40011400 	.word	0x40011400
 8002a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a7a:	4642      	mov	r2, r8
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	1891      	adds	r1, r2, r2
 8002a80:	6239      	str	r1, [r7, #32]
 8002a82:	415b      	adcs	r3, r3
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a8a:	4641      	mov	r1, r8
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4649      	mov	r1, r9
 8002a90:	eb43 0501 	adc.w	r5, r3, r1
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	00eb      	lsls	r3, r5, #3
 8002a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aa2:	00e2      	lsls	r2, r4, #3
 8002aa4:	4614      	mov	r4, r2
 8002aa6:	461d      	mov	r5, r3
 8002aa8:	4643      	mov	r3, r8
 8002aaa:	18e3      	adds	r3, r4, r3
 8002aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ab0:	464b      	mov	r3, r9
 8002ab2:	eb45 0303 	adc.w	r3, r5, r3
 8002ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	008b      	lsls	r3, r1, #2
 8002ada:	4621      	mov	r1, r4
 8002adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	008a      	lsls	r2, r1, #2
 8002ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ae8:	f7fd fbca 	bl	8000280 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4b60      	ldr	r3, [pc, #384]	; (8002c74 <UART_SetConfig+0x4e4>)
 8002af2:	fba3 2302 	umull	r2, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	011c      	lsls	r4, r3, #4
 8002afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	1891      	adds	r1, r2, r2
 8002b12:	61b9      	str	r1, [r7, #24]
 8002b14:	415b      	adcs	r3, r3
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	1851      	adds	r1, r2, r1
 8002b20:	6139      	str	r1, [r7, #16]
 8002b22:	4649      	mov	r1, r9
 8002b24:	414b      	adcs	r3, r1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b34:	4659      	mov	r1, fp
 8002b36:	00cb      	lsls	r3, r1, #3
 8002b38:	4651      	mov	r1, sl
 8002b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b3e:	4651      	mov	r1, sl
 8002b40:	00ca      	lsls	r2, r1, #3
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	4642      	mov	r2, r8
 8002b4a:	189b      	adds	r3, r3, r2
 8002b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b50:	464b      	mov	r3, r9
 8002b52:	460a      	mov	r2, r1
 8002b54:	eb42 0303 	adc.w	r3, r2, r3
 8002b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b74:	4649      	mov	r1, r9
 8002b76:	008b      	lsls	r3, r1, #2
 8002b78:	4641      	mov	r1, r8
 8002b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b7e:	4641      	mov	r1, r8
 8002b80:	008a      	lsls	r2, r1, #2
 8002b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b86:	f7fd fb7b 	bl	8000280 <__aeabi_uldivmod>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <UART_SetConfig+0x4e4>)
 8002b92:	fba3 2301 	umull	r2, r3, r3, r1
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2264      	movs	r2, #100	; 0x64
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	1acb      	subs	r3, r1, r3
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	4a33      	ldr	r2, [pc, #204]	; (8002c74 <UART_SetConfig+0x4e4>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb0:	441c      	add	r4, r3
 8002bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	673b      	str	r3, [r7, #112]	; 0x70
 8002bba:	677a      	str	r2, [r7, #116]	; 0x74
 8002bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	1891      	adds	r1, r2, r2
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	415b      	adcs	r3, r3
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	1851      	adds	r1, r2, r1
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	414b      	adcs	r3, r1
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002be8:	4659      	mov	r1, fp
 8002bea:	00cb      	lsls	r3, r1, #3
 8002bec:	4651      	mov	r1, sl
 8002bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	00ca      	lsls	r2, r1, #3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	189b      	adds	r3, r3, r2
 8002c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c02:	464b      	mov	r3, r9
 8002c04:	460a      	mov	r2, r1
 8002c06:	eb42 0303 	adc.w	r3, r2, r3
 8002c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	663b      	str	r3, [r7, #96]	; 0x60
 8002c16:	667a      	str	r2, [r7, #100]	; 0x64
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c24:	4649      	mov	r1, r9
 8002c26:	008b      	lsls	r3, r1, #2
 8002c28:	4641      	mov	r1, r8
 8002c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c2e:	4641      	mov	r1, r8
 8002c30:	008a      	lsls	r2, r1, #2
 8002c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c36:	f7fd fb23 	bl	8000280 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <UART_SetConfig+0x4e4>)
 8002c40:	fba3 1302 	umull	r1, r3, r3, r2
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	2164      	movs	r1, #100	; 0x64
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	3332      	adds	r3, #50	; 0x32
 8002c52:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <UART_SetConfig+0x4e4>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4422      	add	r2, r4
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c74:	51eb851f 	.word	0x51eb851f

08002c78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8a:	2b84      	cmp	r3, #132	; 0x84
 8002c8c:	d005      	beq.n	8002c9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002c8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	3303      	adds	r3, #3
 8002c98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cae:	f3ef 8305 	mrs	r3, IPSR
 8002cb2:	607b      	str	r3, [r7, #4]
  return(result);
 8002cb4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002cd0:	f001 f926 	bl	8003f20 <vTaskStartScheduler>
  
  return osOK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cdc:	b089      	sub	sp, #36	; 0x24
 8002cde:	af04      	add	r7, sp, #16
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <osThreadCreate+0x54>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01c      	beq.n	8002d2e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685c      	ldr	r4, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691e      	ldr	r6, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ffb6 	bl	8002c78 <makeFreeRtosPriority>
 8002d0c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d16:	9202      	str	r2, [sp, #8]
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	9100      	str	r1, [sp, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4632      	mov	r2, r6
 8002d20:	4629      	mov	r1, r5
 8002d22:	4620      	mov	r0, r4
 8002d24:	f000 ff1e 	bl	8003b64 <xTaskCreateStatic>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	e01c      	b.n	8002d68 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685c      	ldr	r4, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d3a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ff98 	bl	8002c78 <makeFreeRtosPriority>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	9200      	str	r2, [sp, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4632      	mov	r2, r6
 8002d56:	4629      	mov	r1, r5
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f000 ff60 	bl	8003c1e <xTaskCreate>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d72 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <osDelay+0x16>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	e000      	b.n	8002d8a <osDelay+0x18>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f894 	bl	8003eb8 <vTaskDelay>
  
  return osOK;
 8002d90:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af02      	add	r7, sp, #8
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00f      	beq.n	8002dcc <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10a      	bne.n	8002dc8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2203      	movs	r2, #3
 8002db8:	9200      	str	r2, [sp, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f000 f9be 	bl	8003140 <xQueueGenericCreateStatic>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	e016      	b.n	8002df6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e014      	b.n	8002df6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d110      	bne.n	8002df4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f000 fa2a 	bl	8003230 <xQueueGenericCreate>
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <osSemaphoreCreate+0x56>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fa7a 	bl	80032e4 <xQueueGenericSend>
      return sema;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	e000      	b.n	8002df6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002df4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	e03a      	b.n	8002e8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d103      	bne.n	8002e2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e009      	b.n	8002e40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <osSemaphoreWait+0x40>
      ticks = 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002e40:	f7ff ff32 	bl	8002ca8 <inHandlerMode>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d017      	beq.n	8002e7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2100      	movs	r1, #0
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fcde 	bl	8003814 <xQueueReceiveFromISR>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002e5e:	23ff      	movs	r3, #255	; 0xff
 8002e60:	e015      	b.n	8002e8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d011      	beq.n	8002e8c <osSemaphoreWait+0x8c>
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <osSemaphoreWait+0x98>)
 8002e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	e008      	b.n	8002e8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002e7a:	68f9      	ldr	r1, [r7, #12]
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fbbd 	bl	80035fc <xQueueSemaphoreTake>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d001      	beq.n	8002e8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002e88:	23ff      	movs	r3, #255	; 0xff
 8002e8a:	e000      	b.n	8002e8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002eac:	f7ff fefc 	bl	8002ca8 <inHandlerMode>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fb0f 	bl	80034e0 <xQueueGiveFromISR>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d001      	beq.n	8002ecc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002ec8:	23ff      	movs	r3, #255	; 0xff
 8002eca:	e017      	b.n	8002efc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d013      	beq.n	8002efa <osSemaphoreRelease+0x5e>
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <osSemaphoreRelease+0x68>)
 8002ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	e00a      	b.n	8002efa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9fa 	bl	80032e4 <xQueueGenericSend>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002ef6:	23ff      	movs	r3, #255	; 0xff
 8002ef8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f103 0208 	add.w	r2, r3, #8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f103 0208 	add.w	r2, r3, #8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f103 0208 	add.w	r2, r3, #8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d103      	bne.n	8002fca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e00c      	b.n	8002fe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3308      	adds	r3, #8
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e002      	b.n	8002fd8 <vListInsert+0x2e>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d2f6      	bcs.n	8002fd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	601a      	str	r2, [r3, #0]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6892      	ldr	r2, [r2, #8]
 8003032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6852      	ldr	r2, [r2, #4]
 800303c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d103      	bne.n	8003050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	1e5a      	subs	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800309a:	f001 fea3 	bl	8004de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	441a      	add	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	3b01      	subs	r3, #1
 80030cc:	68f9      	ldr	r1, [r7, #12]
 80030ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	441a      	add	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	22ff      	movs	r2, #255	; 0xff
 80030de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	22ff      	movs	r2, #255	; 0xff
 80030e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d114      	bne.n	800311a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01a      	beq.n	800312e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3310      	adds	r3, #16
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 f961 	bl	80043c4 <xTaskRemoveFromEventList>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d012      	beq.n	800312e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <xQueueGenericReset+0xcc>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	e009      	b.n	800312e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3310      	adds	r3, #16
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fef2 	bl	8002f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3324      	adds	r3, #36	; 0x24
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff feed 	bl	8002f08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800312e:	f001 fe89 	bl	8004e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08e      	sub	sp, #56	; 0x38
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003166:	bf00      	nop
 8003168:	e7fe      	b.n	8003168 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <xQueueGenericCreateStatic+0x52>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <xQueueGenericCreateStatic+0x56>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <xQueueGenericCreateStatic+0x58>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	623b      	str	r3, [r7, #32]
}
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <xQueueGenericCreateStatic+0x7e>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <xQueueGenericCreateStatic+0x82>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <xQueueGenericCreateStatic+0x84>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	61fb      	str	r3, [r7, #28]
}
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031de:	2348      	movs	r3, #72	; 0x48
 80031e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b48      	cmp	r3, #72	; 0x48
 80031e6:	d00a      	beq.n	80031fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	61bb      	str	r3, [r7, #24]
}
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003212:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f83f 	bl	80032a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003228:	4618      	mov	r0, r3
 800322a:	3730      	adds	r7, #48	; 0x30
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	613b      	str	r3, [r7, #16]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3348      	adds	r3, #72	; 0x48
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fedd 	bl	8005028 <pvPortMalloc>
 800326e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d011      	beq.n	800329a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3348      	adds	r3, #72	; 0x48
 800327e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003288:	79fa      	ldrb	r2, [r7, #7]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f805 	bl	80032a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800329a:	69bb      	ldr	r3, [r7, #24]
	}
 800329c:	4618      	mov	r0, r3
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e002      	b.n	80032c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032d2:	2101      	movs	r1, #1
 80032d4:	69b8      	ldr	r0, [r7, #24]
 80032d6:	f7ff fecb 	bl	8003070 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	; 0x38
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032f2:	2300      	movs	r3, #0
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <xQueueGenericSend+0x32>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <xQueueGenericSend+0x40>
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <xQueueGenericSend+0x44>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <xQueueGenericSend+0x46>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <xQueueGenericSend+0x60>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003340:	bf00      	nop
 8003342:	e7fe      	b.n	8003342 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d103      	bne.n	8003352 <xQueueGenericSend+0x6e>
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <xQueueGenericSend+0x72>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <xQueueGenericSend+0x74>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <xQueueGenericSend+0x8e>
	__asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	623b      	str	r3, [r7, #32]
}
 800336e:	bf00      	nop
 8003370:	e7fe      	b.n	8003370 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003372:	f001 f9e7 	bl	8004744 <xTaskGetSchedulerState>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <xQueueGenericSend+0x9e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <xQueueGenericSend+0xa2>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <xQueueGenericSend+0xa4>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	61fb      	str	r3, [r7, #28]
}
 800339e:	bf00      	nop
 80033a0:	e7fe      	b.n	80033a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033a2:	f001 fd1f 	bl	8004de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <xQueueGenericSend+0xd4>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d129      	bne.n	800340c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033be:	f000 fac1 	bl	8003944 <prvCopyDataToQueue>
 80033c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	3324      	adds	r3, #36	; 0x24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fff7 	bl	80043c4 <xTaskRemoveFromEventList>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033dc:	4b3f      	ldr	r3, [pc, #252]	; (80034dc <xQueueGenericSend+0x1f8>)
 80033de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	e00a      	b.n	8003404 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <xQueueGenericSend+0x1f8>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003404:	f001 fd1e 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 8003408:	2301      	movs	r3, #1
 800340a:	e063      	b.n	80034d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003412:	f001 fd17 	bl	8004e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003416:	2300      	movs	r3, #0
 8003418:	e05c      	b.n	80034d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	4618      	mov	r0, r3
 8003426:	f001 f82f 	bl	8004488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800342a:	2301      	movs	r3, #1
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800342e:	f001 fd09 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003432:	f000 fddf 	bl	8003ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003436:	f001 fcd5 	bl	8004de4 <vPortEnterCritical>
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003440:	b25b      	sxtb	r3, r3
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d103      	bne.n	8003450 <xQueueGenericSend+0x16c>
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003456:	b25b      	sxtb	r3, r3
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d103      	bne.n	8003466 <xQueueGenericSend+0x182>
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003466:	f001 fced 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800346a:	1d3a      	adds	r2, r7, #4
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f001 f81e 	bl	80044b4 <xTaskCheckForTimeOut>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d124      	bne.n	80034c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800347e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003480:	f000 fb58 	bl	8003b34 <prvIsQueueFull>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d018      	beq.n	80034bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	3310      	adds	r3, #16
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 ff72 	bl	800437c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800349a:	f000 fae3 	bl	8003a64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800349e:	f000 fdb7 	bl	8004010 <xTaskResumeAll>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f47f af7c 	bne.w	80033a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80034aa:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <xQueueGenericSend+0x1f8>)
 80034ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	e772      	b.n	80033a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034be:	f000 fad1 	bl	8003a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034c2:	f000 fda5 	bl	8004010 <xTaskResumeAll>
 80034c6:	e76c      	b.n	80033a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ca:	f000 facb 	bl	8003a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034ce:	f000 fd9f 	bl	8004010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3738      	adds	r7, #56	; 0x38
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	; 0x38
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xQueueGiveFromISR+0x2a>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	623b      	str	r3, [r7, #32]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	61fb      	str	r3, [r7, #28]
}
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <xQueueGiveFromISR+0x58>
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <xQueueGiveFromISR+0x5c>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <xQueueGiveFromISR+0x5e>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	61bb      	str	r3, [r7, #24]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003558:	f001 fd26 	bl	8004fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800355c:	f3ef 8211 	mrs	r2, BASEPRI
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	617a      	str	r2, [r7, #20]
 8003572:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003574:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003584:	429a      	cmp	r2, r3
 8003586:	d22b      	bcs.n	80035e0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800359a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a2:	d112      	bne.n	80035ca <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d016      	beq.n	80035da <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	3324      	adds	r3, #36	; 0x24
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 ff07 	bl	80043c4 <xTaskRemoveFromEventList>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e007      	b.n	80035da <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ce:	3301      	adds	r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	b25a      	sxtb	r2, r3
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80035da:	2301      	movs	r3, #1
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
 80035de:	e001      	b.n	80035e4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3738      	adds	r7, #56	; 0x38
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	; 0x38
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003606:	2300      	movs	r3, #0
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800360e:	2300      	movs	r3, #0
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	623b      	str	r3, [r7, #32]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	61fb      	str	r3, [r7, #28]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800364c:	f001 f87a 	bl	8004744 <xTaskGetSchedulerState>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <xQueueSemaphoreTake+0x60>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <xQueueSemaphoreTake+0x64>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <xQueueSemaphoreTake+0x66>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	61bb      	str	r3, [r7, #24]
}
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800367c:	f001 fbb2 	bl	8004de4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d024      	beq.n	80036d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800369c:	f001 f9fa 	bl	8004a94 <pvTaskIncrementMutexHeldCount>
 80036a0:	4602      	mov	r2, r0
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00f      	beq.n	80036ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	3310      	adds	r3, #16
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fe86 	bl	80043c4 <xTaskRemoveFromEventList>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036be:	4b54      	ldr	r3, [pc, #336]	; (8003810 <xQueueSemaphoreTake+0x214>)
 80036c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036ce:	f001 fbb9 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e097      	b.n	8003806 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d111      	bne.n	8003700 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	617b      	str	r3, [r7, #20]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80036f8:	f001 fba4 	bl	8004e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e082      	b.n	8003806 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003706:	f107 030c 	add.w	r3, r7, #12
 800370a:	4618      	mov	r0, r3
 800370c:	f000 febc 	bl	8004488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003714:	f001 fb96 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003718:	f000 fc6c 	bl	8003ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800371c:	f001 fb62 	bl	8004de4 <vPortEnterCritical>
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003726:	b25b      	sxtb	r3, r3
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d103      	bne.n	8003736 <xQueueSemaphoreTake+0x13a>
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800373c:	b25b      	sxtb	r3, r3
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d103      	bne.n	800374c <xQueueSemaphoreTake+0x150>
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800374c:	f001 fb7a 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003750:	463a      	mov	r2, r7
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 feab 	bl	80044b4 <xTaskCheckForTimeOut>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d132      	bne.n	80037ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003766:	f000 f9cf 	bl	8003b08 <prvIsQueueEmpty>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d026      	beq.n	80037be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003778:	f001 fb34 	bl	8004de4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fffd 	bl	8004780 <xTaskPriorityInherit>
 8003786:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003788:	f001 fb5c 	bl	8004e44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	3324      	adds	r3, #36	; 0x24
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fdf1 	bl	800437c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800379a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800379c:	f000 f962 	bl	8003a64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037a0:	f000 fc36 	bl	8004010 <xTaskResumeAll>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f47f af68 	bne.w	800367c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <xQueueSemaphoreTake+0x214>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	e75e      	b.n	800367c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80037be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037c0:	f000 f950 	bl	8003a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037c4:	f000 fc24 	bl	8004010 <xTaskResumeAll>
 80037c8:	e758      	b.n	800367c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80037ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037cc:	f000 f94a 	bl	8003a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037d0:	f000 fc1e 	bl	8004010 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037d6:	f000 f997 	bl	8003b08 <prvIsQueueEmpty>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f43f af4d 	beq.w	800367c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80037e8:	f001 fafc 	bl	8004de4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80037ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037ee:	f000 f891 	bl	8003914 <prvGetDisinheritPriorityAfterTimeout>
 80037f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 f8bc 	bl	8004978 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003800:	f001 fb20 	bl	8004e44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003804:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003806:	4618      	mov	r0, r3
 8003808:	3738      	adds	r7, #56	; 0x38
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08e      	sub	sp, #56	; 0x38
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	623b      	str	r3, [r7, #32]
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <xQueueReceiveFromISR+0x3a>
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <xQueueReceiveFromISR+0x3e>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xQueueReceiveFromISR+0x40>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61fb      	str	r3, [r7, #28]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800386e:	f001 fb9b 	bl	8004fa8 <vPortValidateInterruptPriority>
	__asm volatile
 8003872:	f3ef 8211 	mrs	r2, BASEPRI
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	61ba      	str	r2, [r7, #24]
 8003888:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800388a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	d02f      	beq.n	80038fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038a8:	f000 f8b6 	bl	8003a18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	1e5a      	subs	r2, r3, #1
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80038b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d112      	bne.n	80038e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	3310      	adds	r3, #16
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fd7a 	bl	80043c4 <xTaskRemoveFromEventList>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e007      	b.n	80038f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80038e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e8:	3301      	adds	r3, #1
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	b25a      	sxtb	r2, r3
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80038f4:	2301      	movs	r3, #1
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
 80038f8:	e001      	b.n	80038fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f383 8811 	msr	BASEPRI, r3
}
 8003908:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800390c:	4618      	mov	r0, r3
 800390e:	3738      	adds	r7, #56	; 0x38
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1c3 0307 	rsb	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e001      	b.n	8003936 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003936:	68fb      	ldr	r3, [r7, #12]
	}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10d      	bne.n	800397e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d14d      	bne.n	8003a06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 ff7c 	bl	800486c <xTaskPriorityDisinherit>
 8003974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	e043      	b.n	8003a06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d119      	bne.n	80039b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6858      	ldr	r0, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	461a      	mov	r2, r3
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	f002 f82d 	bl	80059ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	441a      	add	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d32b      	bcc.n	8003a06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	e026      	b.n	8003a06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68d8      	ldr	r0, [r3, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	461a      	mov	r2, r3
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	f002 f813 	bl	80059ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	425b      	negs	r3, r3
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d207      	bcs.n	80039f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	425b      	negs	r3, r3
 80039ee:	441a      	add	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d105      	bne.n	8003a06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a0e:	697b      	ldr	r3, [r7, #20]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	441a      	add	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d303      	bcc.n	8003a4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	461a      	mov	r2, r3
 8003a56:	6838      	ldr	r0, [r7, #0]
 8003a58:	f001 ffc9 	bl	80059ee <memcpy>
	}
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a6c:	f001 f9ba 	bl	8004de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a78:	e011      	b.n	8003a9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3324      	adds	r3, #36	; 0x24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fc9c 	bl	80043c4 <xTaskRemoveFromEventList>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a92:	f000 fd71 	bl	8004578 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	dce9      	bgt.n	8003a7a <prvUnlockQueue+0x16>
 8003aa6:	e000      	b.n	8003aaa <prvUnlockQueue+0x46>
					break;
 8003aa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	22ff      	movs	r2, #255	; 0xff
 8003aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ab2:	f001 f9c7 	bl	8004e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ab6:	f001 f995 	bl	8004de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ac2:	e011      	b.n	8003ae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d012      	beq.n	8003af2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3310      	adds	r3, #16
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fc77 	bl	80043c4 <xTaskRemoveFromEventList>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003adc:	f000 fd4c 	bl	8004578 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	dce9      	bgt.n	8003ac4 <prvUnlockQueue+0x60>
 8003af0:	e000      	b.n	8003af4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003af2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003afc:	f001 f9a2 	bl	8004e44 <vPortExitCritical>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b10:	f001 f968 	bl	8004de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e001      	b.n	8003b26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b26:	f001 f98d 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b3c:	f001 f952 	bl	8004de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d102      	bne.n	8003b52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e001      	b.n	8003b56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b56:	f001 f975 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <xTaskCreateStatic+0x46>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	61fb      	str	r3, [r7, #28]
}
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003baa:	23a0      	movs	r3, #160	; 0xa0
 8003bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2ba0      	cmp	r3, #160	; 0xa0
 8003bb2:	d00a      	beq.n	8003bca <xTaskCreateStatic+0x66>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	61bb      	str	r3, [r7, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01e      	beq.n	8003c10 <xTaskCreateStatic+0xac>
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bea:	2300      	movs	r3, #0
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	9302      	str	r3, [sp, #8]
 8003bf2:	f107 0314 	add.w	r3, r7, #20
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f850 	bl	8003ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c0a:	f000 f8eb 	bl	8003de4 <prvAddNewTaskToReadyList>
 8003c0e:	e001      	b.n	8003c14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c14:	697b      	ldr	r3, [r7, #20]
	}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b08c      	sub	sp, #48	; 0x30
 8003c22:	af04      	add	r7, sp, #16
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 f9f8 	bl	8005028 <pvPortMalloc>
 8003c38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c40:	20a0      	movs	r0, #160	; 0xa0
 8003c42:	f001 f9f1 	bl	8005028 <pvPortMalloc>
 8003c46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
 8003c54:	e005      	b.n	8003c62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c56:	6978      	ldr	r0, [r7, #20]
 8003c58:	f001 fab2 	bl	80051c0 <vPortFree>
 8003c5c:	e001      	b.n	8003c62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9303      	str	r3, [sp, #12]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	9302      	str	r3, [sp, #8]
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f80e 	bl	8003ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c8c:	69f8      	ldr	r0, [r7, #28]
 8003c8e:	f000 f8a9 	bl	8003de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	e002      	b.n	8003c9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	617b      	str	r3, [r7, #20]
}
 8003cec:	bf00      	nop
 8003cee:	e7fe      	b.n	8003cee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01f      	beq.n	8003d36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e012      	b.n	8003d22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	7819      	ldrb	r1, [r3, #0]
 8003d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	3334      	adds	r3, #52	; 0x34
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d006      	beq.n	8003d2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d9e9      	bls.n	8003cfc <prvInitialiseNewTask+0x54>
 8003d28:	e000      	b.n	8003d2c <prvInitialiseNewTask+0x84>
			{
				break;
 8003d2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d34:	e003      	b.n	8003d3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d901      	bls.n	8003d48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d44:	2306      	movs	r3, #6
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	2200      	movs	r2, #0
 8003d58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff f8f2 	bl	8002f48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	3318      	adds	r3, #24
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f8ed 	bl	8002f48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	f1c3 0207 	rsb	r2, r3, #7
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	334c      	adds	r3, #76	; 0x4c
 8003d98:	224c      	movs	r2, #76	; 0x4c
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 fd55 	bl	800584c <memset>
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <prvInitialiseNewTask+0x130>)
 8003da6:	651a      	str	r2, [r3, #80]	; 0x50
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <prvInitialiseNewTask+0x134>)
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	4a0b      	ldr	r2, [pc, #44]	; (8003de0 <prvInitialiseNewTask+0x138>)
 8003db2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	69b8      	ldr	r0, [r7, #24]
 8003dba:	f000 fee5 	bl	8004b88 <pxPortInitialiseStack>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dd0:	bf00      	nop
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20004128 	.word	0x20004128
 8003ddc:	20004190 	.word	0x20004190
 8003de0:	200041f8 	.word	0x200041f8

08003de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003dec:	f000 fffa 	bl	8004de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <prvAddNewTaskToReadyList+0xb8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <prvAddNewTaskToReadyList+0xb8>)
 8003df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dfa:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <prvAddNewTaskToReadyList+0xbc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e02:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <prvAddNewTaskToReadyList+0xbc>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <prvAddNewTaskToReadyList+0xb8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d110      	bne.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e10:	f000 fbd6 	bl	80045c0 <prvInitialiseTaskLists>
 8003e14:	e00d      	b.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e16:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <prvAddNewTaskToReadyList+0xc0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <prvAddNewTaskToReadyList+0xbc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d802      	bhi.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <prvAddNewTaskToReadyList+0xbc>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <prvAddNewTaskToReadyList+0xc4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <prvAddNewTaskToReadyList+0xc4>)
 8003e3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	2201      	movs	r2, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <prvAddNewTaskToReadyList+0xc8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <prvAddNewTaskToReadyList+0xc8>)
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4a15      	ldr	r2, [pc, #84]	; (8003eb0 <prvAddNewTaskToReadyList+0xcc>)
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f7ff f87c 	bl	8002f62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e6a:	f000 ffeb 	bl	8004e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <prvAddNewTaskToReadyList+0xc0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00e      	beq.n	8003e94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <prvAddNewTaskToReadyList+0xbc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d207      	bcs.n	8003e94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <prvAddNewTaskToReadyList+0xd0>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	200004d4 	.word	0x200004d4
 8003ea0:	200003d4 	.word	0x200003d4
 8003ea4:	200004e0 	.word	0x200004e0
 8003ea8:	200004f0 	.word	0x200004f0
 8003eac:	200004dc 	.word	0x200004dc
 8003eb0:	200003d8 	.word	0x200003d8
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d017      	beq.n	8003efa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <vTaskDelay+0x60>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <vTaskDelay+0x30>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	60bb      	str	r3, [r7, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	e7fe      	b.n	8003ee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ee8:	f000 f884 	bl	8003ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003eec:	2100      	movs	r1, #0
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fde4 	bl	8004abc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ef4:	f000 f88c 	bl	8004010 <xTaskResumeAll>
 8003ef8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <vTaskDelay+0x64>)
 8003f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200004fc 	.word	0x200004fc
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f2e:	463a      	mov	r2, r7
 8003f30:	1d39      	adds	r1, r7, #4
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc fb20 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	9202      	str	r2, [sp, #8]
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	460a      	mov	r2, r1
 8003f4e:	4921      	ldr	r1, [pc, #132]	; (8003fd4 <vTaskStartScheduler+0xb4>)
 8003f50:	4821      	ldr	r0, [pc, #132]	; (8003fd8 <vTaskStartScheduler+0xb8>)
 8003f52:	f7ff fe07 	bl	8003b64 <xTaskCreateStatic>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <vTaskStartScheduler+0xbc>)
 8003f5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f5c:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <vTaskStartScheduler+0xbc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e001      	b.n	8003f6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d11b      	bne.n	8003fac <vTaskStartScheduler+0x8c>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	613b      	str	r3, [r7, #16]
}
 8003f86:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f88:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <vTaskStartScheduler+0xc0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	334c      	adds	r3, #76	; 0x4c
 8003f8e:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <vTaskStartScheduler+0xc4>)
 8003f90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <vTaskStartScheduler+0xc8>)
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <vTaskStartScheduler+0xcc>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fa0:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <vTaskStartScheduler+0xd0>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fa6:	f000 fe7b 	bl	8004ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003faa:	e00e      	b.n	8003fca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d10a      	bne.n	8003fca <vTaskStartScheduler+0xaa>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	60fb      	str	r3, [r7, #12]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <vTaskStartScheduler+0xa8>
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	080068c4 	.word	0x080068c4
 8003fd8:	08004591 	.word	0x08004591
 8003fdc:	200004f8 	.word	0x200004f8
 8003fe0:	200003d4 	.word	0x200003d4
 8003fe4:	20000068 	.word	0x20000068
 8003fe8:	200004f4 	.word	0x200004f4
 8003fec:	200004e0 	.word	0x200004e0
 8003ff0:	200004d8 	.word	0x200004d8

08003ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <vTaskSuspendAll+0x18>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	4a03      	ldr	r2, [pc, #12]	; (800400c <vTaskSuspendAll+0x18>)
 8004000:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	200004fc 	.word	0x200004fc

08004010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800401e:	4b41      	ldr	r3, [pc, #260]	; (8004124 <xTaskResumeAll+0x114>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <xTaskResumeAll+0x2c>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	603b      	str	r3, [r7, #0]
}
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800403c:	f000 fed2 	bl	8004de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004040:	4b38      	ldr	r3, [pc, #224]	; (8004124 <xTaskResumeAll+0x114>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3b01      	subs	r3, #1
 8004046:	4a37      	ldr	r2, [pc, #220]	; (8004124 <xTaskResumeAll+0x114>)
 8004048:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800404a:	4b36      	ldr	r3, [pc, #216]	; (8004124 <xTaskResumeAll+0x114>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d161      	bne.n	8004116 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004052:	4b35      	ldr	r3, [pc, #212]	; (8004128 <xTaskResumeAll+0x118>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d05d      	beq.n	8004116 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800405a:	e02e      	b.n	80040ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800405c:	4b33      	ldr	r3, [pc, #204]	; (800412c <xTaskResumeAll+0x11c>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3318      	adds	r3, #24
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe ffd7 	bl	800301c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3304      	adds	r3, #4
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe ffd2 	bl	800301c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2201      	movs	r2, #1
 800407e:	409a      	lsls	r2, r3
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <xTaskResumeAll+0x120>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4313      	orrs	r3, r2
 8004086:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <xTaskResumeAll+0x120>)
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a27      	ldr	r2, [pc, #156]	; (8004134 <xTaskResumeAll+0x124>)
 8004098:	441a      	add	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7fe ff5e 	bl	8002f62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <xTaskResumeAll+0x128>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040b4:	4b21      	ldr	r3, [pc, #132]	; (800413c <xTaskResumeAll+0x12c>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ba:	4b1c      	ldr	r3, [pc, #112]	; (800412c <xTaskResumeAll+0x11c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1cc      	bne.n	800405c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040c8:	f000 fb1c 	bl	8004704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <xTaskResumeAll+0x130>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d010      	beq.n	80040fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040d8:	f000 f836 	bl	8004148 <xTaskIncrementTick>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <xTaskResumeAll+0x12c>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f1      	bne.n	80040d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <xTaskResumeAll+0x130>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <xTaskResumeAll+0x12c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004102:	2301      	movs	r3, #1
 8004104:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <xTaskResumeAll+0x134>)
 8004108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004116:	f000 fe95 	bl	8004e44 <vPortExitCritical>

	return xAlreadyYielded;
 800411a:	68bb      	ldr	r3, [r7, #8]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	200004fc 	.word	0x200004fc
 8004128:	200004d4 	.word	0x200004d4
 800412c:	20000494 	.word	0x20000494
 8004130:	200004dc 	.word	0x200004dc
 8004134:	200003d8 	.word	0x200003d8
 8004138:	200003d4 	.word	0x200003d4
 800413c:	200004e8 	.word	0x200004e8
 8004140:	200004e4 	.word	0x200004e4
 8004144:	e000ed04 	.word	0xe000ed04

08004148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004152:	4b4e      	ldr	r3, [pc, #312]	; (800428c <xTaskIncrementTick+0x144>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 808e 	bne.w	8004278 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800415c:	4b4c      	ldr	r3, [pc, #304]	; (8004290 <xTaskIncrementTick+0x148>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004164:	4a4a      	ldr	r2, [pc, #296]	; (8004290 <xTaskIncrementTick+0x148>)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d120      	bne.n	80041b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004170:	4b48      	ldr	r3, [pc, #288]	; (8004294 <xTaskIncrementTick+0x14c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <xTaskIncrementTick+0x48>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	603b      	str	r3, [r7, #0]
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <xTaskIncrementTick+0x46>
 8004190:	4b40      	ldr	r3, [pc, #256]	; (8004294 <xTaskIncrementTick+0x14c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b40      	ldr	r3, [pc, #256]	; (8004298 <xTaskIncrementTick+0x150>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3e      	ldr	r2, [pc, #248]	; (8004294 <xTaskIncrementTick+0x14c>)
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4a3e      	ldr	r2, [pc, #248]	; (8004298 <xTaskIncrementTick+0x150>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b3d      	ldr	r3, [pc, #244]	; (800429c <xTaskIncrementTick+0x154>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	4a3c      	ldr	r2, [pc, #240]	; (800429c <xTaskIncrementTick+0x154>)
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	f000 faa9 	bl	8004704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <xTaskIncrementTick+0x158>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d348      	bcc.n	800424e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041bc:	4b35      	ldr	r3, [pc, #212]	; (8004294 <xTaskIncrementTick+0x14c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c6:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <xTaskIncrementTick+0x158>)
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	601a      	str	r2, [r3, #0]
					break;
 80041ce:	e03e      	b.n	800424e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d0:	4b30      	ldr	r3, [pc, #192]	; (8004294 <xTaskIncrementTick+0x14c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d203      	bcs.n	80041f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041e8:	4a2d      	ldr	r2, [pc, #180]	; (80042a0 <xTaskIncrementTick+0x158>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041ee:	e02e      	b.n	800424e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe ff11 	bl	800301c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3318      	adds	r3, #24
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe ff08 	bl	800301c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <xTaskIncrementTick+0x15c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <xTaskIncrementTick+0x15c>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <xTaskIncrementTick+0x160>)
 800422c:	441a      	add	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7fe fe94 	bl	8002f62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <xTaskIncrementTick+0x164>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	429a      	cmp	r2, r3
 8004246:	d3b9      	bcc.n	80041bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800424c:	e7b6      	b.n	80041bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <xTaskIncrementTick+0x164>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4914      	ldr	r1, [pc, #80]	; (80042a8 <xTaskIncrementTick+0x160>)
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d901      	bls.n	800426a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004266:	2301      	movs	r3, #1
 8004268:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800426a:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <xTaskIncrementTick+0x168>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e004      	b.n	8004282 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <xTaskIncrementTick+0x16c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <xTaskIncrementTick+0x16c>)
 8004280:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004282:	697b      	ldr	r3, [r7, #20]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200004fc 	.word	0x200004fc
 8004290:	200004d8 	.word	0x200004d8
 8004294:	2000048c 	.word	0x2000048c
 8004298:	20000490 	.word	0x20000490
 800429c:	200004ec 	.word	0x200004ec
 80042a0:	200004f4 	.word	0x200004f4
 80042a4:	200004dc 	.word	0x200004dc
 80042a8:	200003d8 	.word	0x200003d8
 80042ac:	200003d4 	.word	0x200003d4
 80042b0:	200004e8 	.word	0x200004e8
 80042b4:	200004e4 	.word	0x200004e4

080042b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042be:	4b29      	ldr	r3, [pc, #164]	; (8004364 <vTaskSwitchContext+0xac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042c6:	4b28      	ldr	r3, [pc, #160]	; (8004368 <vTaskSwitchContext+0xb0>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042cc:	e044      	b.n	8004358 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80042ce:	4b26      	ldr	r3, [pc, #152]	; (8004368 <vTaskSwitchContext+0xb0>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <vTaskSwitchContext+0xb4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	fab3 f383 	clz	r3, r3
 80042e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042e2:	7afb      	ldrb	r3, [r7, #11]
 80042e4:	f1c3 031f 	rsb	r3, r3, #31
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	4921      	ldr	r1, [pc, #132]	; (8004370 <vTaskSwitchContext+0xb8>)
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <vTaskSwitchContext+0x5c>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	607b      	str	r3, [r7, #4]
}
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <vTaskSwitchContext+0x5a>
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a14      	ldr	r2, [pc, #80]	; (8004370 <vTaskSwitchContext+0xb8>)
 8004320:	4413      	add	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3308      	adds	r3, #8
 8004336:	429a      	cmp	r2, r3
 8004338:	d104      	bne.n	8004344 <vTaskSwitchContext+0x8c>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <vTaskSwitchContext+0xbc>)
 800434c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <vTaskSwitchContext+0xbc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	334c      	adds	r3, #76	; 0x4c
 8004354:	4a08      	ldr	r2, [pc, #32]	; (8004378 <vTaskSwitchContext+0xc0>)
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	200004fc 	.word	0x200004fc
 8004368:	200004e8 	.word	0x200004e8
 800436c:	200004dc 	.word	0x200004dc
 8004370:	200003d8 	.word	0x200003d8
 8004374:	200003d4 	.word	0x200003d4
 8004378:	20000068 	.word	0x20000068

0800437c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <vTaskPlaceOnEventList+0x44>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3318      	adds	r3, #24
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe fdfd 	bl	8002faa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b0:	2101      	movs	r1, #1
 80043b2:	6838      	ldr	r0, [r7, #0]
 80043b4:	f000 fb82 	bl	8004abc <prvAddCurrentTaskToDelayedList>
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	200003d4 	.word	0x200003d4

080043c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	60fb      	str	r3, [r7, #12]
}
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3318      	adds	r3, #24
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe fe11 	bl	800301c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <xTaskRemoveFromEventList+0xac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11c      	bne.n	800443c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3304      	adds	r3, #4
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fe08 	bl	800301c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	4b17      	ldr	r3, [pc, #92]	; (8004474 <xTaskRemoveFromEventList+0xb0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	4a16      	ldr	r2, [pc, #88]	; (8004474 <xTaskRemoveFromEventList+0xb0>)
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a13      	ldr	r2, [pc, #76]	; (8004478 <xTaskRemoveFromEventList+0xb4>)
 800442c:	441a      	add	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3304      	adds	r3, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f7fe fd94 	bl	8002f62 <vListInsertEnd>
 800443a:	e005      	b.n	8004448 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	3318      	adds	r3, #24
 8004440:	4619      	mov	r1, r3
 8004442:	480e      	ldr	r0, [pc, #56]	; (800447c <xTaskRemoveFromEventList+0xb8>)
 8004444:	f7fe fd8d 	bl	8002f62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <xTaskRemoveFromEventList+0xbc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	429a      	cmp	r2, r3
 8004454:	d905      	bls.n	8004462 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <xTaskRemoveFromEventList+0xc0>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e001      	b.n	8004466 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004466:	697b      	ldr	r3, [r7, #20]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	200004fc 	.word	0x200004fc
 8004474:	200004dc 	.word	0x200004dc
 8004478:	200003d8 	.word	0x200003d8
 800447c:	20000494 	.word	0x20000494
 8004480:	200003d4 	.word	0x200003d4
 8004484:	200004e8 	.word	0x200004e8

08004488 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <vTaskInternalSetTimeOutState+0x24>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <vTaskInternalSetTimeOutState+0x28>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	200004ec 	.word	0x200004ec
 80044b0:	200004d8 	.word	0x200004d8

080044b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	613b      	str	r3, [r7, #16]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	60fb      	str	r3, [r7, #12]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80044f6:	f000 fc75 	bl	8004de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <xTaskCheckForTimeOut+0xbc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d102      	bne.n	800451a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	e023      	b.n	8004562 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <xTaskCheckForTimeOut+0xc0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d007      	beq.n	8004536 <xTaskCheckForTimeOut+0x82>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	e015      	b.n	8004562 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	d20b      	bcs.n	8004558 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad2      	subs	r2, r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ff9b 	bl	8004488 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e004      	b.n	8004562 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004562:	f000 fc6f 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 8004566:	69fb      	ldr	r3, [r7, #28]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200004d8 	.word	0x200004d8
 8004574:	200004ec 	.word	0x200004ec

08004578 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <vTaskMissedYield+0x14>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	200004e8 	.word	0x200004e8

08004590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004598:	f000 f852 	bl	8004640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <prvIdleTask+0x28>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d9f9      	bls.n	8004598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <prvIdleTask+0x2c>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045b4:	e7f0      	b.n	8004598 <prvIdleTask+0x8>
 80045b6:	bf00      	nop
 80045b8:	200003d8 	.word	0x200003d8
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	e00c      	b.n	80045e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4a12      	ldr	r2, [pc, #72]	; (8004620 <prvInitialiseTaskLists+0x60>)
 80045d8:	4413      	add	r3, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fc94 	bl	8002f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3301      	adds	r3, #1
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d9ef      	bls.n	80045cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045ec:	480d      	ldr	r0, [pc, #52]	; (8004624 <prvInitialiseTaskLists+0x64>)
 80045ee:	f7fe fc8b 	bl	8002f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045f2:	480d      	ldr	r0, [pc, #52]	; (8004628 <prvInitialiseTaskLists+0x68>)
 80045f4:	f7fe fc88 	bl	8002f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045f8:	480c      	ldr	r0, [pc, #48]	; (800462c <prvInitialiseTaskLists+0x6c>)
 80045fa:	f7fe fc85 	bl	8002f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045fe:	480c      	ldr	r0, [pc, #48]	; (8004630 <prvInitialiseTaskLists+0x70>)
 8004600:	f7fe fc82 	bl	8002f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004604:	480b      	ldr	r0, [pc, #44]	; (8004634 <prvInitialiseTaskLists+0x74>)
 8004606:	f7fe fc7f 	bl	8002f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <prvInitialiseTaskLists+0x78>)
 800460c:	4a05      	ldr	r2, [pc, #20]	; (8004624 <prvInitialiseTaskLists+0x64>)
 800460e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <prvInitialiseTaskLists+0x7c>)
 8004612:	4a05      	ldr	r2, [pc, #20]	; (8004628 <prvInitialiseTaskLists+0x68>)
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200003d8 	.word	0x200003d8
 8004624:	20000464 	.word	0x20000464
 8004628:	20000478 	.word	0x20000478
 800462c:	20000494 	.word	0x20000494
 8004630:	200004a8 	.word	0x200004a8
 8004634:	200004c0 	.word	0x200004c0
 8004638:	2000048c 	.word	0x2000048c
 800463c:	20000490 	.word	0x20000490

08004640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004646:	e019      	b.n	800467c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004648:	f000 fbcc 	bl	8004de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464c:	4b10      	ldr	r3, [pc, #64]	; (8004690 <prvCheckTasksWaitingTermination+0x50>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fcdf 	bl	800301c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800465e:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <prvCheckTasksWaitingTermination+0x54>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3b01      	subs	r3, #1
 8004664:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <prvCheckTasksWaitingTermination+0x54>)
 8004666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <prvCheckTasksWaitingTermination+0x58>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3b01      	subs	r3, #1
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <prvCheckTasksWaitingTermination+0x58>)
 8004670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004672:	f000 fbe7 	bl	8004e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f810 	bl	800469c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <prvCheckTasksWaitingTermination+0x58>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e1      	bne.n	8004648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200004a8 	.word	0x200004a8
 8004694:	200004d4 	.word	0x200004d4
 8004698:	200004bc 	.word	0x200004bc

0800469c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	334c      	adds	r3, #76	; 0x4c
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f8e7 	bl	800587c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d108      	bne.n	80046ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fd7f 	bl	80051c0 <vPortFree>
				vPortFree( pxTCB );
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fd7c 	bl	80051c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046c8:	e018      	b.n	80046fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d103      	bne.n	80046dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fd73 	bl	80051c0 <vPortFree>
	}
 80046da:	e00f      	b.n	80046fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d00a      	beq.n	80046fc <prvDeleteTCB+0x60>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60fb      	str	r3, [r7, #12]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <prvDeleteTCB+0x5e>
	}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <prvResetNextTaskUnblockTime+0x38>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <prvResetNextTaskUnblockTime+0x3c>)
 8004716:	f04f 32ff 	mov.w	r2, #4294967295
 800471a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800471c:	e008      	b.n	8004730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <prvResetNextTaskUnblockTime+0x38>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <prvResetNextTaskUnblockTime+0x3c>)
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	2000048c 	.word	0x2000048c
 8004740:	200004f4 	.word	0x200004f4

08004744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <xTaskGetSchedulerState+0x34>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004752:	2301      	movs	r3, #1
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	e008      	b.n	800476a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004758:	4b08      	ldr	r3, [pc, #32]	; (800477c <xTaskGetSchedulerState+0x38>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004760:	2302      	movs	r3, #2
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	e001      	b.n	800476a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800476a:	687b      	ldr	r3, [r7, #4]
	}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	200004e0 	.word	0x200004e0
 800477c:	200004fc 	.word	0x200004fc

08004780 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d05e      	beq.n	8004854 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	4b31      	ldr	r3, [pc, #196]	; (8004860 <xTaskPriorityInherit+0xe0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d24e      	bcs.n	8004842 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db06      	blt.n	80047ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <xTaskPriorityInherit+0xe0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	f1c3 0207 	rsb	r2, r3, #7
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6959      	ldr	r1, [r3, #20]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4a26      	ldr	r2, [pc, #152]	; (8004864 <xTaskPriorityInherit+0xe4>)
 80047cc:	4413      	add	r3, r2
 80047ce:	4299      	cmp	r1, r3
 80047d0:	d12f      	bne.n	8004832 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe fc20 	bl	800301c <uxListRemove>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	2201      	movs	r2, #1
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43da      	mvns	r2, r3
 80047ee:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <xTaskPriorityInherit+0xe8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4013      	ands	r3, r2
 80047f4:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <xTaskPriorityInherit+0xe8>)
 80047f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <xTaskPriorityInherit+0xe0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	2201      	movs	r2, #1
 8004808:	409a      	lsls	r2, r3
 800480a:	4b17      	ldr	r3, [pc, #92]	; (8004868 <xTaskPriorityInherit+0xe8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	4a15      	ldr	r2, [pc, #84]	; (8004868 <xTaskPriorityInherit+0xe8>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4a10      	ldr	r2, [pc, #64]	; (8004864 <xTaskPriorityInherit+0xe4>)
 8004822:	441a      	add	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f7fe fb99 	bl	8002f62 <vListInsertEnd>
 8004830:	e004      	b.n	800483c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <xTaskPriorityInherit+0xe0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800483c:	2301      	movs	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e008      	b.n	8004854 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <xTaskPriorityInherit+0xe0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	429a      	cmp	r2, r3
 800484e:	d201      	bcs.n	8004854 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004854:	68fb      	ldr	r3, [r7, #12]
	}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	200003d4 	.word	0x200003d4
 8004864:	200003d8 	.word	0x200003d8
 8004868:	200004dc 	.word	0x200004dc

0800486c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d06e      	beq.n	8004960 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004882:	4b3a      	ldr	r3, [pc, #232]	; (800496c <xTaskPriorityDisinherit+0x100>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	d00a      	beq.n	80048a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	60fb      	str	r3, [r7, #12]
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60bb      	str	r3, [r7, #8]
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c4:	1e5a      	subs	r2, r3, #1
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d044      	beq.n	8004960 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d140      	bne.n	8004960 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe fb9a 	bl	800301c <uxListRemove>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d115      	bne.n	800491a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f2:	491f      	ldr	r1, [pc, #124]	; (8004970 <xTaskPriorityDisinherit+0x104>)
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <xTaskPriorityDisinherit+0xae>
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	2201      	movs	r2, #1
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43da      	mvns	r2, r3
 8004910:	4b18      	ldr	r3, [pc, #96]	; (8004974 <xTaskPriorityDisinherit+0x108>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4013      	ands	r3, r2
 8004916:	4a17      	ldr	r2, [pc, #92]	; (8004974 <xTaskPriorityDisinherit+0x108>)
 8004918:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	f1c3 0207 	rsb	r2, r3, #7
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	2201      	movs	r2, #1
 8004934:	409a      	lsls	r2, r3
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <xTaskPriorityDisinherit+0x108>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <xTaskPriorityDisinherit+0x108>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4a08      	ldr	r2, [pc, #32]	; (8004970 <xTaskPriorityDisinherit+0x104>)
 800494e:	441a      	add	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7fe fb03 	bl	8002f62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004960:	697b      	ldr	r3, [r7, #20]
	}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200003d4 	.word	0x200003d4
 8004970:	200003d8 	.word	0x200003d8
 8004974:	200004dc 	.word	0x200004dc

08004978 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004986:	2301      	movs	r3, #1
 8004988:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d077      	beq.n	8004a80 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d902      	bls.n	80049be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	e002      	b.n	80049c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d058      	beq.n	8004a80 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d153      	bne.n	8004a80 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80049d8:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d10a      	bne.n	80049f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60bb      	str	r3, [r7, #8]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db04      	blt.n	8004a16 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f1c3 0207 	rsb	r2, r3, #7
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	6959      	ldr	r1, [r3, #20]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a26:	4413      	add	r3, r2
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	d129      	bne.n	8004a80 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe faf3 	bl	800301c <uxListRemove>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	2201      	movs	r2, #1
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43da      	mvns	r2, r3
 8004a48:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a50:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	2201      	movs	r2, #1
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	4a0b      	ldr	r2, [pc, #44]	; (8004a90 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4a06      	ldr	r2, [pc, #24]	; (8004a8c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a72:	441a      	add	r2, r3
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fe fa71 	bl	8002f62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a80:	bf00      	nop
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200003d4 	.word	0x200003d4
 8004a8c:	200003d8 	.word	0x200003d8
 8004a90:	200004dc 	.word	0x200004dc

08004a94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a98:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aa6:	3201      	adds	r2, #1
 8004aa8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004aaa:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004aac:	681b      	ldr	r3, [r3, #0]
	}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	200003d4 	.word	0x200003d4

08004abc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ac6:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004acc:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe faa2 	bl	800301c <uxListRemove>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10b      	bne.n	8004af6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ade:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43da      	mvns	r2, r3
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4013      	ands	r3, r2
 8004af2:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004af4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d10a      	bne.n	8004b14 <prvAddCurrentTaskToDelayedList+0x58>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b04:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	481a      	ldr	r0, [pc, #104]	; (8004b78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b0e:	f7fe fa28 	bl	8002f62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b12:	e026      	b.n	8004b62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b1c:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d209      	bcs.n	8004b40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b2c:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f7fe fa36 	bl	8002faa <vListInsert>
}
 8004b3e:	e010      	b.n	8004b62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f7fe fa2c 	bl	8002faa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d202      	bcs.n	8004b62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6013      	str	r3, [r2, #0]
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	200004d8 	.word	0x200004d8
 8004b70:	200003d4 	.word	0x200003d4
 8004b74:	200004dc 	.word	0x200004dc
 8004b78:	200004c0 	.word	0x200004c0
 8004b7c:	20000490 	.word	0x20000490
 8004b80:	2000048c 	.word	0x2000048c
 8004b84:	200004f4 	.word	0x200004f4

08004b88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3b04      	subs	r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3b04      	subs	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bb8:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <pxPortInitialiseStack+0x64>)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b14      	subs	r3, #20
 8004bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b04      	subs	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f06f 0202 	mvn.w	r2, #2
 8004bd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3b20      	subs	r3, #32
 8004bdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bde:	68fb      	ldr	r3, [r7, #12]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	08004bf1 	.word	0x08004bf1

08004bf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <prvTaskExitError+0x54>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d00a      	beq.n	8004c1a <prvTaskExitError+0x2a>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60fb      	str	r3, [r7, #12]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <prvTaskExitError+0x28>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60bb      	str	r3, [r7, #8]
}
 8004c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c2e:	bf00      	nop
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0fc      	beq.n	8004c30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	2000000c 	.word	0x2000000c
	...

08004c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <pxCurrentTCBConst2>)
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	f380 8809 	msr	PSP, r0
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8811 	msr	BASEPRI, r0
 8004c6a:	4770      	bx	lr
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst2>:
 8004c70:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <prvPortStartFirstTask+0x24>)
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	f380 8808 	msr	MSP, r0
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8814 	msr	CONTROL, r0
 8004c8a:	b662      	cpsie	i
 8004c8c:	b661      	cpsie	f
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	df00      	svc	0
 8004c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c9a:	bf00      	nop
 8004c9c:	e000ed08 	.word	0xe000ed08

08004ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ca6:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a46      	ldr	r2, [pc, #280]	; (8004dc4 <xPortStartScheduler+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10a      	bne.n	8004cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <xPortStartScheduler+0x128>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10a      	bne.n	8004ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60fb      	str	r3, [r7, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	22ff      	movs	r2, #255	; 0xff
 8004cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <xPortStartScheduler+0x130>)
 8004d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d14:	e009      	b.n	8004d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d16:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d0ef      	beq.n	8004d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d36:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1c3 0307 	rsb	r3, r3, #7
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d00a      	beq.n	8004d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60bb      	str	r3, [r7, #8]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d6a:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d8e:	f000 f8dd 	bl	8004f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <xPortStartScheduler+0x13c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d98:	f000 f8fc 	bl	8004f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <xPortStartScheduler+0x140>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <xPortStartScheduler+0x140>)
 8004da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004da8:	f7ff ff66 	bl	8004c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dac:	f7ff fa84 	bl	80042b8 <vTaskSwitchContext>
	prvTaskExitError();
 8004db0:	f7ff ff1e 	bl	8004bf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	e000ed00 	.word	0xe000ed00
 8004dc4:	410fc271 	.word	0x410fc271
 8004dc8:	410fc270 	.word	0x410fc270
 8004dcc:	e000e400 	.word	0xe000e400
 8004dd0:	20000500 	.word	0x20000500
 8004dd4:	20000504 	.word	0x20000504
 8004dd8:	e000ed20 	.word	0xe000ed20
 8004ddc:	2000000c 	.word	0x2000000c
 8004de0:	e000ef34 	.word	0xe000ef34

08004de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
}
 8004dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	4a0d      	ldr	r2, [pc, #52]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10f      	bne.n	8004e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <vPortEnterCritical+0x5c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	603b      	str	r3, [r7, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <vPortEnterCritical+0x4a>
	}
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	2000000c 	.word	0x2000000c
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <vPortExitCritical+0x50>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <vPortExitCritical+0x24>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	607b      	str	r3, [r7, #4]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <vPortExitCritical+0x50>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <vPortExitCritical+0x50>)
 8004e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <vPortExitCritical+0x50>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <vPortExitCritical+0x42>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f383 8811 	msr	BASEPRI, r3
}
 8004e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	2000000c 	.word	0x2000000c
	...

08004ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ea0:	f3ef 8009 	mrs	r0, PSP
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <pxCurrentTCBConst>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	f01e 0f10 	tst.w	lr, #16
 8004eb0:	bf08      	it	eq
 8004eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eba:	6010      	str	r0, [r2, #0]
 8004ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ec4:	f380 8811 	msr	BASEPRI, r0
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f7ff f9f2 	bl	80042b8 <vTaskSwitchContext>
 8004ed4:	f04f 0000 	mov.w	r0, #0
 8004ed8:	f380 8811 	msr	BASEPRI, r0
 8004edc:	bc09      	pop	{r0, r3}
 8004ede:	6819      	ldr	r1, [r3, #0]
 8004ee0:	6808      	ldr	r0, [r1, #0]
 8004ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee6:	f01e 0f10 	tst.w	lr, #16
 8004eea:	bf08      	it	eq
 8004eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ef0:	f380 8809 	msr	PSP, r0
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	f3af 8000 	nop.w

08004f00 <pxCurrentTCBConst>:
 8004f00:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	607b      	str	r3, [r7, #4]
}
 8004f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f22:	f7ff f911 	bl	8004148 <xTaskIncrementTick>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <SysTick_Handler+0x40>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
}
 8004f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <vPortSetupTimerInterrupt+0x38>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <vPortSetupTimerInterrupt+0x3c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <vPortSetupTimerInterrupt+0x40>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	099b      	lsrs	r3, r3, #6
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <vPortSetupTimerInterrupt+0x44>)
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e010 	.word	0xe000e010
 8004f84:	e000e018 	.word	0xe000e018
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	10624dd3 	.word	0x10624dd3
 8004f90:	e000e014 	.word	0xe000e014

08004f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fa4 <vPortEnableVFP+0x10>
 8004f98:	6801      	ldr	r1, [r0, #0]
 8004f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f9e:	6001      	str	r1, [r0, #0]
 8004fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed88 	.word	0xe000ed88

08004fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fae:	f3ef 8305 	mrs	r3, IPSR
 8004fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	d914      	bls.n	8004fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <vPortValidateInterruptPriority+0x70>)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fc4:	4b15      	ldr	r3, [pc, #84]	; (800501c <vPortValidateInterruptPriority+0x74>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	7afa      	ldrb	r2, [r7, #11]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d20a      	bcs.n	8004fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <vPortValidateInterruptPriority+0x78>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <vPortValidateInterruptPriority+0x7c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d90a      	bls.n	800500a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	603b      	str	r3, [r7, #0]
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <vPortValidateInterruptPriority+0x60>
	}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000e3f0 	.word	0xe000e3f0
 800501c:	20000500 	.word	0x20000500
 8005020:	e000ed0c 	.word	0xe000ed0c
 8005024:	20000504 	.word	0x20000504

08005028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005034:	f7fe ffde 	bl	8003ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005038:	4b5b      	ldr	r3, [pc, #364]	; (80051a8 <pvPortMalloc+0x180>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005040:	f000 f920 	bl	8005284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <pvPortMalloc+0x184>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8093 	bne.w	8005178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01d      	beq.n	8005094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005058:	2208      	movs	r2, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d014      	beq.n	8005094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f023 0307 	bic.w	r3, r3, #7
 8005070:	3308      	adds	r3, #8
 8005072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <pvPortMalloc+0x6c>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	617b      	str	r3, [r7, #20]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d06e      	beq.n	8005178 <pvPortMalloc+0x150>
 800509a:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <pvPortMalloc+0x188>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d869      	bhi.n	8005178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050a4:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <pvPortMalloc+0x18c>)
 80050a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050a8:	4b42      	ldr	r3, [pc, #264]	; (80051b4 <pvPortMalloc+0x18c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ae:	e004      	b.n	80050ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d903      	bls.n	80050cc <pvPortMalloc+0xa4>
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f1      	bne.n	80050b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050cc:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <pvPortMalloc+0x180>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d050      	beq.n	8005178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2208      	movs	r2, #8
 80050dc:	4413      	add	r3, r2
 80050de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	2308      	movs	r3, #8
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d91f      	bls.n	8005138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <pvPortMalloc+0xf8>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	613b      	str	r3, [r7, #16]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005132:	69b8      	ldr	r0, [r7, #24]
 8005134:	f000 f908 	bl	8005348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <pvPortMalloc+0x188>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <pvPortMalloc+0x188>)
 8005144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <pvPortMalloc+0x188>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <pvPortMalloc+0x190>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d203      	bcs.n	800515a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005152:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <pvPortMalloc+0x188>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <pvPortMalloc+0x190>)
 8005158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <pvPortMalloc+0x184>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	431a      	orrs	r2, r3
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <pvPortMalloc+0x194>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	4a11      	ldr	r2, [pc, #68]	; (80051bc <pvPortMalloc+0x194>)
 8005176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005178:	f7fe ff4a 	bl	8004010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <pvPortMalloc+0x174>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	60fb      	str	r3, [r7, #12]
}
 8005198:	bf00      	nop
 800519a:	e7fe      	b.n	800519a <pvPortMalloc+0x172>
	return pvReturn;
 800519c:	69fb      	ldr	r3, [r7, #28]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3728      	adds	r7, #40	; 0x28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20004110 	.word	0x20004110
 80051ac:	20004124 	.word	0x20004124
 80051b0:	20004114 	.word	0x20004114
 80051b4:	20004108 	.word	0x20004108
 80051b8:	20004118 	.word	0x20004118
 80051bc:	2000411c 	.word	0x2000411c

080051c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d04d      	beq.n	800526e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051d2:	2308      	movs	r3, #8
 80051d4:	425b      	negs	r3, r3
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <vPortFree+0xb8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <vPortFree+0x44>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60fb      	str	r3, [r7, #12]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <vPortFree+0x62>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	60bb      	str	r3, [r7, #8]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <vPortFree+0xb8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01e      	beq.n	800526e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11a      	bne.n	800526e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <vPortFree+0xb8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	43db      	mvns	r3, r3
 8005242:	401a      	ands	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005248:	f7fe fed4 	bl	8003ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <vPortFree+0xbc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4413      	add	r3, r2
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <vPortFree+0xbc>)
 8005258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800525a:	6938      	ldr	r0, [r7, #16]
 800525c:	f000 f874 	bl	8005348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <vPortFree+0xc0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	4a06      	ldr	r2, [pc, #24]	; (8005280 <vPortFree+0xc0>)
 8005268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800526a:	f7fe fed1 	bl	8004010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800526e:	bf00      	nop
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20004124 	.word	0x20004124
 800527c:	20004114 	.word	0x20004114
 8005280:	20004120 	.word	0x20004120

08005284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800528a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800528e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <prvHeapInit+0xac>)
 8005292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3307      	adds	r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0307 	bic.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <prvHeapInit+0xac>)
 80052b4:	4413      	add	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <prvHeapInit+0xb0>)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052c2:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <prvHeapInit+0xb0>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052d0:	2208      	movs	r2, #8
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a15      	ldr	r2, [pc, #84]	; (8005338 <prvHeapInit+0xb4>)
 80052e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <prvHeapInit+0xb4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <prvHeapInit+0xb4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <prvHeapInit+0xb4>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <prvHeapInit+0xb8>)
 8005312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <prvHeapInit+0xbc>)
 800531a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <prvHeapInit+0xc0>)
 800531e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000508 	.word	0x20000508
 8005334:	20004108 	.word	0x20004108
 8005338:	20004110 	.word	0x20004110
 800533c:	20004118 	.word	0x20004118
 8005340:	20004114 	.word	0x20004114
 8005344:	20004124 	.word	0x20004124

08005348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <prvInsertBlockIntoFreeList+0xac>)
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e002      	b.n	800535c <prvInsertBlockIntoFreeList+0x14>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d8f7      	bhi.n	8005356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d108      	bne.n	800538a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d118      	bne.n	80053d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <prvInsertBlockIntoFreeList+0xb0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d00d      	beq.n	80053c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e008      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <prvInsertBlockIntoFreeList+0xb0>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e003      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d002      	beq.n	80053e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20004108 	.word	0x20004108
 80053f8:	20004110 	.word	0x20004110

080053fc <std>:
 80053fc:	2300      	movs	r3, #0
 80053fe:	b510      	push	{r4, lr}
 8005400:	4604      	mov	r4, r0
 8005402:	e9c0 3300 	strd	r3, r3, [r0]
 8005406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800540a:	6083      	str	r3, [r0, #8]
 800540c:	8181      	strh	r1, [r0, #12]
 800540e:	6643      	str	r3, [r0, #100]	; 0x64
 8005410:	81c2      	strh	r2, [r0, #14]
 8005412:	6183      	str	r3, [r0, #24]
 8005414:	4619      	mov	r1, r3
 8005416:	2208      	movs	r2, #8
 8005418:	305c      	adds	r0, #92	; 0x5c
 800541a:	f000 fa17 	bl	800584c <memset>
 800541e:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <std+0x58>)
 8005420:	6263      	str	r3, [r4, #36]	; 0x24
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <std+0x5c>)
 8005424:	62a3      	str	r3, [r4, #40]	; 0x28
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <std+0x60>)
 8005428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <std+0x64>)
 800542c:	6323      	str	r3, [r4, #48]	; 0x30
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <std+0x68>)
 8005430:	6224      	str	r4, [r4, #32]
 8005432:	429c      	cmp	r4, r3
 8005434:	d006      	beq.n	8005444 <std+0x48>
 8005436:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800543a:	4294      	cmp	r4, r2
 800543c:	d002      	beq.n	8005444 <std+0x48>
 800543e:	33d0      	adds	r3, #208	; 0xd0
 8005440:	429c      	cmp	r4, r3
 8005442:	d105      	bne.n	8005450 <std+0x54>
 8005444:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800544c:	f000 bacc 	b.w	80059e8 <__retarget_lock_init_recursive>
 8005450:	bd10      	pop	{r4, pc}
 8005452:	bf00      	nop
 8005454:	0800569d 	.word	0x0800569d
 8005458:	080056bf 	.word	0x080056bf
 800545c:	080056f7 	.word	0x080056f7
 8005460:	0800571b 	.word	0x0800571b
 8005464:	20004128 	.word	0x20004128

08005468 <stdio_exit_handler>:
 8005468:	4a02      	ldr	r2, [pc, #8]	; (8005474 <stdio_exit_handler+0xc>)
 800546a:	4903      	ldr	r1, [pc, #12]	; (8005478 <stdio_exit_handler+0x10>)
 800546c:	4803      	ldr	r0, [pc, #12]	; (800547c <stdio_exit_handler+0x14>)
 800546e:	f000 b869 	b.w	8005544 <_fwalk_sglue>
 8005472:	bf00      	nop
 8005474:	20000010 	.word	0x20000010
 8005478:	08006561 	.word	0x08006561
 800547c:	2000001c 	.word	0x2000001c

08005480 <cleanup_stdio>:
 8005480:	6841      	ldr	r1, [r0, #4]
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <cleanup_stdio+0x34>)
 8005484:	4299      	cmp	r1, r3
 8005486:	b510      	push	{r4, lr}
 8005488:	4604      	mov	r4, r0
 800548a:	d001      	beq.n	8005490 <cleanup_stdio+0x10>
 800548c:	f001 f868 	bl	8006560 <_fflush_r>
 8005490:	68a1      	ldr	r1, [r4, #8]
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <cleanup_stdio+0x38>)
 8005494:	4299      	cmp	r1, r3
 8005496:	d002      	beq.n	800549e <cleanup_stdio+0x1e>
 8005498:	4620      	mov	r0, r4
 800549a:	f001 f861 	bl	8006560 <_fflush_r>
 800549e:	68e1      	ldr	r1, [r4, #12]
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <cleanup_stdio+0x3c>)
 80054a2:	4299      	cmp	r1, r3
 80054a4:	d004      	beq.n	80054b0 <cleanup_stdio+0x30>
 80054a6:	4620      	mov	r0, r4
 80054a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ac:	f001 b858 	b.w	8006560 <_fflush_r>
 80054b0:	bd10      	pop	{r4, pc}
 80054b2:	bf00      	nop
 80054b4:	20004128 	.word	0x20004128
 80054b8:	20004190 	.word	0x20004190
 80054bc:	200041f8 	.word	0x200041f8

080054c0 <global_stdio_init.part.0>:
 80054c0:	b510      	push	{r4, lr}
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <global_stdio_init.part.0+0x30>)
 80054c4:	4c0b      	ldr	r4, [pc, #44]	; (80054f4 <global_stdio_init.part.0+0x34>)
 80054c6:	4a0c      	ldr	r2, [pc, #48]	; (80054f8 <global_stdio_init.part.0+0x38>)
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	4620      	mov	r0, r4
 80054cc:	2200      	movs	r2, #0
 80054ce:	2104      	movs	r1, #4
 80054d0:	f7ff ff94 	bl	80053fc <std>
 80054d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054d8:	2201      	movs	r2, #1
 80054da:	2109      	movs	r1, #9
 80054dc:	f7ff ff8e 	bl	80053fc <std>
 80054e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80054e4:	2202      	movs	r2, #2
 80054e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ea:	2112      	movs	r1, #18
 80054ec:	f7ff bf86 	b.w	80053fc <std>
 80054f0:	20004260 	.word	0x20004260
 80054f4:	20004128 	.word	0x20004128
 80054f8:	08005469 	.word	0x08005469

080054fc <__sfp_lock_acquire>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__sfp_lock_acquire+0x8>)
 80054fe:	f000 ba74 	b.w	80059ea <__retarget_lock_acquire_recursive>
 8005502:	bf00      	nop
 8005504:	20004269 	.word	0x20004269

08005508 <__sfp_lock_release>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__sfp_lock_release+0x8>)
 800550a:	f000 ba6f 	b.w	80059ec <__retarget_lock_release_recursive>
 800550e:	bf00      	nop
 8005510:	20004269 	.word	0x20004269

08005514 <__sinit>:
 8005514:	b510      	push	{r4, lr}
 8005516:	4604      	mov	r4, r0
 8005518:	f7ff fff0 	bl	80054fc <__sfp_lock_acquire>
 800551c:	6a23      	ldr	r3, [r4, #32]
 800551e:	b11b      	cbz	r3, 8005528 <__sinit+0x14>
 8005520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005524:	f7ff bff0 	b.w	8005508 <__sfp_lock_release>
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <__sinit+0x28>)
 800552a:	6223      	str	r3, [r4, #32]
 800552c:	4b04      	ldr	r3, [pc, #16]	; (8005540 <__sinit+0x2c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f5      	bne.n	8005520 <__sinit+0xc>
 8005534:	f7ff ffc4 	bl	80054c0 <global_stdio_init.part.0>
 8005538:	e7f2      	b.n	8005520 <__sinit+0xc>
 800553a:	bf00      	nop
 800553c:	08005481 	.word	0x08005481
 8005540:	20004260 	.word	0x20004260

08005544 <_fwalk_sglue>:
 8005544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005548:	4607      	mov	r7, r0
 800554a:	4688      	mov	r8, r1
 800554c:	4614      	mov	r4, r2
 800554e:	2600      	movs	r6, #0
 8005550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005554:	f1b9 0901 	subs.w	r9, r9, #1
 8005558:	d505      	bpl.n	8005566 <_fwalk_sglue+0x22>
 800555a:	6824      	ldr	r4, [r4, #0]
 800555c:	2c00      	cmp	r4, #0
 800555e:	d1f7      	bne.n	8005550 <_fwalk_sglue+0xc>
 8005560:	4630      	mov	r0, r6
 8005562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005566:	89ab      	ldrh	r3, [r5, #12]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d907      	bls.n	800557c <_fwalk_sglue+0x38>
 800556c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005570:	3301      	adds	r3, #1
 8005572:	d003      	beq.n	800557c <_fwalk_sglue+0x38>
 8005574:	4629      	mov	r1, r5
 8005576:	4638      	mov	r0, r7
 8005578:	47c0      	blx	r8
 800557a:	4306      	orrs	r6, r0
 800557c:	3568      	adds	r5, #104	; 0x68
 800557e:	e7e9      	b.n	8005554 <_fwalk_sglue+0x10>

08005580 <iprintf>:
 8005580:	b40f      	push	{r0, r1, r2, r3}
 8005582:	b507      	push	{r0, r1, r2, lr}
 8005584:	4906      	ldr	r1, [pc, #24]	; (80055a0 <iprintf+0x20>)
 8005586:	ab04      	add	r3, sp, #16
 8005588:	6808      	ldr	r0, [r1, #0]
 800558a:	f853 2b04 	ldr.w	r2, [r3], #4
 800558e:	6881      	ldr	r1, [r0, #8]
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	f000 fcb5 	bl	8005f00 <_vfiprintf_r>
 8005596:	b003      	add	sp, #12
 8005598:	f85d eb04 	ldr.w	lr, [sp], #4
 800559c:	b004      	add	sp, #16
 800559e:	4770      	bx	lr
 80055a0:	20000068 	.word	0x20000068

080055a4 <_puts_r>:
 80055a4:	6a03      	ldr	r3, [r0, #32]
 80055a6:	b570      	push	{r4, r5, r6, lr}
 80055a8:	6884      	ldr	r4, [r0, #8]
 80055aa:	4605      	mov	r5, r0
 80055ac:	460e      	mov	r6, r1
 80055ae:	b90b      	cbnz	r3, 80055b4 <_puts_r+0x10>
 80055b0:	f7ff ffb0 	bl	8005514 <__sinit>
 80055b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055b6:	07db      	lsls	r3, r3, #31
 80055b8:	d405      	bmi.n	80055c6 <_puts_r+0x22>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	0598      	lsls	r0, r3, #22
 80055be:	d402      	bmi.n	80055c6 <_puts_r+0x22>
 80055c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055c2:	f000 fa12 	bl	80059ea <__retarget_lock_acquire_recursive>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	0719      	lsls	r1, r3, #28
 80055ca:	d513      	bpl.n	80055f4 <_puts_r+0x50>
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	b18b      	cbz	r3, 80055f4 <_puts_r+0x50>
 80055d0:	3e01      	subs	r6, #1
 80055d2:	68a3      	ldr	r3, [r4, #8]
 80055d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055d8:	3b01      	subs	r3, #1
 80055da:	60a3      	str	r3, [r4, #8]
 80055dc:	b9e9      	cbnz	r1, 800561a <_puts_r+0x76>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da2e      	bge.n	8005640 <_puts_r+0x9c>
 80055e2:	4622      	mov	r2, r4
 80055e4:	210a      	movs	r1, #10
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 f89b 	bl	8005722 <__swbuf_r>
 80055ec:	3001      	adds	r0, #1
 80055ee:	d007      	beq.n	8005600 <_puts_r+0x5c>
 80055f0:	250a      	movs	r5, #10
 80055f2:	e007      	b.n	8005604 <_puts_r+0x60>
 80055f4:	4621      	mov	r1, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 f8d0 	bl	800579c <__swsetup_r>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d0e7      	beq.n	80055d0 <_puts_r+0x2c>
 8005600:	f04f 35ff 	mov.w	r5, #4294967295
 8005604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005606:	07da      	lsls	r2, r3, #31
 8005608:	d405      	bmi.n	8005616 <_puts_r+0x72>
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	059b      	lsls	r3, r3, #22
 800560e:	d402      	bmi.n	8005616 <_puts_r+0x72>
 8005610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005612:	f000 f9eb 	bl	80059ec <__retarget_lock_release_recursive>
 8005616:	4628      	mov	r0, r5
 8005618:	bd70      	pop	{r4, r5, r6, pc}
 800561a:	2b00      	cmp	r3, #0
 800561c:	da04      	bge.n	8005628 <_puts_r+0x84>
 800561e:	69a2      	ldr	r2, [r4, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	dc06      	bgt.n	8005632 <_puts_r+0x8e>
 8005624:	290a      	cmp	r1, #10
 8005626:	d004      	beq.n	8005632 <_puts_r+0x8e>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	6022      	str	r2, [r4, #0]
 800562e:	7019      	strb	r1, [r3, #0]
 8005630:	e7cf      	b.n	80055d2 <_puts_r+0x2e>
 8005632:	4622      	mov	r2, r4
 8005634:	4628      	mov	r0, r5
 8005636:	f000 f874 	bl	8005722 <__swbuf_r>
 800563a:	3001      	adds	r0, #1
 800563c:	d1c9      	bne.n	80055d2 <_puts_r+0x2e>
 800563e:	e7df      	b.n	8005600 <_puts_r+0x5c>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	250a      	movs	r5, #10
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	6022      	str	r2, [r4, #0]
 8005648:	701d      	strb	r5, [r3, #0]
 800564a:	e7db      	b.n	8005604 <_puts_r+0x60>

0800564c <puts>:
 800564c:	4b02      	ldr	r3, [pc, #8]	; (8005658 <puts+0xc>)
 800564e:	4601      	mov	r1, r0
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	f7ff bfa7 	b.w	80055a4 <_puts_r>
 8005656:	bf00      	nop
 8005658:	20000068 	.word	0x20000068

0800565c <siprintf>:
 800565c:	b40e      	push	{r1, r2, r3}
 800565e:	b500      	push	{lr}
 8005660:	b09c      	sub	sp, #112	; 0x70
 8005662:	ab1d      	add	r3, sp, #116	; 0x74
 8005664:	9002      	str	r0, [sp, #8]
 8005666:	9006      	str	r0, [sp, #24]
 8005668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800566c:	4809      	ldr	r0, [pc, #36]	; (8005694 <siprintf+0x38>)
 800566e:	9107      	str	r1, [sp, #28]
 8005670:	9104      	str	r1, [sp, #16]
 8005672:	4909      	ldr	r1, [pc, #36]	; (8005698 <siprintf+0x3c>)
 8005674:	f853 2b04 	ldr.w	r2, [r3], #4
 8005678:	9105      	str	r1, [sp, #20]
 800567a:	6800      	ldr	r0, [r0, #0]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	a902      	add	r1, sp, #8
 8005680:	f000 fb16 	bl	8005cb0 <_svfiprintf_r>
 8005684:	9b02      	ldr	r3, [sp, #8]
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	b01c      	add	sp, #112	; 0x70
 800568c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005690:	b003      	add	sp, #12
 8005692:	4770      	bx	lr
 8005694:	20000068 	.word	0x20000068
 8005698:	ffff0208 	.word	0xffff0208

0800569c <__sread>:
 800569c:	b510      	push	{r4, lr}
 800569e:	460c      	mov	r4, r1
 80056a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a4:	f000 f952 	bl	800594c <_read_r>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	bfab      	itete	ge
 80056ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056ae:	89a3      	ldrhlt	r3, [r4, #12]
 80056b0:	181b      	addge	r3, r3, r0
 80056b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056b6:	bfac      	ite	ge
 80056b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ba:	81a3      	strhlt	r3, [r4, #12]
 80056bc:	bd10      	pop	{r4, pc}

080056be <__swrite>:
 80056be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c2:	461f      	mov	r7, r3
 80056c4:	898b      	ldrh	r3, [r1, #12]
 80056c6:	05db      	lsls	r3, r3, #23
 80056c8:	4605      	mov	r5, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	4616      	mov	r6, r2
 80056ce:	d505      	bpl.n	80056dc <__swrite+0x1e>
 80056d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d4:	2302      	movs	r3, #2
 80056d6:	2200      	movs	r2, #0
 80056d8:	f000 f926 	bl	8005928 <_lseek_r>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	4632      	mov	r2, r6
 80056ea:	463b      	mov	r3, r7
 80056ec:	4628      	mov	r0, r5
 80056ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056f2:	f000 b93d 	b.w	8005970 <_write_r>

080056f6 <__sseek>:
 80056f6:	b510      	push	{r4, lr}
 80056f8:	460c      	mov	r4, r1
 80056fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fe:	f000 f913 	bl	8005928 <_lseek_r>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	bf15      	itete	ne
 8005708:	6560      	strne	r0, [r4, #84]	; 0x54
 800570a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800570e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005712:	81a3      	strheq	r3, [r4, #12]
 8005714:	bf18      	it	ne
 8005716:	81a3      	strhne	r3, [r4, #12]
 8005718:	bd10      	pop	{r4, pc}

0800571a <__sclose>:
 800571a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800571e:	f000 b89d 	b.w	800585c <_close_r>

08005722 <__swbuf_r>:
 8005722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005724:	460e      	mov	r6, r1
 8005726:	4614      	mov	r4, r2
 8005728:	4605      	mov	r5, r0
 800572a:	b118      	cbz	r0, 8005734 <__swbuf_r+0x12>
 800572c:	6a03      	ldr	r3, [r0, #32]
 800572e:	b90b      	cbnz	r3, 8005734 <__swbuf_r+0x12>
 8005730:	f7ff fef0 	bl	8005514 <__sinit>
 8005734:	69a3      	ldr	r3, [r4, #24]
 8005736:	60a3      	str	r3, [r4, #8]
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	071a      	lsls	r2, r3, #28
 800573c:	d525      	bpl.n	800578a <__swbuf_r+0x68>
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	b31b      	cbz	r3, 800578a <__swbuf_r+0x68>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	6922      	ldr	r2, [r4, #16]
 8005746:	1a98      	subs	r0, r3, r2
 8005748:	6963      	ldr	r3, [r4, #20]
 800574a:	b2f6      	uxtb	r6, r6
 800574c:	4283      	cmp	r3, r0
 800574e:	4637      	mov	r7, r6
 8005750:	dc04      	bgt.n	800575c <__swbuf_r+0x3a>
 8005752:	4621      	mov	r1, r4
 8005754:	4628      	mov	r0, r5
 8005756:	f000 ff03 	bl	8006560 <_fflush_r>
 800575a:	b9e0      	cbnz	r0, 8005796 <__swbuf_r+0x74>
 800575c:	68a3      	ldr	r3, [r4, #8]
 800575e:	3b01      	subs	r3, #1
 8005760:	60a3      	str	r3, [r4, #8]
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	6022      	str	r2, [r4, #0]
 8005768:	701e      	strb	r6, [r3, #0]
 800576a:	6962      	ldr	r2, [r4, #20]
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	429a      	cmp	r2, r3
 8005770:	d004      	beq.n	800577c <__swbuf_r+0x5a>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	07db      	lsls	r3, r3, #31
 8005776:	d506      	bpl.n	8005786 <__swbuf_r+0x64>
 8005778:	2e0a      	cmp	r6, #10
 800577a:	d104      	bne.n	8005786 <__swbuf_r+0x64>
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	f000 feee 	bl	8006560 <_fflush_r>
 8005784:	b938      	cbnz	r0, 8005796 <__swbuf_r+0x74>
 8005786:	4638      	mov	r0, r7
 8005788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800578a:	4621      	mov	r1, r4
 800578c:	4628      	mov	r0, r5
 800578e:	f000 f805 	bl	800579c <__swsetup_r>
 8005792:	2800      	cmp	r0, #0
 8005794:	d0d5      	beq.n	8005742 <__swbuf_r+0x20>
 8005796:	f04f 37ff 	mov.w	r7, #4294967295
 800579a:	e7f4      	b.n	8005786 <__swbuf_r+0x64>

0800579c <__swsetup_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4b2a      	ldr	r3, [pc, #168]	; (8005848 <__swsetup_r+0xac>)
 80057a0:	4605      	mov	r5, r0
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	460c      	mov	r4, r1
 80057a6:	b118      	cbz	r0, 80057b0 <__swsetup_r+0x14>
 80057a8:	6a03      	ldr	r3, [r0, #32]
 80057aa:	b90b      	cbnz	r3, 80057b0 <__swsetup_r+0x14>
 80057ac:	f7ff feb2 	bl	8005514 <__sinit>
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057b6:	0718      	lsls	r0, r3, #28
 80057b8:	d422      	bmi.n	8005800 <__swsetup_r+0x64>
 80057ba:	06d9      	lsls	r1, r3, #27
 80057bc:	d407      	bmi.n	80057ce <__swsetup_r+0x32>
 80057be:	2309      	movs	r3, #9
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057c6:	81a3      	strh	r3, [r4, #12]
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	e034      	b.n	8005838 <__swsetup_r+0x9c>
 80057ce:	0758      	lsls	r0, r3, #29
 80057d0:	d512      	bpl.n	80057f8 <__swsetup_r+0x5c>
 80057d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057d4:	b141      	cbz	r1, 80057e8 <__swsetup_r+0x4c>
 80057d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057da:	4299      	cmp	r1, r3
 80057dc:	d002      	beq.n	80057e4 <__swsetup_r+0x48>
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 f914 	bl	8005a0c <_free_r>
 80057e4:	2300      	movs	r3, #0
 80057e6:	6363      	str	r3, [r4, #52]	; 0x34
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	2300      	movs	r3, #0
 80057f2:	6063      	str	r3, [r4, #4]
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	f043 0308 	orr.w	r3, r3, #8
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	6923      	ldr	r3, [r4, #16]
 8005802:	b94b      	cbnz	r3, 8005818 <__swsetup_r+0x7c>
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800580a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580e:	d003      	beq.n	8005818 <__swsetup_r+0x7c>
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 fef2 	bl	80065fc <__smakebuf_r>
 8005818:	89a0      	ldrh	r0, [r4, #12]
 800581a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800581e:	f010 0301 	ands.w	r3, r0, #1
 8005822:	d00a      	beq.n	800583a <__swsetup_r+0x9e>
 8005824:	2300      	movs	r3, #0
 8005826:	60a3      	str	r3, [r4, #8]
 8005828:	6963      	ldr	r3, [r4, #20]
 800582a:	425b      	negs	r3, r3
 800582c:	61a3      	str	r3, [r4, #24]
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	b943      	cbnz	r3, 8005844 <__swsetup_r+0xa8>
 8005832:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005836:	d1c4      	bne.n	80057c2 <__swsetup_r+0x26>
 8005838:	bd38      	pop	{r3, r4, r5, pc}
 800583a:	0781      	lsls	r1, r0, #30
 800583c:	bf58      	it	pl
 800583e:	6963      	ldrpl	r3, [r4, #20]
 8005840:	60a3      	str	r3, [r4, #8]
 8005842:	e7f4      	b.n	800582e <__swsetup_r+0x92>
 8005844:	2000      	movs	r0, #0
 8005846:	e7f7      	b.n	8005838 <__swsetup_r+0x9c>
 8005848:	20000068 	.word	0x20000068

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <_close_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d06      	ldr	r5, [pc, #24]	; (8005878 <_close_r+0x1c>)
 8005860:	2300      	movs	r3, #0
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	602b      	str	r3, [r5, #0]
 8005868:	f7fb fa8d 	bl	8000d86 <_close>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_close_r+0x1a>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_close_r+0x1a>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20004264 	.word	0x20004264

0800587c <_reclaim_reent>:
 800587c:	4b29      	ldr	r3, [pc, #164]	; (8005924 <_reclaim_reent+0xa8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4283      	cmp	r3, r0
 8005882:	b570      	push	{r4, r5, r6, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	d04b      	beq.n	8005920 <_reclaim_reent+0xa4>
 8005888:	69c3      	ldr	r3, [r0, #28]
 800588a:	b143      	cbz	r3, 800589e <_reclaim_reent+0x22>
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d144      	bne.n	800591c <_reclaim_reent+0xa0>
 8005892:	69e3      	ldr	r3, [r4, #28]
 8005894:	6819      	ldr	r1, [r3, #0]
 8005896:	b111      	cbz	r1, 800589e <_reclaim_reent+0x22>
 8005898:	4620      	mov	r0, r4
 800589a:	f000 f8b7 	bl	8005a0c <_free_r>
 800589e:	6961      	ldr	r1, [r4, #20]
 80058a0:	b111      	cbz	r1, 80058a8 <_reclaim_reent+0x2c>
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f8b2 	bl	8005a0c <_free_r>
 80058a8:	69e1      	ldr	r1, [r4, #28]
 80058aa:	b111      	cbz	r1, 80058b2 <_reclaim_reent+0x36>
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 f8ad 	bl	8005a0c <_free_r>
 80058b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80058b4:	b111      	cbz	r1, 80058bc <_reclaim_reent+0x40>
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 f8a8 	bl	8005a0c <_free_r>
 80058bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058be:	b111      	cbz	r1, 80058c6 <_reclaim_reent+0x4a>
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 f8a3 	bl	8005a0c <_free_r>
 80058c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80058c8:	b111      	cbz	r1, 80058d0 <_reclaim_reent+0x54>
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 f89e 	bl	8005a0c <_free_r>
 80058d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058d2:	b111      	cbz	r1, 80058da <_reclaim_reent+0x5e>
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 f899 	bl	8005a0c <_free_r>
 80058da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80058dc:	b111      	cbz	r1, 80058e4 <_reclaim_reent+0x68>
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 f894 	bl	8005a0c <_free_r>
 80058e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80058e6:	b111      	cbz	r1, 80058ee <_reclaim_reent+0x72>
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 f88f 	bl	8005a0c <_free_r>
 80058ee:	6a23      	ldr	r3, [r4, #32]
 80058f0:	b1b3      	cbz	r3, 8005920 <_reclaim_reent+0xa4>
 80058f2:	4620      	mov	r0, r4
 80058f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80058f8:	4718      	bx	r3
 80058fa:	5949      	ldr	r1, [r1, r5]
 80058fc:	b941      	cbnz	r1, 8005910 <_reclaim_reent+0x94>
 80058fe:	3504      	adds	r5, #4
 8005900:	69e3      	ldr	r3, [r4, #28]
 8005902:	2d80      	cmp	r5, #128	; 0x80
 8005904:	68d9      	ldr	r1, [r3, #12]
 8005906:	d1f8      	bne.n	80058fa <_reclaim_reent+0x7e>
 8005908:	4620      	mov	r0, r4
 800590a:	f000 f87f 	bl	8005a0c <_free_r>
 800590e:	e7c0      	b.n	8005892 <_reclaim_reent+0x16>
 8005910:	680e      	ldr	r6, [r1, #0]
 8005912:	4620      	mov	r0, r4
 8005914:	f000 f87a 	bl	8005a0c <_free_r>
 8005918:	4631      	mov	r1, r6
 800591a:	e7ef      	b.n	80058fc <_reclaim_reent+0x80>
 800591c:	2500      	movs	r5, #0
 800591e:	e7ef      	b.n	8005900 <_reclaim_reent+0x84>
 8005920:	bd70      	pop	{r4, r5, r6, pc}
 8005922:	bf00      	nop
 8005924:	20000068 	.word	0x20000068

08005928 <_lseek_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d07      	ldr	r5, [pc, #28]	; (8005948 <_lseek_r+0x20>)
 800592c:	4604      	mov	r4, r0
 800592e:	4608      	mov	r0, r1
 8005930:	4611      	mov	r1, r2
 8005932:	2200      	movs	r2, #0
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fb fa4c 	bl	8000dd4 <_lseek>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_lseek_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_lseek_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20004264 	.word	0x20004264

0800594c <_read_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_read_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb f9da 	bl	8000d14 <_read>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_read_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_read_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20004264 	.word	0x20004264

08005970 <_write_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	; (8005990 <_write_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb f9e5 	bl	8000d4e <_write>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_write_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_write_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20004264 	.word	0x20004264

08005994 <__errno>:
 8005994:	4b01      	ldr	r3, [pc, #4]	; (800599c <__errno+0x8>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000068 	.word	0x20000068

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4d0d      	ldr	r5, [pc, #52]	; (80059d8 <__libc_init_array+0x38>)
 80059a4:	4c0d      	ldr	r4, [pc, #52]	; (80059dc <__libc_init_array+0x3c>)
 80059a6:	1b64      	subs	r4, r4, r5
 80059a8:	10a4      	asrs	r4, r4, #2
 80059aa:	2600      	movs	r6, #0
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	4d0b      	ldr	r5, [pc, #44]	; (80059e0 <__libc_init_array+0x40>)
 80059b2:	4c0c      	ldr	r4, [pc, #48]	; (80059e4 <__libc_init_array+0x44>)
 80059b4:	f000 fee2 	bl	800677c <_init>
 80059b8:	1b64      	subs	r4, r4, r5
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	2600      	movs	r6, #0
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	08006920 	.word	0x08006920
 80059dc:	08006920 	.word	0x08006920
 80059e0:	08006920 	.word	0x08006920
 80059e4:	08006924 	.word	0x08006924

080059e8 <__retarget_lock_init_recursive>:
 80059e8:	4770      	bx	lr

080059ea <__retarget_lock_acquire_recursive>:
 80059ea:	4770      	bx	lr

080059ec <__retarget_lock_release_recursive>:
 80059ec:	4770      	bx	lr

080059ee <memcpy>:
 80059ee:	440a      	add	r2, r1
 80059f0:	4291      	cmp	r1, r2
 80059f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f6:	d100      	bne.n	80059fa <memcpy+0xc>
 80059f8:	4770      	bx	lr
 80059fa:	b510      	push	{r4, lr}
 80059fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a04:	4291      	cmp	r1, r2
 8005a06:	d1f9      	bne.n	80059fc <memcpy+0xe>
 8005a08:	bd10      	pop	{r4, pc}
	...

08005a0c <_free_r>:
 8005a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a0e:	2900      	cmp	r1, #0
 8005a10:	d044      	beq.n	8005a9c <_free_r+0x90>
 8005a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a16:	9001      	str	r0, [sp, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a1e:	bfb8      	it	lt
 8005a20:	18e4      	addlt	r4, r4, r3
 8005a22:	f000 f8df 	bl	8005be4 <__malloc_lock>
 8005a26:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <_free_r+0x94>)
 8005a28:	9801      	ldr	r0, [sp, #4]
 8005a2a:	6813      	ldr	r3, [r2, #0]
 8005a2c:	b933      	cbnz	r3, 8005a3c <_free_r+0x30>
 8005a2e:	6063      	str	r3, [r4, #4]
 8005a30:	6014      	str	r4, [r2, #0]
 8005a32:	b003      	add	sp, #12
 8005a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a38:	f000 b8da 	b.w	8005bf0 <__malloc_unlock>
 8005a3c:	42a3      	cmp	r3, r4
 8005a3e:	d908      	bls.n	8005a52 <_free_r+0x46>
 8005a40:	6825      	ldr	r5, [r4, #0]
 8005a42:	1961      	adds	r1, r4, r5
 8005a44:	428b      	cmp	r3, r1
 8005a46:	bf01      	itttt	eq
 8005a48:	6819      	ldreq	r1, [r3, #0]
 8005a4a:	685b      	ldreq	r3, [r3, #4]
 8005a4c:	1949      	addeq	r1, r1, r5
 8005a4e:	6021      	streq	r1, [r4, #0]
 8005a50:	e7ed      	b.n	8005a2e <_free_r+0x22>
 8005a52:	461a      	mov	r2, r3
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	b10b      	cbz	r3, 8005a5c <_free_r+0x50>
 8005a58:	42a3      	cmp	r3, r4
 8005a5a:	d9fa      	bls.n	8005a52 <_free_r+0x46>
 8005a5c:	6811      	ldr	r1, [r2, #0]
 8005a5e:	1855      	adds	r5, r2, r1
 8005a60:	42a5      	cmp	r5, r4
 8005a62:	d10b      	bne.n	8005a7c <_free_r+0x70>
 8005a64:	6824      	ldr	r4, [r4, #0]
 8005a66:	4421      	add	r1, r4
 8005a68:	1854      	adds	r4, r2, r1
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	6011      	str	r1, [r2, #0]
 8005a6e:	d1e0      	bne.n	8005a32 <_free_r+0x26>
 8005a70:	681c      	ldr	r4, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	6053      	str	r3, [r2, #4]
 8005a76:	440c      	add	r4, r1
 8005a78:	6014      	str	r4, [r2, #0]
 8005a7a:	e7da      	b.n	8005a32 <_free_r+0x26>
 8005a7c:	d902      	bls.n	8005a84 <_free_r+0x78>
 8005a7e:	230c      	movs	r3, #12
 8005a80:	6003      	str	r3, [r0, #0]
 8005a82:	e7d6      	b.n	8005a32 <_free_r+0x26>
 8005a84:	6825      	ldr	r5, [r4, #0]
 8005a86:	1961      	adds	r1, r4, r5
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	bf04      	itt	eq
 8005a8c:	6819      	ldreq	r1, [r3, #0]
 8005a8e:	685b      	ldreq	r3, [r3, #4]
 8005a90:	6063      	str	r3, [r4, #4]
 8005a92:	bf04      	itt	eq
 8005a94:	1949      	addeq	r1, r1, r5
 8005a96:	6021      	streq	r1, [r4, #0]
 8005a98:	6054      	str	r4, [r2, #4]
 8005a9a:	e7ca      	b.n	8005a32 <_free_r+0x26>
 8005a9c:	b003      	add	sp, #12
 8005a9e:	bd30      	pop	{r4, r5, pc}
 8005aa0:	2000426c 	.word	0x2000426c

08005aa4 <sbrk_aligned>:
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	4e0e      	ldr	r6, [pc, #56]	; (8005ae0 <sbrk_aligned+0x3c>)
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	6831      	ldr	r1, [r6, #0]
 8005aac:	4605      	mov	r5, r0
 8005aae:	b911      	cbnz	r1, 8005ab6 <sbrk_aligned+0x12>
 8005ab0:	f000 fe1c 	bl	80066ec <_sbrk_r>
 8005ab4:	6030      	str	r0, [r6, #0]
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f000 fe17 	bl	80066ec <_sbrk_r>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	d00a      	beq.n	8005ad8 <sbrk_aligned+0x34>
 8005ac2:	1cc4      	adds	r4, r0, #3
 8005ac4:	f024 0403 	bic.w	r4, r4, #3
 8005ac8:	42a0      	cmp	r0, r4
 8005aca:	d007      	beq.n	8005adc <sbrk_aligned+0x38>
 8005acc:	1a21      	subs	r1, r4, r0
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 fe0c 	bl	80066ec <_sbrk_r>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d101      	bne.n	8005adc <sbrk_aligned+0x38>
 8005ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8005adc:	4620      	mov	r0, r4
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	20004270 	.word	0x20004270

08005ae4 <_malloc_r>:
 8005ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae8:	1ccd      	adds	r5, r1, #3
 8005aea:	f025 0503 	bic.w	r5, r5, #3
 8005aee:	3508      	adds	r5, #8
 8005af0:	2d0c      	cmp	r5, #12
 8005af2:	bf38      	it	cc
 8005af4:	250c      	movcc	r5, #12
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	4607      	mov	r7, r0
 8005afa:	db01      	blt.n	8005b00 <_malloc_r+0x1c>
 8005afc:	42a9      	cmp	r1, r5
 8005afe:	d905      	bls.n	8005b0c <_malloc_r+0x28>
 8005b00:	230c      	movs	r3, #12
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	2600      	movs	r6, #0
 8005b06:	4630      	mov	r0, r6
 8005b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005be0 <_malloc_r+0xfc>
 8005b10:	f000 f868 	bl	8005be4 <__malloc_lock>
 8005b14:	f8d8 3000 	ldr.w	r3, [r8]
 8005b18:	461c      	mov	r4, r3
 8005b1a:	bb5c      	cbnz	r4, 8005b74 <_malloc_r+0x90>
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f7ff ffc0 	bl	8005aa4 <sbrk_aligned>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	4604      	mov	r4, r0
 8005b28:	d155      	bne.n	8005bd6 <_malloc_r+0xf2>
 8005b2a:	f8d8 4000 	ldr.w	r4, [r8]
 8005b2e:	4626      	mov	r6, r4
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	d145      	bne.n	8005bc0 <_malloc_r+0xdc>
 8005b34:	2c00      	cmp	r4, #0
 8005b36:	d048      	beq.n	8005bca <_malloc_r+0xe6>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	eb04 0903 	add.w	r9, r4, r3
 8005b42:	f000 fdd3 	bl	80066ec <_sbrk_r>
 8005b46:	4581      	cmp	r9, r0
 8005b48:	d13f      	bne.n	8005bca <_malloc_r+0xe6>
 8005b4a:	6821      	ldr	r1, [r4, #0]
 8005b4c:	1a6d      	subs	r5, r5, r1
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4638      	mov	r0, r7
 8005b52:	f7ff ffa7 	bl	8005aa4 <sbrk_aligned>
 8005b56:	3001      	adds	r0, #1
 8005b58:	d037      	beq.n	8005bca <_malloc_r+0xe6>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	442b      	add	r3, r5
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	f8d8 3000 	ldr.w	r3, [r8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d038      	beq.n	8005bda <_malloc_r+0xf6>
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	42a2      	cmp	r2, r4
 8005b6c:	d12b      	bne.n	8005bc6 <_malloc_r+0xe2>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	e00f      	b.n	8005b94 <_malloc_r+0xb0>
 8005b74:	6822      	ldr	r2, [r4, #0]
 8005b76:	1b52      	subs	r2, r2, r5
 8005b78:	d41f      	bmi.n	8005bba <_malloc_r+0xd6>
 8005b7a:	2a0b      	cmp	r2, #11
 8005b7c:	d917      	bls.n	8005bae <_malloc_r+0xca>
 8005b7e:	1961      	adds	r1, r4, r5
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	6025      	str	r5, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	6059      	strne	r1, [r3, #4]
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	bf08      	it	eq
 8005b8c:	f8c8 1000 	streq.w	r1, [r8]
 8005b90:	5162      	str	r2, [r4, r5]
 8005b92:	604b      	str	r3, [r1, #4]
 8005b94:	4638      	mov	r0, r7
 8005b96:	f104 060b 	add.w	r6, r4, #11
 8005b9a:	f000 f829 	bl	8005bf0 <__malloc_unlock>
 8005b9e:	f026 0607 	bic.w	r6, r6, #7
 8005ba2:	1d23      	adds	r3, r4, #4
 8005ba4:	1af2      	subs	r2, r6, r3
 8005ba6:	d0ae      	beq.n	8005b06 <_malloc_r+0x22>
 8005ba8:	1b9b      	subs	r3, r3, r6
 8005baa:	50a3      	str	r3, [r4, r2]
 8005bac:	e7ab      	b.n	8005b06 <_malloc_r+0x22>
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	6862      	ldr	r2, [r4, #4]
 8005bb2:	d1dd      	bne.n	8005b70 <_malloc_r+0x8c>
 8005bb4:	f8c8 2000 	str.w	r2, [r8]
 8005bb8:	e7ec      	b.n	8005b94 <_malloc_r+0xb0>
 8005bba:	4623      	mov	r3, r4
 8005bbc:	6864      	ldr	r4, [r4, #4]
 8005bbe:	e7ac      	b.n	8005b1a <_malloc_r+0x36>
 8005bc0:	4634      	mov	r4, r6
 8005bc2:	6876      	ldr	r6, [r6, #4]
 8005bc4:	e7b4      	b.n	8005b30 <_malloc_r+0x4c>
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	e7cc      	b.n	8005b64 <_malloc_r+0x80>
 8005bca:	230c      	movs	r3, #12
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f000 f80e 	bl	8005bf0 <__malloc_unlock>
 8005bd4:	e797      	b.n	8005b06 <_malloc_r+0x22>
 8005bd6:	6025      	str	r5, [r4, #0]
 8005bd8:	e7dc      	b.n	8005b94 <_malloc_r+0xb0>
 8005bda:	605b      	str	r3, [r3, #4]
 8005bdc:	deff      	udf	#255	; 0xff
 8005bde:	bf00      	nop
 8005be0:	2000426c 	.word	0x2000426c

08005be4 <__malloc_lock>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__malloc_lock+0x8>)
 8005be6:	f7ff bf00 	b.w	80059ea <__retarget_lock_acquire_recursive>
 8005bea:	bf00      	nop
 8005bec:	20004268 	.word	0x20004268

08005bf0 <__malloc_unlock>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__malloc_unlock+0x8>)
 8005bf2:	f7ff befb 	b.w	80059ec <__retarget_lock_release_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20004268 	.word	0x20004268

08005bfc <__ssputs_r>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	688e      	ldr	r6, [r1, #8]
 8005c02:	461f      	mov	r7, r3
 8005c04:	42be      	cmp	r6, r7
 8005c06:	680b      	ldr	r3, [r1, #0]
 8005c08:	4682      	mov	sl, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4690      	mov	r8, r2
 8005c0e:	d82c      	bhi.n	8005c6a <__ssputs_r+0x6e>
 8005c10:	898a      	ldrh	r2, [r1, #12]
 8005c12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c16:	d026      	beq.n	8005c66 <__ssputs_r+0x6a>
 8005c18:	6965      	ldr	r5, [r4, #20]
 8005c1a:	6909      	ldr	r1, [r1, #16]
 8005c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c20:	eba3 0901 	sub.w	r9, r3, r1
 8005c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c28:	1c7b      	adds	r3, r7, #1
 8005c2a:	444b      	add	r3, r9
 8005c2c:	106d      	asrs	r5, r5, #1
 8005c2e:	429d      	cmp	r5, r3
 8005c30:	bf38      	it	cc
 8005c32:	461d      	movcc	r5, r3
 8005c34:	0553      	lsls	r3, r2, #21
 8005c36:	d527      	bpl.n	8005c88 <__ssputs_r+0x8c>
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f7ff ff53 	bl	8005ae4 <_malloc_r>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	b360      	cbz	r0, 8005c9c <__ssputs_r+0xa0>
 8005c42:	6921      	ldr	r1, [r4, #16]
 8005c44:	464a      	mov	r2, r9
 8005c46:	f7ff fed2 	bl	80059ee <memcpy>
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	6126      	str	r6, [r4, #16]
 8005c58:	6165      	str	r5, [r4, #20]
 8005c5a:	444e      	add	r6, r9
 8005c5c:	eba5 0509 	sub.w	r5, r5, r9
 8005c60:	6026      	str	r6, [r4, #0]
 8005c62:	60a5      	str	r5, [r4, #8]
 8005c64:	463e      	mov	r6, r7
 8005c66:	42be      	cmp	r6, r7
 8005c68:	d900      	bls.n	8005c6c <__ssputs_r+0x70>
 8005c6a:	463e      	mov	r6, r7
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	4632      	mov	r2, r6
 8005c70:	4641      	mov	r1, r8
 8005c72:	f000 fcff 	bl	8006674 <memmove>
 8005c76:	68a3      	ldr	r3, [r4, #8]
 8005c78:	1b9b      	subs	r3, r3, r6
 8005c7a:	60a3      	str	r3, [r4, #8]
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	4433      	add	r3, r6
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	2000      	movs	r0, #0
 8005c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c88:	462a      	mov	r2, r5
 8005c8a:	f000 fd3f 	bl	800670c <_realloc_r>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d1e0      	bne.n	8005c56 <__ssputs_r+0x5a>
 8005c94:	6921      	ldr	r1, [r4, #16]
 8005c96:	4650      	mov	r0, sl
 8005c98:	f7ff feb8 	bl	8005a0c <_free_r>
 8005c9c:	230c      	movs	r3, #12
 8005c9e:	f8ca 3000 	str.w	r3, [sl]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cae:	e7e9      	b.n	8005c84 <__ssputs_r+0x88>

08005cb0 <_svfiprintf_r>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	4698      	mov	r8, r3
 8005cb6:	898b      	ldrh	r3, [r1, #12]
 8005cb8:	061b      	lsls	r3, r3, #24
 8005cba:	b09d      	sub	sp, #116	; 0x74
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	d50e      	bpl.n	8005ce2 <_svfiprintf_r+0x32>
 8005cc4:	690b      	ldr	r3, [r1, #16]
 8005cc6:	b963      	cbnz	r3, 8005ce2 <_svfiprintf_r+0x32>
 8005cc8:	2140      	movs	r1, #64	; 0x40
 8005cca:	f7ff ff0b 	bl	8005ae4 <_malloc_r>
 8005cce:	6028      	str	r0, [r5, #0]
 8005cd0:	6128      	str	r0, [r5, #16]
 8005cd2:	b920      	cbnz	r0, 8005cde <_svfiprintf_r+0x2e>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e0d0      	b.n	8005e80 <_svfiprintf_r+0x1d0>
 8005cde:	2340      	movs	r3, #64	; 0x40
 8005ce0:	616b      	str	r3, [r5, #20]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce6:	2320      	movs	r3, #32
 8005ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cf0:	2330      	movs	r3, #48	; 0x30
 8005cf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e98 <_svfiprintf_r+0x1e8>
 8005cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cfa:	f04f 0901 	mov.w	r9, #1
 8005cfe:	4623      	mov	r3, r4
 8005d00:	469a      	mov	sl, r3
 8005d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d06:	b10a      	cbz	r2, 8005d0c <_svfiprintf_r+0x5c>
 8005d08:	2a25      	cmp	r2, #37	; 0x25
 8005d0a:	d1f9      	bne.n	8005d00 <_svfiprintf_r+0x50>
 8005d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d10:	d00b      	beq.n	8005d2a <_svfiprintf_r+0x7a>
 8005d12:	465b      	mov	r3, fp
 8005d14:	4622      	mov	r2, r4
 8005d16:	4629      	mov	r1, r5
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7ff ff6f 	bl	8005bfc <__ssputs_r>
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f000 80a9 	beq.w	8005e76 <_svfiprintf_r+0x1c6>
 8005d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d26:	445a      	add	r2, fp
 8005d28:	9209      	str	r2, [sp, #36]	; 0x24
 8005d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 80a1 	beq.w	8005e76 <_svfiprintf_r+0x1c6>
 8005d34:	2300      	movs	r3, #0
 8005d36:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d3e:	f10a 0a01 	add.w	sl, sl, #1
 8005d42:	9304      	str	r3, [sp, #16]
 8005d44:	9307      	str	r3, [sp, #28]
 8005d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005d4c:	4654      	mov	r4, sl
 8005d4e:	2205      	movs	r2, #5
 8005d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d54:	4850      	ldr	r0, [pc, #320]	; (8005e98 <_svfiprintf_r+0x1e8>)
 8005d56:	f7fa fa43 	bl	80001e0 <memchr>
 8005d5a:	9a04      	ldr	r2, [sp, #16]
 8005d5c:	b9d8      	cbnz	r0, 8005d96 <_svfiprintf_r+0xe6>
 8005d5e:	06d0      	lsls	r0, r2, #27
 8005d60:	bf44      	itt	mi
 8005d62:	2320      	movmi	r3, #32
 8005d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d68:	0711      	lsls	r1, r2, #28
 8005d6a:	bf44      	itt	mi
 8005d6c:	232b      	movmi	r3, #43	; 0x2b
 8005d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d72:	f89a 3000 	ldrb.w	r3, [sl]
 8005d76:	2b2a      	cmp	r3, #42	; 0x2a
 8005d78:	d015      	beq.n	8005da6 <_svfiprintf_r+0xf6>
 8005d7a:	9a07      	ldr	r2, [sp, #28]
 8005d7c:	4654      	mov	r4, sl
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f04f 0c0a 	mov.w	ip, #10
 8005d84:	4621      	mov	r1, r4
 8005d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d8a:	3b30      	subs	r3, #48	; 0x30
 8005d8c:	2b09      	cmp	r3, #9
 8005d8e:	d94d      	bls.n	8005e2c <_svfiprintf_r+0x17c>
 8005d90:	b1b0      	cbz	r0, 8005dc0 <_svfiprintf_r+0x110>
 8005d92:	9207      	str	r2, [sp, #28]
 8005d94:	e014      	b.n	8005dc0 <_svfiprintf_r+0x110>
 8005d96:	eba0 0308 	sub.w	r3, r0, r8
 8005d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	46a2      	mov	sl, r4
 8005da4:	e7d2      	b.n	8005d4c <_svfiprintf_r+0x9c>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	1d19      	adds	r1, r3, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	9103      	str	r1, [sp, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfbb      	ittet	lt
 8005db2:	425b      	neglt	r3, r3
 8005db4:	f042 0202 	orrlt.w	r2, r2, #2
 8005db8:	9307      	strge	r3, [sp, #28]
 8005dba:	9307      	strlt	r3, [sp, #28]
 8005dbc:	bfb8      	it	lt
 8005dbe:	9204      	strlt	r2, [sp, #16]
 8005dc0:	7823      	ldrb	r3, [r4, #0]
 8005dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8005dc4:	d10c      	bne.n	8005de0 <_svfiprintf_r+0x130>
 8005dc6:	7863      	ldrb	r3, [r4, #1]
 8005dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dca:	d134      	bne.n	8005e36 <_svfiprintf_r+0x186>
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	1d1a      	adds	r2, r3, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	9203      	str	r2, [sp, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bfb8      	it	lt
 8005dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ddc:	3402      	adds	r4, #2
 8005dde:	9305      	str	r3, [sp, #20]
 8005de0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005ea8 <_svfiprintf_r+0x1f8>
 8005de4:	7821      	ldrb	r1, [r4, #0]
 8005de6:	2203      	movs	r2, #3
 8005de8:	4650      	mov	r0, sl
 8005dea:	f7fa f9f9 	bl	80001e0 <memchr>
 8005dee:	b138      	cbz	r0, 8005e00 <_svfiprintf_r+0x150>
 8005df0:	9b04      	ldr	r3, [sp, #16]
 8005df2:	eba0 000a 	sub.w	r0, r0, sl
 8005df6:	2240      	movs	r2, #64	; 0x40
 8005df8:	4082      	lsls	r2, r0
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	3401      	adds	r4, #1
 8005dfe:	9304      	str	r3, [sp, #16]
 8005e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e04:	4825      	ldr	r0, [pc, #148]	; (8005e9c <_svfiprintf_r+0x1ec>)
 8005e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e0a:	2206      	movs	r2, #6
 8005e0c:	f7fa f9e8 	bl	80001e0 <memchr>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d038      	beq.n	8005e86 <_svfiprintf_r+0x1d6>
 8005e14:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <_svfiprintf_r+0x1f0>)
 8005e16:	bb1b      	cbnz	r3, 8005e60 <_svfiprintf_r+0x1b0>
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	3307      	adds	r3, #7
 8005e1c:	f023 0307 	bic.w	r3, r3, #7
 8005e20:	3308      	adds	r3, #8
 8005e22:	9303      	str	r3, [sp, #12]
 8005e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e26:	4433      	add	r3, r6
 8005e28:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2a:	e768      	b.n	8005cfe <_svfiprintf_r+0x4e>
 8005e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e30:	460c      	mov	r4, r1
 8005e32:	2001      	movs	r0, #1
 8005e34:	e7a6      	b.n	8005d84 <_svfiprintf_r+0xd4>
 8005e36:	2300      	movs	r3, #0
 8005e38:	3401      	adds	r4, #1
 8005e3a:	9305      	str	r3, [sp, #20]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f04f 0c0a 	mov.w	ip, #10
 8005e42:	4620      	mov	r0, r4
 8005e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e48:	3a30      	subs	r2, #48	; 0x30
 8005e4a:	2a09      	cmp	r2, #9
 8005e4c:	d903      	bls.n	8005e56 <_svfiprintf_r+0x1a6>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0c6      	beq.n	8005de0 <_svfiprintf_r+0x130>
 8005e52:	9105      	str	r1, [sp, #20]
 8005e54:	e7c4      	b.n	8005de0 <_svfiprintf_r+0x130>
 8005e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e7f0      	b.n	8005e42 <_svfiprintf_r+0x192>
 8005e60:	ab03      	add	r3, sp, #12
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	462a      	mov	r2, r5
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <_svfiprintf_r+0x1f4>)
 8005e68:	a904      	add	r1, sp, #16
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	f3af 8000 	nop.w
 8005e70:	1c42      	adds	r2, r0, #1
 8005e72:	4606      	mov	r6, r0
 8005e74:	d1d6      	bne.n	8005e24 <_svfiprintf_r+0x174>
 8005e76:	89ab      	ldrh	r3, [r5, #12]
 8005e78:	065b      	lsls	r3, r3, #25
 8005e7a:	f53f af2d 	bmi.w	8005cd8 <_svfiprintf_r+0x28>
 8005e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e80:	b01d      	add	sp, #116	; 0x74
 8005e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	ab03      	add	r3, sp, #12
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <_svfiprintf_r+0x1f4>)
 8005e8e:	a904      	add	r1, sp, #16
 8005e90:	4638      	mov	r0, r7
 8005e92:	f000 f9bd 	bl	8006210 <_printf_i>
 8005e96:	e7eb      	b.n	8005e70 <_svfiprintf_r+0x1c0>
 8005e98:	080068e4 	.word	0x080068e4
 8005e9c:	080068ee 	.word	0x080068ee
 8005ea0:	00000000 	.word	0x00000000
 8005ea4:	08005bfd 	.word	0x08005bfd
 8005ea8:	080068ea 	.word	0x080068ea

08005eac <__sfputc_r>:
 8005eac:	6893      	ldr	r3, [r2, #8]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	b410      	push	{r4}
 8005eb4:	6093      	str	r3, [r2, #8]
 8005eb6:	da08      	bge.n	8005eca <__sfputc_r+0x1e>
 8005eb8:	6994      	ldr	r4, [r2, #24]
 8005eba:	42a3      	cmp	r3, r4
 8005ebc:	db01      	blt.n	8005ec2 <__sfputc_r+0x16>
 8005ebe:	290a      	cmp	r1, #10
 8005ec0:	d103      	bne.n	8005eca <__sfputc_r+0x1e>
 8005ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ec6:	f7ff bc2c 	b.w	8005722 <__swbuf_r>
 8005eca:	6813      	ldr	r3, [r2, #0]
 8005ecc:	1c58      	adds	r0, r3, #1
 8005ece:	6010      	str	r0, [r2, #0]
 8005ed0:	7019      	strb	r1, [r3, #0]
 8005ed2:	4608      	mov	r0, r1
 8005ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <__sfputs_r>:
 8005eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005edc:	4606      	mov	r6, r0
 8005ede:	460f      	mov	r7, r1
 8005ee0:	4614      	mov	r4, r2
 8005ee2:	18d5      	adds	r5, r2, r3
 8005ee4:	42ac      	cmp	r4, r5
 8005ee6:	d101      	bne.n	8005eec <__sfputs_r+0x12>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e007      	b.n	8005efc <__sfputs_r+0x22>
 8005eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef0:	463a      	mov	r2, r7
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff ffda 	bl	8005eac <__sfputc_r>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d1f3      	bne.n	8005ee4 <__sfputs_r+0xa>
 8005efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f00 <_vfiprintf_r>:
 8005f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	460d      	mov	r5, r1
 8005f06:	b09d      	sub	sp, #116	; 0x74
 8005f08:	4614      	mov	r4, r2
 8005f0a:	4698      	mov	r8, r3
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	b118      	cbz	r0, 8005f18 <_vfiprintf_r+0x18>
 8005f10:	6a03      	ldr	r3, [r0, #32]
 8005f12:	b90b      	cbnz	r3, 8005f18 <_vfiprintf_r+0x18>
 8005f14:	f7ff fafe 	bl	8005514 <__sinit>
 8005f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f1a:	07d9      	lsls	r1, r3, #31
 8005f1c:	d405      	bmi.n	8005f2a <_vfiprintf_r+0x2a>
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	059a      	lsls	r2, r3, #22
 8005f22:	d402      	bmi.n	8005f2a <_vfiprintf_r+0x2a>
 8005f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f26:	f7ff fd60 	bl	80059ea <__retarget_lock_acquire_recursive>
 8005f2a:	89ab      	ldrh	r3, [r5, #12]
 8005f2c:	071b      	lsls	r3, r3, #28
 8005f2e:	d501      	bpl.n	8005f34 <_vfiprintf_r+0x34>
 8005f30:	692b      	ldr	r3, [r5, #16]
 8005f32:	b99b      	cbnz	r3, 8005f5c <_vfiprintf_r+0x5c>
 8005f34:	4629      	mov	r1, r5
 8005f36:	4630      	mov	r0, r6
 8005f38:	f7ff fc30 	bl	800579c <__swsetup_r>
 8005f3c:	b170      	cbz	r0, 8005f5c <_vfiprintf_r+0x5c>
 8005f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f40:	07dc      	lsls	r4, r3, #31
 8005f42:	d504      	bpl.n	8005f4e <_vfiprintf_r+0x4e>
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	b01d      	add	sp, #116	; 0x74
 8005f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4e:	89ab      	ldrh	r3, [r5, #12]
 8005f50:	0598      	lsls	r0, r3, #22
 8005f52:	d4f7      	bmi.n	8005f44 <_vfiprintf_r+0x44>
 8005f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f56:	f7ff fd49 	bl	80059ec <__retarget_lock_release_recursive>
 8005f5a:	e7f3      	b.n	8005f44 <_vfiprintf_r+0x44>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f60:	2320      	movs	r3, #32
 8005f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f6a:	2330      	movs	r3, #48	; 0x30
 8005f6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006120 <_vfiprintf_r+0x220>
 8005f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f74:	f04f 0901 	mov.w	r9, #1
 8005f78:	4623      	mov	r3, r4
 8005f7a:	469a      	mov	sl, r3
 8005f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f80:	b10a      	cbz	r2, 8005f86 <_vfiprintf_r+0x86>
 8005f82:	2a25      	cmp	r2, #37	; 0x25
 8005f84:	d1f9      	bne.n	8005f7a <_vfiprintf_r+0x7a>
 8005f86:	ebba 0b04 	subs.w	fp, sl, r4
 8005f8a:	d00b      	beq.n	8005fa4 <_vfiprintf_r+0xa4>
 8005f8c:	465b      	mov	r3, fp
 8005f8e:	4622      	mov	r2, r4
 8005f90:	4629      	mov	r1, r5
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7ff ffa1 	bl	8005eda <__sfputs_r>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f000 80a9 	beq.w	80060f0 <_vfiprintf_r+0x1f0>
 8005f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa0:	445a      	add	r2, fp
 8005fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8005fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80a1 	beq.w	80060f0 <_vfiprintf_r+0x1f0>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fb8:	f10a 0a01 	add.w	sl, sl, #1
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8005fc6:	4654      	mov	r4, sl
 8005fc8:	2205      	movs	r2, #5
 8005fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fce:	4854      	ldr	r0, [pc, #336]	; (8006120 <_vfiprintf_r+0x220>)
 8005fd0:	f7fa f906 	bl	80001e0 <memchr>
 8005fd4:	9a04      	ldr	r2, [sp, #16]
 8005fd6:	b9d8      	cbnz	r0, 8006010 <_vfiprintf_r+0x110>
 8005fd8:	06d1      	lsls	r1, r2, #27
 8005fda:	bf44      	itt	mi
 8005fdc:	2320      	movmi	r3, #32
 8005fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fe2:	0713      	lsls	r3, r2, #28
 8005fe4:	bf44      	itt	mi
 8005fe6:	232b      	movmi	r3, #43	; 0x2b
 8005fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fec:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff2:	d015      	beq.n	8006020 <_vfiprintf_r+0x120>
 8005ff4:	9a07      	ldr	r2, [sp, #28]
 8005ff6:	4654      	mov	r4, sl
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	f04f 0c0a 	mov.w	ip, #10
 8005ffe:	4621      	mov	r1, r4
 8006000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006004:	3b30      	subs	r3, #48	; 0x30
 8006006:	2b09      	cmp	r3, #9
 8006008:	d94d      	bls.n	80060a6 <_vfiprintf_r+0x1a6>
 800600a:	b1b0      	cbz	r0, 800603a <_vfiprintf_r+0x13a>
 800600c:	9207      	str	r2, [sp, #28]
 800600e:	e014      	b.n	800603a <_vfiprintf_r+0x13a>
 8006010:	eba0 0308 	sub.w	r3, r0, r8
 8006014:	fa09 f303 	lsl.w	r3, r9, r3
 8006018:	4313      	orrs	r3, r2
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	46a2      	mov	sl, r4
 800601e:	e7d2      	b.n	8005fc6 <_vfiprintf_r+0xc6>
 8006020:	9b03      	ldr	r3, [sp, #12]
 8006022:	1d19      	adds	r1, r3, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	9103      	str	r1, [sp, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	bfbb      	ittet	lt
 800602c:	425b      	neglt	r3, r3
 800602e:	f042 0202 	orrlt.w	r2, r2, #2
 8006032:	9307      	strge	r3, [sp, #28]
 8006034:	9307      	strlt	r3, [sp, #28]
 8006036:	bfb8      	it	lt
 8006038:	9204      	strlt	r2, [sp, #16]
 800603a:	7823      	ldrb	r3, [r4, #0]
 800603c:	2b2e      	cmp	r3, #46	; 0x2e
 800603e:	d10c      	bne.n	800605a <_vfiprintf_r+0x15a>
 8006040:	7863      	ldrb	r3, [r4, #1]
 8006042:	2b2a      	cmp	r3, #42	; 0x2a
 8006044:	d134      	bne.n	80060b0 <_vfiprintf_r+0x1b0>
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	1d1a      	adds	r2, r3, #4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	9203      	str	r2, [sp, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	bfb8      	it	lt
 8006052:	f04f 33ff 	movlt.w	r3, #4294967295
 8006056:	3402      	adds	r4, #2
 8006058:	9305      	str	r3, [sp, #20]
 800605a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006130 <_vfiprintf_r+0x230>
 800605e:	7821      	ldrb	r1, [r4, #0]
 8006060:	2203      	movs	r2, #3
 8006062:	4650      	mov	r0, sl
 8006064:	f7fa f8bc 	bl	80001e0 <memchr>
 8006068:	b138      	cbz	r0, 800607a <_vfiprintf_r+0x17a>
 800606a:	9b04      	ldr	r3, [sp, #16]
 800606c:	eba0 000a 	sub.w	r0, r0, sl
 8006070:	2240      	movs	r2, #64	; 0x40
 8006072:	4082      	lsls	r2, r0
 8006074:	4313      	orrs	r3, r2
 8006076:	3401      	adds	r4, #1
 8006078:	9304      	str	r3, [sp, #16]
 800607a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607e:	4829      	ldr	r0, [pc, #164]	; (8006124 <_vfiprintf_r+0x224>)
 8006080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006084:	2206      	movs	r2, #6
 8006086:	f7fa f8ab 	bl	80001e0 <memchr>
 800608a:	2800      	cmp	r0, #0
 800608c:	d03f      	beq.n	800610e <_vfiprintf_r+0x20e>
 800608e:	4b26      	ldr	r3, [pc, #152]	; (8006128 <_vfiprintf_r+0x228>)
 8006090:	bb1b      	cbnz	r3, 80060da <_vfiprintf_r+0x1da>
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	3307      	adds	r3, #7
 8006096:	f023 0307 	bic.w	r3, r3, #7
 800609a:	3308      	adds	r3, #8
 800609c:	9303      	str	r3, [sp, #12]
 800609e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a0:	443b      	add	r3, r7
 80060a2:	9309      	str	r3, [sp, #36]	; 0x24
 80060a4:	e768      	b.n	8005f78 <_vfiprintf_r+0x78>
 80060a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80060aa:	460c      	mov	r4, r1
 80060ac:	2001      	movs	r0, #1
 80060ae:	e7a6      	b.n	8005ffe <_vfiprintf_r+0xfe>
 80060b0:	2300      	movs	r3, #0
 80060b2:	3401      	adds	r4, #1
 80060b4:	9305      	str	r3, [sp, #20]
 80060b6:	4619      	mov	r1, r3
 80060b8:	f04f 0c0a 	mov.w	ip, #10
 80060bc:	4620      	mov	r0, r4
 80060be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060c2:	3a30      	subs	r2, #48	; 0x30
 80060c4:	2a09      	cmp	r2, #9
 80060c6:	d903      	bls.n	80060d0 <_vfiprintf_r+0x1d0>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0c6      	beq.n	800605a <_vfiprintf_r+0x15a>
 80060cc:	9105      	str	r1, [sp, #20]
 80060ce:	e7c4      	b.n	800605a <_vfiprintf_r+0x15a>
 80060d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80060d4:	4604      	mov	r4, r0
 80060d6:	2301      	movs	r3, #1
 80060d8:	e7f0      	b.n	80060bc <_vfiprintf_r+0x1bc>
 80060da:	ab03      	add	r3, sp, #12
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	462a      	mov	r2, r5
 80060e0:	4b12      	ldr	r3, [pc, #72]	; (800612c <_vfiprintf_r+0x22c>)
 80060e2:	a904      	add	r1, sp, #16
 80060e4:	4630      	mov	r0, r6
 80060e6:	f3af 8000 	nop.w
 80060ea:	4607      	mov	r7, r0
 80060ec:	1c78      	adds	r0, r7, #1
 80060ee:	d1d6      	bne.n	800609e <_vfiprintf_r+0x19e>
 80060f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060f2:	07d9      	lsls	r1, r3, #31
 80060f4:	d405      	bmi.n	8006102 <_vfiprintf_r+0x202>
 80060f6:	89ab      	ldrh	r3, [r5, #12]
 80060f8:	059a      	lsls	r2, r3, #22
 80060fa:	d402      	bmi.n	8006102 <_vfiprintf_r+0x202>
 80060fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060fe:	f7ff fc75 	bl	80059ec <__retarget_lock_release_recursive>
 8006102:	89ab      	ldrh	r3, [r5, #12]
 8006104:	065b      	lsls	r3, r3, #25
 8006106:	f53f af1d 	bmi.w	8005f44 <_vfiprintf_r+0x44>
 800610a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800610c:	e71c      	b.n	8005f48 <_vfiprintf_r+0x48>
 800610e:	ab03      	add	r3, sp, #12
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	462a      	mov	r2, r5
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <_vfiprintf_r+0x22c>)
 8006116:	a904      	add	r1, sp, #16
 8006118:	4630      	mov	r0, r6
 800611a:	f000 f879 	bl	8006210 <_printf_i>
 800611e:	e7e4      	b.n	80060ea <_vfiprintf_r+0x1ea>
 8006120:	080068e4 	.word	0x080068e4
 8006124:	080068ee 	.word	0x080068ee
 8006128:	00000000 	.word	0x00000000
 800612c:	08005edb 	.word	0x08005edb
 8006130:	080068ea 	.word	0x080068ea

08006134 <_printf_common>:
 8006134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	4616      	mov	r6, r2
 800613a:	4699      	mov	r9, r3
 800613c:	688a      	ldr	r2, [r1, #8]
 800613e:	690b      	ldr	r3, [r1, #16]
 8006140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006144:	4293      	cmp	r3, r2
 8006146:	bfb8      	it	lt
 8006148:	4613      	movlt	r3, r2
 800614a:	6033      	str	r3, [r6, #0]
 800614c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006150:	4607      	mov	r7, r0
 8006152:	460c      	mov	r4, r1
 8006154:	b10a      	cbz	r2, 800615a <_printf_common+0x26>
 8006156:	3301      	adds	r3, #1
 8006158:	6033      	str	r3, [r6, #0]
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	0699      	lsls	r1, r3, #26
 800615e:	bf42      	ittt	mi
 8006160:	6833      	ldrmi	r3, [r6, #0]
 8006162:	3302      	addmi	r3, #2
 8006164:	6033      	strmi	r3, [r6, #0]
 8006166:	6825      	ldr	r5, [r4, #0]
 8006168:	f015 0506 	ands.w	r5, r5, #6
 800616c:	d106      	bne.n	800617c <_printf_common+0x48>
 800616e:	f104 0a19 	add.w	sl, r4, #25
 8006172:	68e3      	ldr	r3, [r4, #12]
 8006174:	6832      	ldr	r2, [r6, #0]
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	42ab      	cmp	r3, r5
 800617a:	dc26      	bgt.n	80061ca <_printf_common+0x96>
 800617c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006180:	1e13      	subs	r3, r2, #0
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	bf18      	it	ne
 8006186:	2301      	movne	r3, #1
 8006188:	0692      	lsls	r2, r2, #26
 800618a:	d42b      	bmi.n	80061e4 <_printf_common+0xb0>
 800618c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006190:	4649      	mov	r1, r9
 8006192:	4638      	mov	r0, r7
 8006194:	47c0      	blx	r8
 8006196:	3001      	adds	r0, #1
 8006198:	d01e      	beq.n	80061d8 <_printf_common+0xa4>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	6922      	ldr	r2, [r4, #16]
 800619e:	f003 0306 	and.w	r3, r3, #6
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	bf02      	ittt	eq
 80061a6:	68e5      	ldreq	r5, [r4, #12]
 80061a8:	6833      	ldreq	r3, [r6, #0]
 80061aa:	1aed      	subeq	r5, r5, r3
 80061ac:	68a3      	ldr	r3, [r4, #8]
 80061ae:	bf0c      	ite	eq
 80061b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b4:	2500      	movne	r5, #0
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bfc4      	itt	gt
 80061ba:	1a9b      	subgt	r3, r3, r2
 80061bc:	18ed      	addgt	r5, r5, r3
 80061be:	2600      	movs	r6, #0
 80061c0:	341a      	adds	r4, #26
 80061c2:	42b5      	cmp	r5, r6
 80061c4:	d11a      	bne.n	80061fc <_printf_common+0xc8>
 80061c6:	2000      	movs	r0, #0
 80061c8:	e008      	b.n	80061dc <_printf_common+0xa8>
 80061ca:	2301      	movs	r3, #1
 80061cc:	4652      	mov	r2, sl
 80061ce:	4649      	mov	r1, r9
 80061d0:	4638      	mov	r0, r7
 80061d2:	47c0      	blx	r8
 80061d4:	3001      	adds	r0, #1
 80061d6:	d103      	bne.n	80061e0 <_printf_common+0xac>
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e0:	3501      	adds	r5, #1
 80061e2:	e7c6      	b.n	8006172 <_printf_common+0x3e>
 80061e4:	18e1      	adds	r1, r4, r3
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	2030      	movs	r0, #48	; 0x30
 80061ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ee:	4422      	add	r2, r4
 80061f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061f8:	3302      	adds	r3, #2
 80061fa:	e7c7      	b.n	800618c <_printf_common+0x58>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4622      	mov	r2, r4
 8006200:	4649      	mov	r1, r9
 8006202:	4638      	mov	r0, r7
 8006204:	47c0      	blx	r8
 8006206:	3001      	adds	r0, #1
 8006208:	d0e6      	beq.n	80061d8 <_printf_common+0xa4>
 800620a:	3601      	adds	r6, #1
 800620c:	e7d9      	b.n	80061c2 <_printf_common+0x8e>
	...

08006210 <_printf_i>:
 8006210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006214:	7e0f      	ldrb	r7, [r1, #24]
 8006216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006218:	2f78      	cmp	r7, #120	; 0x78
 800621a:	4691      	mov	r9, r2
 800621c:	4680      	mov	r8, r0
 800621e:	460c      	mov	r4, r1
 8006220:	469a      	mov	sl, r3
 8006222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006226:	d807      	bhi.n	8006238 <_printf_i+0x28>
 8006228:	2f62      	cmp	r7, #98	; 0x62
 800622a:	d80a      	bhi.n	8006242 <_printf_i+0x32>
 800622c:	2f00      	cmp	r7, #0
 800622e:	f000 80d4 	beq.w	80063da <_printf_i+0x1ca>
 8006232:	2f58      	cmp	r7, #88	; 0x58
 8006234:	f000 80c0 	beq.w	80063b8 <_printf_i+0x1a8>
 8006238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800623c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006240:	e03a      	b.n	80062b8 <_printf_i+0xa8>
 8006242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006246:	2b15      	cmp	r3, #21
 8006248:	d8f6      	bhi.n	8006238 <_printf_i+0x28>
 800624a:	a101      	add	r1, pc, #4	; (adr r1, 8006250 <_printf_i+0x40>)
 800624c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006250:	080062a9 	.word	0x080062a9
 8006254:	080062bd 	.word	0x080062bd
 8006258:	08006239 	.word	0x08006239
 800625c:	08006239 	.word	0x08006239
 8006260:	08006239 	.word	0x08006239
 8006264:	08006239 	.word	0x08006239
 8006268:	080062bd 	.word	0x080062bd
 800626c:	08006239 	.word	0x08006239
 8006270:	08006239 	.word	0x08006239
 8006274:	08006239 	.word	0x08006239
 8006278:	08006239 	.word	0x08006239
 800627c:	080063c1 	.word	0x080063c1
 8006280:	080062e9 	.word	0x080062e9
 8006284:	0800637b 	.word	0x0800637b
 8006288:	08006239 	.word	0x08006239
 800628c:	08006239 	.word	0x08006239
 8006290:	080063e3 	.word	0x080063e3
 8006294:	08006239 	.word	0x08006239
 8006298:	080062e9 	.word	0x080062e9
 800629c:	08006239 	.word	0x08006239
 80062a0:	08006239 	.word	0x08006239
 80062a4:	08006383 	.word	0x08006383
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	1d1a      	adds	r2, r3, #4
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	602a      	str	r2, [r5, #0]
 80062b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062b8:	2301      	movs	r3, #1
 80062ba:	e09f      	b.n	80063fc <_printf_i+0x1ec>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	0607      	lsls	r7, r0, #24
 80062c2:	f103 0104 	add.w	r1, r3, #4
 80062c6:	6029      	str	r1, [r5, #0]
 80062c8:	d501      	bpl.n	80062ce <_printf_i+0xbe>
 80062ca:	681e      	ldr	r6, [r3, #0]
 80062cc:	e003      	b.n	80062d6 <_printf_i+0xc6>
 80062ce:	0646      	lsls	r6, r0, #25
 80062d0:	d5fb      	bpl.n	80062ca <_printf_i+0xba>
 80062d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	da03      	bge.n	80062e2 <_printf_i+0xd2>
 80062da:	232d      	movs	r3, #45	; 0x2d
 80062dc:	4276      	negs	r6, r6
 80062de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e2:	485a      	ldr	r0, [pc, #360]	; (800644c <_printf_i+0x23c>)
 80062e4:	230a      	movs	r3, #10
 80062e6:	e012      	b.n	800630e <_printf_i+0xfe>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	6820      	ldr	r0, [r4, #0]
 80062ec:	1d19      	adds	r1, r3, #4
 80062ee:	6029      	str	r1, [r5, #0]
 80062f0:	0605      	lsls	r5, r0, #24
 80062f2:	d501      	bpl.n	80062f8 <_printf_i+0xe8>
 80062f4:	681e      	ldr	r6, [r3, #0]
 80062f6:	e002      	b.n	80062fe <_printf_i+0xee>
 80062f8:	0641      	lsls	r1, r0, #25
 80062fa:	d5fb      	bpl.n	80062f4 <_printf_i+0xe4>
 80062fc:	881e      	ldrh	r6, [r3, #0]
 80062fe:	4853      	ldr	r0, [pc, #332]	; (800644c <_printf_i+0x23c>)
 8006300:	2f6f      	cmp	r7, #111	; 0x6f
 8006302:	bf0c      	ite	eq
 8006304:	2308      	moveq	r3, #8
 8006306:	230a      	movne	r3, #10
 8006308:	2100      	movs	r1, #0
 800630a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800630e:	6865      	ldr	r5, [r4, #4]
 8006310:	60a5      	str	r5, [r4, #8]
 8006312:	2d00      	cmp	r5, #0
 8006314:	bfa2      	ittt	ge
 8006316:	6821      	ldrge	r1, [r4, #0]
 8006318:	f021 0104 	bicge.w	r1, r1, #4
 800631c:	6021      	strge	r1, [r4, #0]
 800631e:	b90e      	cbnz	r6, 8006324 <_printf_i+0x114>
 8006320:	2d00      	cmp	r5, #0
 8006322:	d04b      	beq.n	80063bc <_printf_i+0x1ac>
 8006324:	4615      	mov	r5, r2
 8006326:	fbb6 f1f3 	udiv	r1, r6, r3
 800632a:	fb03 6711 	mls	r7, r3, r1, r6
 800632e:	5dc7      	ldrb	r7, [r0, r7]
 8006330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006334:	4637      	mov	r7, r6
 8006336:	42bb      	cmp	r3, r7
 8006338:	460e      	mov	r6, r1
 800633a:	d9f4      	bls.n	8006326 <_printf_i+0x116>
 800633c:	2b08      	cmp	r3, #8
 800633e:	d10b      	bne.n	8006358 <_printf_i+0x148>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	07de      	lsls	r6, r3, #31
 8006344:	d508      	bpl.n	8006358 <_printf_i+0x148>
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	6861      	ldr	r1, [r4, #4]
 800634a:	4299      	cmp	r1, r3
 800634c:	bfde      	ittt	le
 800634e:	2330      	movle	r3, #48	; 0x30
 8006350:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006354:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006358:	1b52      	subs	r2, r2, r5
 800635a:	6122      	str	r2, [r4, #16]
 800635c:	f8cd a000 	str.w	sl, [sp]
 8006360:	464b      	mov	r3, r9
 8006362:	aa03      	add	r2, sp, #12
 8006364:	4621      	mov	r1, r4
 8006366:	4640      	mov	r0, r8
 8006368:	f7ff fee4 	bl	8006134 <_printf_common>
 800636c:	3001      	adds	r0, #1
 800636e:	d14a      	bne.n	8006406 <_printf_i+0x1f6>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	b004      	add	sp, #16
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	f043 0320 	orr.w	r3, r3, #32
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	4833      	ldr	r0, [pc, #204]	; (8006450 <_printf_i+0x240>)
 8006384:	2778      	movs	r7, #120	; 0x78
 8006386:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	6829      	ldr	r1, [r5, #0]
 800638e:	061f      	lsls	r7, r3, #24
 8006390:	f851 6b04 	ldr.w	r6, [r1], #4
 8006394:	d402      	bmi.n	800639c <_printf_i+0x18c>
 8006396:	065f      	lsls	r7, r3, #25
 8006398:	bf48      	it	mi
 800639a:	b2b6      	uxthmi	r6, r6
 800639c:	07df      	lsls	r7, r3, #31
 800639e:	bf48      	it	mi
 80063a0:	f043 0320 	orrmi.w	r3, r3, #32
 80063a4:	6029      	str	r1, [r5, #0]
 80063a6:	bf48      	it	mi
 80063a8:	6023      	strmi	r3, [r4, #0]
 80063aa:	b91e      	cbnz	r6, 80063b4 <_printf_i+0x1a4>
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	f023 0320 	bic.w	r3, r3, #32
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	2310      	movs	r3, #16
 80063b6:	e7a7      	b.n	8006308 <_printf_i+0xf8>
 80063b8:	4824      	ldr	r0, [pc, #144]	; (800644c <_printf_i+0x23c>)
 80063ba:	e7e4      	b.n	8006386 <_printf_i+0x176>
 80063bc:	4615      	mov	r5, r2
 80063be:	e7bd      	b.n	800633c <_printf_i+0x12c>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	6826      	ldr	r6, [r4, #0]
 80063c4:	6961      	ldr	r1, [r4, #20]
 80063c6:	1d18      	adds	r0, r3, #4
 80063c8:	6028      	str	r0, [r5, #0]
 80063ca:	0635      	lsls	r5, r6, #24
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	d501      	bpl.n	80063d4 <_printf_i+0x1c4>
 80063d0:	6019      	str	r1, [r3, #0]
 80063d2:	e002      	b.n	80063da <_printf_i+0x1ca>
 80063d4:	0670      	lsls	r0, r6, #25
 80063d6:	d5fb      	bpl.n	80063d0 <_printf_i+0x1c0>
 80063d8:	8019      	strh	r1, [r3, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	6123      	str	r3, [r4, #16]
 80063de:	4615      	mov	r5, r2
 80063e0:	e7bc      	b.n	800635c <_printf_i+0x14c>
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	1d1a      	adds	r2, r3, #4
 80063e6:	602a      	str	r2, [r5, #0]
 80063e8:	681d      	ldr	r5, [r3, #0]
 80063ea:	6862      	ldr	r2, [r4, #4]
 80063ec:	2100      	movs	r1, #0
 80063ee:	4628      	mov	r0, r5
 80063f0:	f7f9 fef6 	bl	80001e0 <memchr>
 80063f4:	b108      	cbz	r0, 80063fa <_printf_i+0x1ea>
 80063f6:	1b40      	subs	r0, r0, r5
 80063f8:	6060      	str	r0, [r4, #4]
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	6123      	str	r3, [r4, #16]
 80063fe:	2300      	movs	r3, #0
 8006400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006404:	e7aa      	b.n	800635c <_printf_i+0x14c>
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	462a      	mov	r2, r5
 800640a:	4649      	mov	r1, r9
 800640c:	4640      	mov	r0, r8
 800640e:	47d0      	blx	sl
 8006410:	3001      	adds	r0, #1
 8006412:	d0ad      	beq.n	8006370 <_printf_i+0x160>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	079b      	lsls	r3, r3, #30
 8006418:	d413      	bmi.n	8006442 <_printf_i+0x232>
 800641a:	68e0      	ldr	r0, [r4, #12]
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	4298      	cmp	r0, r3
 8006420:	bfb8      	it	lt
 8006422:	4618      	movlt	r0, r3
 8006424:	e7a6      	b.n	8006374 <_printf_i+0x164>
 8006426:	2301      	movs	r3, #1
 8006428:	4632      	mov	r2, r6
 800642a:	4649      	mov	r1, r9
 800642c:	4640      	mov	r0, r8
 800642e:	47d0      	blx	sl
 8006430:	3001      	adds	r0, #1
 8006432:	d09d      	beq.n	8006370 <_printf_i+0x160>
 8006434:	3501      	adds	r5, #1
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	9903      	ldr	r1, [sp, #12]
 800643a:	1a5b      	subs	r3, r3, r1
 800643c:	42ab      	cmp	r3, r5
 800643e:	dcf2      	bgt.n	8006426 <_printf_i+0x216>
 8006440:	e7eb      	b.n	800641a <_printf_i+0x20a>
 8006442:	2500      	movs	r5, #0
 8006444:	f104 0619 	add.w	r6, r4, #25
 8006448:	e7f5      	b.n	8006436 <_printf_i+0x226>
 800644a:	bf00      	nop
 800644c:	080068f5 	.word	0x080068f5
 8006450:	08006906 	.word	0x08006906

08006454 <__sflush_r>:
 8006454:	898a      	ldrh	r2, [r1, #12]
 8006456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645a:	4605      	mov	r5, r0
 800645c:	0710      	lsls	r0, r2, #28
 800645e:	460c      	mov	r4, r1
 8006460:	d458      	bmi.n	8006514 <__sflush_r+0xc0>
 8006462:	684b      	ldr	r3, [r1, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	dc05      	bgt.n	8006474 <__sflush_r+0x20>
 8006468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	dc02      	bgt.n	8006474 <__sflush_r+0x20>
 800646e:	2000      	movs	r0, #0
 8006470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006476:	2e00      	cmp	r6, #0
 8006478:	d0f9      	beq.n	800646e <__sflush_r+0x1a>
 800647a:	2300      	movs	r3, #0
 800647c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006480:	682f      	ldr	r7, [r5, #0]
 8006482:	6a21      	ldr	r1, [r4, #32]
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	d032      	beq.n	80064ee <__sflush_r+0x9a>
 8006488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	075a      	lsls	r2, r3, #29
 800648e:	d505      	bpl.n	800649c <__sflush_r+0x48>
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006496:	b10b      	cbz	r3, 800649c <__sflush_r+0x48>
 8006498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800649a:	1ac0      	subs	r0, r0, r3
 800649c:	2300      	movs	r3, #0
 800649e:	4602      	mov	r2, r0
 80064a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a2:	6a21      	ldr	r1, [r4, #32]
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b0      	blx	r6
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	d106      	bne.n	80064bc <__sflush_r+0x68>
 80064ae:	6829      	ldr	r1, [r5, #0]
 80064b0:	291d      	cmp	r1, #29
 80064b2:	d82b      	bhi.n	800650c <__sflush_r+0xb8>
 80064b4:	4a29      	ldr	r2, [pc, #164]	; (800655c <__sflush_r+0x108>)
 80064b6:	410a      	asrs	r2, r1
 80064b8:	07d6      	lsls	r6, r2, #31
 80064ba:	d427      	bmi.n	800650c <__sflush_r+0xb8>
 80064bc:	2200      	movs	r2, #0
 80064be:	6062      	str	r2, [r4, #4]
 80064c0:	04d9      	lsls	r1, r3, #19
 80064c2:	6922      	ldr	r2, [r4, #16]
 80064c4:	6022      	str	r2, [r4, #0]
 80064c6:	d504      	bpl.n	80064d2 <__sflush_r+0x7e>
 80064c8:	1c42      	adds	r2, r0, #1
 80064ca:	d101      	bne.n	80064d0 <__sflush_r+0x7c>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b903      	cbnz	r3, 80064d2 <__sflush_r+0x7e>
 80064d0:	6560      	str	r0, [r4, #84]	; 0x54
 80064d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064d4:	602f      	str	r7, [r5, #0]
 80064d6:	2900      	cmp	r1, #0
 80064d8:	d0c9      	beq.n	800646e <__sflush_r+0x1a>
 80064da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064de:	4299      	cmp	r1, r3
 80064e0:	d002      	beq.n	80064e8 <__sflush_r+0x94>
 80064e2:	4628      	mov	r0, r5
 80064e4:	f7ff fa92 	bl	8005a0c <_free_r>
 80064e8:	2000      	movs	r0, #0
 80064ea:	6360      	str	r0, [r4, #52]	; 0x34
 80064ec:	e7c0      	b.n	8006470 <__sflush_r+0x1c>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b0      	blx	r6
 80064f4:	1c41      	adds	r1, r0, #1
 80064f6:	d1c8      	bne.n	800648a <__sflush_r+0x36>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0c5      	beq.n	800648a <__sflush_r+0x36>
 80064fe:	2b1d      	cmp	r3, #29
 8006500:	d001      	beq.n	8006506 <__sflush_r+0xb2>
 8006502:	2b16      	cmp	r3, #22
 8006504:	d101      	bne.n	800650a <__sflush_r+0xb6>
 8006506:	602f      	str	r7, [r5, #0]
 8006508:	e7b1      	b.n	800646e <__sflush_r+0x1a>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	e7ad      	b.n	8006470 <__sflush_r+0x1c>
 8006514:	690f      	ldr	r7, [r1, #16]
 8006516:	2f00      	cmp	r7, #0
 8006518:	d0a9      	beq.n	800646e <__sflush_r+0x1a>
 800651a:	0793      	lsls	r3, r2, #30
 800651c:	680e      	ldr	r6, [r1, #0]
 800651e:	bf08      	it	eq
 8006520:	694b      	ldreq	r3, [r1, #20]
 8006522:	600f      	str	r7, [r1, #0]
 8006524:	bf18      	it	ne
 8006526:	2300      	movne	r3, #0
 8006528:	eba6 0807 	sub.w	r8, r6, r7
 800652c:	608b      	str	r3, [r1, #8]
 800652e:	f1b8 0f00 	cmp.w	r8, #0
 8006532:	dd9c      	ble.n	800646e <__sflush_r+0x1a>
 8006534:	6a21      	ldr	r1, [r4, #32]
 8006536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006538:	4643      	mov	r3, r8
 800653a:	463a      	mov	r2, r7
 800653c:	4628      	mov	r0, r5
 800653e:	47b0      	blx	r6
 8006540:	2800      	cmp	r0, #0
 8006542:	dc06      	bgt.n	8006552 <__sflush_r+0xfe>
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	e78e      	b.n	8006470 <__sflush_r+0x1c>
 8006552:	4407      	add	r7, r0
 8006554:	eba8 0800 	sub.w	r8, r8, r0
 8006558:	e7e9      	b.n	800652e <__sflush_r+0xda>
 800655a:	bf00      	nop
 800655c:	dfbffffe 	.word	0xdfbffffe

08006560 <_fflush_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	690b      	ldr	r3, [r1, #16]
 8006564:	4605      	mov	r5, r0
 8006566:	460c      	mov	r4, r1
 8006568:	b913      	cbnz	r3, 8006570 <_fflush_r+0x10>
 800656a:	2500      	movs	r5, #0
 800656c:	4628      	mov	r0, r5
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	b118      	cbz	r0, 800657a <_fflush_r+0x1a>
 8006572:	6a03      	ldr	r3, [r0, #32]
 8006574:	b90b      	cbnz	r3, 800657a <_fflush_r+0x1a>
 8006576:	f7fe ffcd 	bl	8005514 <__sinit>
 800657a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0f3      	beq.n	800656a <_fflush_r+0xa>
 8006582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006584:	07d0      	lsls	r0, r2, #31
 8006586:	d404      	bmi.n	8006592 <_fflush_r+0x32>
 8006588:	0599      	lsls	r1, r3, #22
 800658a:	d402      	bmi.n	8006592 <_fflush_r+0x32>
 800658c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800658e:	f7ff fa2c 	bl	80059ea <__retarget_lock_acquire_recursive>
 8006592:	4628      	mov	r0, r5
 8006594:	4621      	mov	r1, r4
 8006596:	f7ff ff5d 	bl	8006454 <__sflush_r>
 800659a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800659c:	07da      	lsls	r2, r3, #31
 800659e:	4605      	mov	r5, r0
 80065a0:	d4e4      	bmi.n	800656c <_fflush_r+0xc>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	059b      	lsls	r3, r3, #22
 80065a6:	d4e1      	bmi.n	800656c <_fflush_r+0xc>
 80065a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065aa:	f7ff fa1f 	bl	80059ec <__retarget_lock_release_recursive>
 80065ae:	e7dd      	b.n	800656c <_fflush_r+0xc>

080065b0 <__swhatbuf_r>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	460c      	mov	r4, r1
 80065b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b8:	2900      	cmp	r1, #0
 80065ba:	b096      	sub	sp, #88	; 0x58
 80065bc:	4615      	mov	r5, r2
 80065be:	461e      	mov	r6, r3
 80065c0:	da0d      	bge.n	80065de <__swhatbuf_r+0x2e>
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065c8:	f04f 0100 	mov.w	r1, #0
 80065cc:	bf0c      	ite	eq
 80065ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80065d2:	2340      	movne	r3, #64	; 0x40
 80065d4:	2000      	movs	r0, #0
 80065d6:	6031      	str	r1, [r6, #0]
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	b016      	add	sp, #88	; 0x58
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
 80065de:	466a      	mov	r2, sp
 80065e0:	f000 f862 	bl	80066a8 <_fstat_r>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	dbec      	blt.n	80065c2 <__swhatbuf_r+0x12>
 80065e8:	9901      	ldr	r1, [sp, #4]
 80065ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80065ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80065f2:	4259      	negs	r1, r3
 80065f4:	4159      	adcs	r1, r3
 80065f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065fa:	e7eb      	b.n	80065d4 <__swhatbuf_r+0x24>

080065fc <__smakebuf_r>:
 80065fc:	898b      	ldrh	r3, [r1, #12]
 80065fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006600:	079d      	lsls	r5, r3, #30
 8006602:	4606      	mov	r6, r0
 8006604:	460c      	mov	r4, r1
 8006606:	d507      	bpl.n	8006618 <__smakebuf_r+0x1c>
 8006608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	2301      	movs	r3, #1
 8006612:	6163      	str	r3, [r4, #20]
 8006614:	b002      	add	sp, #8
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	ab01      	add	r3, sp, #4
 800661a:	466a      	mov	r2, sp
 800661c:	f7ff ffc8 	bl	80065b0 <__swhatbuf_r>
 8006620:	9900      	ldr	r1, [sp, #0]
 8006622:	4605      	mov	r5, r0
 8006624:	4630      	mov	r0, r6
 8006626:	f7ff fa5d 	bl	8005ae4 <_malloc_r>
 800662a:	b948      	cbnz	r0, 8006640 <__smakebuf_r+0x44>
 800662c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006630:	059a      	lsls	r2, r3, #22
 8006632:	d4ef      	bmi.n	8006614 <__smakebuf_r+0x18>
 8006634:	f023 0303 	bic.w	r3, r3, #3
 8006638:	f043 0302 	orr.w	r3, r3, #2
 800663c:	81a3      	strh	r3, [r4, #12]
 800663e:	e7e3      	b.n	8006608 <__smakebuf_r+0xc>
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	6020      	str	r0, [r4, #0]
 8006644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	9b00      	ldr	r3, [sp, #0]
 800664c:	6163      	str	r3, [r4, #20]
 800664e:	9b01      	ldr	r3, [sp, #4]
 8006650:	6120      	str	r0, [r4, #16]
 8006652:	b15b      	cbz	r3, 800666c <__smakebuf_r+0x70>
 8006654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006658:	4630      	mov	r0, r6
 800665a:	f000 f837 	bl	80066cc <_isatty_r>
 800665e:	b128      	cbz	r0, 800666c <__smakebuf_r+0x70>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	431d      	orrs	r5, r3
 8006670:	81a5      	strh	r5, [r4, #12]
 8006672:	e7cf      	b.n	8006614 <__smakebuf_r+0x18>

08006674 <memmove>:
 8006674:	4288      	cmp	r0, r1
 8006676:	b510      	push	{r4, lr}
 8006678:	eb01 0402 	add.w	r4, r1, r2
 800667c:	d902      	bls.n	8006684 <memmove+0x10>
 800667e:	4284      	cmp	r4, r0
 8006680:	4623      	mov	r3, r4
 8006682:	d807      	bhi.n	8006694 <memmove+0x20>
 8006684:	1e43      	subs	r3, r0, #1
 8006686:	42a1      	cmp	r1, r4
 8006688:	d008      	beq.n	800669c <memmove+0x28>
 800668a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800668e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006692:	e7f8      	b.n	8006686 <memmove+0x12>
 8006694:	4402      	add	r2, r0
 8006696:	4601      	mov	r1, r0
 8006698:	428a      	cmp	r2, r1
 800669a:	d100      	bne.n	800669e <memmove+0x2a>
 800669c:	bd10      	pop	{r4, pc}
 800669e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066a6:	e7f7      	b.n	8006698 <memmove+0x24>

080066a8 <_fstat_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	; (80066c8 <_fstat_r+0x20>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	f7fa fb72 	bl	8000d9e <_fstat>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d102      	bne.n	80066c4 <_fstat_r+0x1c>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b103      	cbz	r3, 80066c4 <_fstat_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	20004264 	.word	0x20004264

080066cc <_isatty_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	; (80066e8 <_isatty_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fa fb71 	bl	8000dbe <_isatty>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_isatty_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_isatty_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20004264 	.word	0x20004264

080066ec <_sbrk_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4d06      	ldr	r5, [pc, #24]	; (8006708 <_sbrk_r+0x1c>)
 80066f0:	2300      	movs	r3, #0
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f7fa fb7a 	bl	8000df0 <_sbrk>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_sbrk_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_sbrk_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	20004264 	.word	0x20004264

0800670c <_realloc_r>:
 800670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006710:	4680      	mov	r8, r0
 8006712:	4614      	mov	r4, r2
 8006714:	460e      	mov	r6, r1
 8006716:	b921      	cbnz	r1, 8006722 <_realloc_r+0x16>
 8006718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671c:	4611      	mov	r1, r2
 800671e:	f7ff b9e1 	b.w	8005ae4 <_malloc_r>
 8006722:	b92a      	cbnz	r2, 8006730 <_realloc_r+0x24>
 8006724:	f7ff f972 	bl	8005a0c <_free_r>
 8006728:	4625      	mov	r5, r4
 800672a:	4628      	mov	r0, r5
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006730:	f000 f81b 	bl	800676a <_malloc_usable_size_r>
 8006734:	4284      	cmp	r4, r0
 8006736:	4607      	mov	r7, r0
 8006738:	d802      	bhi.n	8006740 <_realloc_r+0x34>
 800673a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800673e:	d812      	bhi.n	8006766 <_realloc_r+0x5a>
 8006740:	4621      	mov	r1, r4
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff f9ce 	bl	8005ae4 <_malloc_r>
 8006748:	4605      	mov	r5, r0
 800674a:	2800      	cmp	r0, #0
 800674c:	d0ed      	beq.n	800672a <_realloc_r+0x1e>
 800674e:	42bc      	cmp	r4, r7
 8006750:	4622      	mov	r2, r4
 8006752:	4631      	mov	r1, r6
 8006754:	bf28      	it	cs
 8006756:	463a      	movcs	r2, r7
 8006758:	f7ff f949 	bl	80059ee <memcpy>
 800675c:	4631      	mov	r1, r6
 800675e:	4640      	mov	r0, r8
 8006760:	f7ff f954 	bl	8005a0c <_free_r>
 8006764:	e7e1      	b.n	800672a <_realloc_r+0x1e>
 8006766:	4635      	mov	r5, r6
 8006768:	e7df      	b.n	800672a <_realloc_r+0x1e>

0800676a <_malloc_usable_size_r>:
 800676a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676e:	1f18      	subs	r0, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	bfbc      	itt	lt
 8006774:	580b      	ldrlt	r3, [r1, r0]
 8006776:	18c0      	addlt	r0, r0, r3
 8006778:	4770      	bx	lr
	...

0800677c <_init>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr

08006788 <_fini>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr
