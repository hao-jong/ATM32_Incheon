
Test003-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005158  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f8  080054f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005500  08005500  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000068  08005570  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005570  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb6f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d25  00000000  00000000  0002bc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000803  00000000  00000000  0002e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f88  00000000  00000000  0002ebcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d80e  00000000  00000000  00045b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a066  00000000  00000000  00053361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000371c  00000000  00000000  000dd3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e0ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052e0 	.word	0x080052e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080052e0 	.word	0x080052e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd_command>:
#include "main.h"
extern I2C_HandleTypeDef hi2c2;
#define I2C_ADDR 0x4E  //  0x27 << 1

void lcd_command(char cmd) // cmd_bit : abcd efgh
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	char n1, n2;
	char n3, n4;
	char dd[4];
	n1 = cmd & 0xf0;			// n1: abcd 0000 ==> upper nibble
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f023 030f 	bic.w	r3, r3, #15
 800058c:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd & 0x0f) << 4;		// n2: efgh 0000 ==> lower nibble to upper
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)	|0|0; //RW|EN|NC|RS; 0x0c
 8000594:	230c      	movs	r3, #12
 8000596:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|	0	|0|0; //RW|EN|NC|RS; 0x08
 8000598:	2308      	movs	r3, #8
 800059a:	733b      	strb	r3, [r7, #12]

	dd[0] = n1 | n3;			//
 800059c:	7bfa      	ldrb	r2, [r7, #15]
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 80005a6:	7bfa      	ldrb	r2, [r7, #15]
 80005a8:	7b3b      	ldrb	r3, [r7, #12]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 80005b0:	7bba      	ldrb	r2, [r7, #14]
 80005b2:	7b7b      	ldrb	r3, [r7, #13]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 80005ba:	7bba      	ldrb	r2, [r7, #14]
 80005bc:	7b3b      	ldrb	r3, [r7, #12]
 80005be:	4313      	orrs	r3, r2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR, dd, 4, 10);
 80005c4:	f107 0208 	add.w	r2, r7, #8
 80005c8:	230a      	movs	r3, #10
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2304      	movs	r3, #4
 80005ce:	214e      	movs	r1, #78	; 0x4e
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <lcd_command+0x64>)
 80005d2:	f001 f90f 	bl	80017f4 <HAL_I2C_Master_Transmit>

}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c

080005e4 <lcd_data>:
void lcd_data(char ch)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	char n1, n2;
	char n3, n4;
	char dd[4];
	n1 = ch & 0xf0;			// n1: abcd 0000 ==> upper nibble
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f023 030f 	bic.w	r3, r3, #15
 80005f4:	73fb      	strb	r3, [r7, #15]
	n2 = (ch & 0x0f) << 4;		// n2: efgh 0000 ==> lower nibble to upper
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)	|0|(1<<0); //RW|EN|NC|RS; 0x0d
 80005fc:	230d      	movs	r3, #13
 80005fe:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|	0	|0|(1<<0); //RW|EN|NC|RS; 0x09
 8000600:	2309      	movs	r3, #9
 8000602:	733b      	strb	r3, [r7, #12]

	dd[0] = n1 | n3;			//
 8000604:	7bfa      	ldrb	r2, [r7, #15]
 8000606:	7b7b      	ldrb	r3, [r7, #13]
 8000608:	4313      	orrs	r3, r2
 800060a:	b2db      	uxtb	r3, r3
 800060c:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	7b3b      	ldrb	r3, [r7, #12]
 8000612:	4313      	orrs	r3, r2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000618:	7bba      	ldrb	r2, [r7, #14]
 800061a:	7b7b      	ldrb	r3, [r7, #13]
 800061c:	4313      	orrs	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 8000622:	7bba      	ldrb	r2, [r7, #14]
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	4313      	orrs	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR, dd, 4, 10);
 800062c:	f107 0208 	add.w	r2, r7, #8
 8000630:	230a      	movs	r3, #10
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2304      	movs	r3, #4
 8000636:	214e      	movs	r1, #78	; 0x4e
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <lcd_data+0x64>)
 800063a:	f001 f8db 	bl	80017f4 <HAL_I2C_Master_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000009c 	.word	0x2000009c

0800064c <lcd_init>:
void lcd_init()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	lcd_command(0x01); // screen clear
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff ff93 	bl	800057c <lcd_command>
	lcd_command(0x02); // cursor home
 8000656:	2002      	movs	r0, #2
 8000658:	f7ff ff90 	bl	800057c <lcd_command>
	lcd_command(0x06);
 800065c:	2006      	movs	r0, #6
 800065e:	f7ff ff8d 	bl	800057c <lcd_command>
	lcd_command(0x0f);
 8000662:	200f      	movs	r0, #15
 8000664:	f7ff ff8a 	bl	800057c <lcd_command>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <I2C_scan>:


int I2C_scan()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
		for(int addr = 0; addr <127; addr++)
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	e01c      	b.n	80006b2 <I2C_scan+0x46>
	{

		if(addr%16 == 0)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <I2C_scan+0x1c>
		{
			printf("\r\n");
 8000682:	4810      	ldr	r0, [pc, #64]	; (80006c4 <I2C_scan+0x58>)
 8000684:	f002 ffa0 	bl	80035c8 <puts>
		}

		if(HAL_I2C_IsDeviceReady(&hi2c2,addr,1,10) == HAL_OK)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	b299      	uxth	r1, r3
 800068c:	230a      	movs	r3, #10
 800068e:	2201      	movs	r2, #1
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <I2C_scan+0x5c>)
 8000692:	f001 f9ad 	bl	80019f0 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d104      	bne.n	80006a6 <I2C_scan+0x3a>
		{
			printf("  %02x ", addr);
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <I2C_scan+0x60>)
 80006a0:	f002 ff2c 	bl	80034fc <iprintf>
 80006a4:	e002      	b.n	80006ac <I2C_scan+0x40>
		}

		else
		{
			printf("  .  ");
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <I2C_scan+0x64>)
 80006a8:	f002 ff28 	bl	80034fc <iprintf>
		for(int addr = 0; addr <127; addr++)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b7e      	cmp	r3, #126	; 0x7e
 80006b6:	dddf      	ble.n	8000678 <I2C_scan+0xc>
		}


	}
}
 80006b8:	bf00      	nop
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	080052f8 	.word	0x080052f8
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	080052fc 	.word	0x080052fc
 80006d0:	08005304 	.word	0x08005304

080006d4 <lcd_print>:
	lcd_data('o');

}

void lcd_print(char *str)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	while(*str)
 80006dc:	e006      	b.n	80006ec <lcd_print+0x18>
	{
		lcd_data(*str++);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff7c 	bl	80005e4 <lcd_data>
	while(*str)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f4      	bne.n	80006de <lcd_print+0xa>
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_printEx2>:
}

int ln2 = 0; // current line no.
char sBuf[20]; //2nd line string
void lcd_printEx2(char *str, int ln)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	if(ln2 == 0)
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <lcd_printEx2+0x54>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d108      	bne.n	8000724 <lcd_printEx2+0x24>
	{
		lcd_command(0x80);
 8000712:	2080      	movs	r0, #128	; 0x80
 8000714:	f7ff ff32 	bl	800057c <lcd_command>
		ln2++;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <lcd_printEx2+0x54>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <lcd_printEx2+0x54>)
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e011      	b.n	8000748 <lcd_printEx2+0x48>

	}
	else if(ln2 == 1)
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <lcd_printEx2+0x54>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d10d      	bne.n	8000748 <lcd_printEx2+0x48>
	{
		lcd_command(0x80); lcd_print(sBuf);
 800072c:	2080      	movs	r0, #128	; 0x80
 800072e:	f7ff ff25 	bl	800057c <lcd_command>
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <lcd_printEx2+0x58>)
 8000734:	f7ff ffce 	bl	80006d4 <lcd_print>
		lcd_command(0xc0);
 8000738:	20c0      	movs	r0, #192	; 0xc0
 800073a:	f7ff ff1f 	bl	800057c <lcd_command>
		strcpy(sBuf, str); return;
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <lcd_printEx2+0x58>)
 8000742:	f003 f97c 	bl	8003a3e <strcpy>
 8000746:	e002      	b.n	800074e <lcd_printEx2+0x4e>
	}
	lcd_print(str);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffc3 	bl	80006d4 <lcd_print>
}
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000084 	.word	0x20000084
 8000758:	20000088 	.word	0x20000088

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 fbd1 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f835 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f000 f8f5 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800076e:	f000 f8c9 	bl	8000904 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000772:	f000 f899 	bl	80008a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("UART");
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <main+0x68>)
 8000778:	f000 f9cc 	bl	8000b14 <ProgramStart>
  I2C_scan();
 800077c:	f7ff ff76 	bl	800066c <I2C_scan>
  lcd_init();
 8000780:	f7ff ff64 	bl	800064c <lcd_init>
  int val;
  char buf[20];

  while (1)
  {
	  printf("\r\n");
 8000784:	4810      	ldr	r0, [pc, #64]	; (80007c8 <main+0x6c>)
 8000786:	f002 ff1f 	bl	80035c8 <puts>
	  printf("Input test number : ");
 800078a:	4810      	ldr	r0, [pc, #64]	; (80007cc <main+0x70>)
 800078c:	f002 feb6 	bl	80034fc <iprintf>
	  scanf("%d", &val);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <main+0x74>)
 8000798:	f002 ff1e 	bl	80035d8 <iscanf>
	  sprintf(buf,"%d",val);
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	463b      	mov	r3, r7
 80007a0:	490b      	ldr	r1, [pc, #44]	; (80007d0 <main+0x74>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 ffd8 	bl	8003758 <siprintf>
	  printf("\r\n");
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <main+0x6c>)
 80007aa:	f002 ff0d 	bl	80035c8 <puts>
	  lcd_printEx2(&val, 0);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffa3 	bl	8000700 <lcd_printEx2>
      HAL_Delay(30);
 80007ba:	201e      	movs	r0, #30
 80007bc:	f000 fc16 	bl	8000fec <HAL_Delay>
  {
 80007c0:	e7e0      	b.n	8000784 <main+0x28>
 80007c2:	bf00      	nop
 80007c4:	0800530c 	.word	0x0800530c
 80007c8:	08005314 	.word	0x08005314
 80007cc:	08005318 	.word	0x08005318
 80007d0:	08005330 	.word	0x08005330

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 f8b0 	bl	8003948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <SystemClock_Config+0xcc>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <SystemClock_Config+0xd0>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000844:	2310      	movs	r3, #16
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000848:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800084c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800084e:	2304      	movs	r3, #4
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000852:	2304      	movs	r3, #4
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fc52 	bl	8002104 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000866:	f000 f8e5 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2102      	movs	r1, #2
 8000886:	4618      	mov	r0, r3
 8000888:	f001 feb4 	bl	80025f4 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000892:	f000 f8cf 	bl	8000a34 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2C2_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2C2_Init+0x58>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008e6:	f000 fe41 	bl	800156c <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f8a0 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000009c 	.word	0x2000009c
 80008fc:	40005800 	.word	0x40005800
 8000900:	000186a0 	.word	0x000186a0

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART2_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800093c:	f002 f87a 	bl	8002a34 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f875 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000f0 	.word	0x200000f0
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a2c      	ldr	r2, [pc, #176]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2120      	movs	r1, #32
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <MX_GPIO_Init+0xd4>)
 80009e4:	f000 fda8 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_GPIO_Init+0xd8>)
 8000a00:	f000 fbfe 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a04:	2320      	movs	r3, #32
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_GPIO_Init+0xd4>)
 8000a1c:	f000 fbf0 	bl	8001200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020800 	.word	0x40020800

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <__io_getchar>:


extern UART_HandleTypeDef huart2;

int __io_getchar(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	int ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000a46:	bf00      	nop
 8000a48:	1d39      	adds	r1, r7, #4
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <__io_getchar+0x44>)
 8000a50:	f002 f8cb 	bl	8002bea <HAL_UART_Receive>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f6      	bne.n	8000a48 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10); // echo
 8000a5a:	1d39      	adds	r1, r7, #4
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <__io_getchar+0x44>)
 8000a62:	f002 f837 	bl	8002ad4 <HAL_UART_Transmit>
	if(ch == '\r')
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0d      	cmp	r3, #13
 8000a6a:	d105      	bne.n	8000a78 <__io_getchar+0x38>
		{
		HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4905      	ldr	r1, [pc, #20]	; (8000a88 <__io_getchar+0x48>)
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <__io_getchar+0x44>)
 8000a74:	f002 f82e 	bl	8002ad4 <HAL_UART_Transmit>
		}
	return ch;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000f0 	.word	0x200000f0
 8000a88:	08005334 	.word	0x08005334

08000a8c <__io_putchar>:

int __io_putchar(int ch)
	{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000a94:	1d39      	adds	r1, r7, #4
 8000a96:	230a      	movs	r3, #10
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <__io_putchar+0x20>)
 8000a9c:	f002 f81a 	bl	8002ad4 <HAL_UART_Transmit>
		return ch;
 8000aa0:	687b      	ldr	r3, [r7, #4]
	}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000f0 	.word	0x200000f0

08000ab0 <Standby>:

void Standby()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000ab4:	bf00      	nop
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <Standby+0x1c>)
 8000abc:	f000 fd24 	bl	8001508 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1f7      	bne.n	8000ab6 <Standby+0x6>
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40020800 	.word	0x40020800

08000ad0 <cls>:
void cls()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	printf("\033[2j");
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <cls+0x10>)
 8000ad6:	f002 fd11 	bl	80034fc <iprintf>

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	08005338 	.word	0x08005338

08000ae4 <Cursor>:
void Cursor(int x, int y)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	char buf [20];
	sprintf(buf,"\033[%d;%dH",y,x);
 8000aee:	f107 000c 	add.w	r0, r7, #12
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	4906      	ldr	r1, [pc, #24]	; (8000b10 <Cursor+0x2c>)
 8000af8:	f002 fe2e 	bl	8003758 <siprintf>
	puts(buf);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 fd61 	bl	80035c8 <puts>
}
 8000b06:	bf00      	nop
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	08005340 	.word	0x08005340

08000b14 <ProgramStart>:
void ProgramStart (char * str)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	cls();
 8000b1c:	f7ff ffd8 	bl	8000ad0 <cls>
	Cursor(0,0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ffde 	bl	8000ae4 <Cursor>
	printf("Program Start - %s\r\n",str);
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	480a      	ldr	r0, [pc, #40]	; (8000b54 <ProgramStart+0x40>)
 8000b2c:	f002 fce6 	bl	80034fc <iprintf>
	printf("Press Blue-button(b1)to start\r\n");
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <ProgramStart+0x44>)
 8000b32:	f002 fd49 	bl	80035c8 <puts>
	Standby();
 8000b36:	f7ff ffbb 	bl	8000ab0 <Standby>
	setvbuf(stdin, NULL,_IONBF, 0);
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <ProgramStart+0x48>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6858      	ldr	r0, [r3, #4]
 8000b40:	2300      	movs	r3, #0
 8000b42:	2202      	movs	r2, #2
 8000b44:	2100      	movs	r1, #0
 8000b46:	f002 fd59 	bl	80035fc <setvbuf>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	0800534c 	.word	0x0800534c
 8000b58:	08005364 	.word	0x08005364
 8000b5c:	20000064 	.word	0x20000064

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f000 fafa 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <HAL_I2C_MspInit+0xa8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d13d      	bne.n	8000c4e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c00:	2304      	movs	r3, #4
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0xb0>)
 8000c0c:	f000 faf8 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000c22:	2309      	movs	r3, #9
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <HAL_I2C_MspInit+0xb0>)
 8000c2e:	f000 fae7 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005800 	.word	0x40005800
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12b      	bne.n	8000cde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_UART_MspInit+0x8c>)
 8000cda:	f000 fa91 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40004400 	.word	0x40004400
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f934 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5a:	f7ff fe71 	bl	8000a40 <__io_getchar>
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
  }

  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e009      	b.n	8000da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe75 	bl	8000a8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf1      	blt.n	8000d94 <_write+0x12>
  }
  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de2:	605a      	str	r2, [r3, #4]
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_isatty>:

int _isatty(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f002 fdc6 	bl	80039e4 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000138 	.word	0x20000138
 8000e8c:	20000290 	.word	0x20000290

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f002 fd85 	bl	80039f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fc39 	bl	800075c <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ef8:	08005508 	.word	0x08005508
  ldr r2, =_sbss
 8000efc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f00:	2000028c 	.word	0x2000028c

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f931 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fe10 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f93b 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 f911 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	2000013c 	.word	0x2000013c

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000013c 	.word	0x2000013c

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff47 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff5c 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e159      	b.n	80014d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8148 	bne.w	80014ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	2b02      	cmp	r3, #2
 8001250:	d130      	bne.n	80012b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 0201 	and.w	r2, r3, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d017      	beq.n	80012f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d123      	bne.n	8001344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a2 	beq.w	80014ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b57      	ldr	r3, [pc, #348]	; (80014e8 <HAL_GPIO_Init+0x2e8>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <HAL_GPIO_Init+0x2e8>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b54      	ldr	r3, [pc, #336]	; (80014e8 <HAL_GPIO_Init+0x2e8>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a2:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_GPIO_Init+0x2ec>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a49      	ldr	r2, [pc, #292]	; (80014f0 <HAL_GPIO_Init+0x2f0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d019      	beq.n	8001402 <HAL_GPIO_Init+0x202>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_GPIO_Init+0x2f4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0x1fe>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a47      	ldr	r2, [pc, #284]	; (80014f8 <HAL_GPIO_Init+0x2f8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a46      	ldr	r2, [pc, #280]	; (80014fc <HAL_GPIO_Init+0x2fc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x1f6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a45      	ldr	r2, [pc, #276]	; (8001500 <HAL_GPIO_Init+0x300>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x1f2>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013f2:	2307      	movs	r3, #7
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x204>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	; (80014ec <HAL_GPIO_Init+0x2ec>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_GPIO_Init+0x304>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_GPIO_Init+0x304>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_GPIO_Init+0x304>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a24      	ldr	r2, [pc, #144]	; (8001504 <HAL_GPIO_Init+0x304>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_GPIO_Init+0x304>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_GPIO_Init+0x304>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_GPIO_Init+0x304>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_GPIO_Init+0x304>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f aea2 	bls.w	800121c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001554:	e003      	b.n	800155e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e12b      	b.n	80017d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fb0c 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2224      	movs	r2, #36	; 0x24
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015d0:	f001 fa08 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 80015d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a81      	ldr	r2, [pc, #516]	; (80017e0 <HAL_I2C_Init+0x274>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d807      	bhi.n	80015f0 <HAL_I2C_Init+0x84>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a80      	ldr	r2, [pc, #512]	; (80017e4 <HAL_I2C_Init+0x278>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	bf94      	ite	ls
 80015e8:	2301      	movls	r3, #1
 80015ea:	2300      	movhi	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e006      	b.n	80015fe <HAL_I2C_Init+0x92>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4a7d      	ldr	r2, [pc, #500]	; (80017e8 <HAL_I2C_Init+0x27c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	bf94      	ite	ls
 80015f8:	2301      	movls	r3, #1
 80015fa:	2300      	movhi	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0e7      	b.n	80017d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a78      	ldr	r2, [pc, #480]	; (80017ec <HAL_I2C_Init+0x280>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a6a      	ldr	r2, [pc, #424]	; (80017e0 <HAL_I2C_Init+0x274>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d802      	bhi.n	8001640 <HAL_I2C_Init+0xd4>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3301      	adds	r3, #1
 800163e:	e009      	b.n	8001654 <HAL_I2C_Init+0xe8>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	4a69      	ldr	r2, [pc, #420]	; (80017f0 <HAL_I2C_Init+0x284>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	3301      	adds	r3, #1
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	430b      	orrs	r3, r1
 800165a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	495c      	ldr	r1, [pc, #368]	; (80017e0 <HAL_I2C_Init+0x274>)
 8001670:	428b      	cmp	r3, r1
 8001672:	d819      	bhi.n	80016a8 <HAL_I2C_Init+0x13c>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1e59      	subs	r1, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001682:	1c59      	adds	r1, r3, #1
 8001684:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001688:	400b      	ands	r3, r1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <HAL_I2C_Init+0x138>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e59      	subs	r1, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fbb1 f3f3 	udiv	r3, r1, r3
 800169c:	3301      	adds	r3, #1
 800169e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a2:	e051      	b.n	8001748 <HAL_I2C_Init+0x1dc>
 80016a4:	2304      	movs	r3, #4
 80016a6:	e04f      	b.n	8001748 <HAL_I2C_Init+0x1dc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d111      	bne.n	80016d4 <HAL_I2C_Init+0x168>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e58      	subs	r0, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e012      	b.n	80016fa <HAL_I2C_Init+0x18e>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1e58      	subs	r0, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	0099      	lsls	r1, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Init+0x196>
 80016fe:	2301      	movs	r3, #1
 8001700:	e022      	b.n	8001748 <HAL_I2C_Init+0x1dc>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10e      	bne.n	8001728 <HAL_I2C_Init+0x1bc>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e58      	subs	r0, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6859      	ldr	r1, [r3, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	440b      	add	r3, r1
 8001718:	fbb0 f3f3 	udiv	r3, r0, r3
 800171c:	3301      	adds	r3, #1
 800171e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001726:	e00f      	b.n	8001748 <HAL_I2C_Init+0x1dc>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1e58      	subs	r0, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	0099      	lsls	r1, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	fbb0 f3f3 	udiv	r3, r0, r3
 800173e:	3301      	adds	r3, #1
 8001740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	6809      	ldr	r1, [r1, #0]
 800174c:	4313      	orrs	r3, r2
 800174e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001776:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6911      	ldr	r1, [r2, #16]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68d2      	ldr	r2, [r2, #12]
 8001782:	4311      	orrs	r1, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	430b      	orrs	r3, r1
 800178a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2220      	movs	r2, #32
 80017c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	000186a0 	.word	0x000186a0
 80017e4:	001e847f 	.word	0x001e847f
 80017e8:	003d08ff 	.word	0x003d08ff
 80017ec:	431bde83 	.word	0x431bde83
 80017f0:	10624dd3 	.word	0x10624dd3

080017f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	461a      	mov	r2, r3
 8001800:	460b      	mov	r3, r1
 8001802:	817b      	strh	r3, [r7, #10]
 8001804:	4613      	mov	r3, r2
 8001806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fbe4 	bl	8000fd4 <HAL_GetTick>
 800180c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b20      	cmp	r3, #32
 8001818:	f040 80e0 	bne.w	80019dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2319      	movs	r3, #25
 8001822:	2201      	movs	r2, #1
 8001824:	4970      	ldr	r1, [pc, #448]	; (80019e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 fa92 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001832:	2302      	movs	r3, #2
 8001834:	e0d3      	b.n	80019de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_I2C_Master_Transmit+0x50>
 8001840:	2302      	movs	r3, #2
 8001842:	e0cc      	b.n	80019de <HAL_I2C_Master_Transmit+0x1ea>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d007      	beq.n	800186a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2221      	movs	r2, #33	; 0x21
 800187e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2210      	movs	r2, #16
 8001886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	893a      	ldrh	r2, [r7, #8]
 800189a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a50      	ldr	r2, [pc, #320]	; (80019ec <HAL_I2C_Master_Transmit+0x1f8>)
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018ac:	8979      	ldrh	r1, [r7, #10]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	6a3a      	ldr	r2, [r7, #32]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f9ca 	bl	8001c4c <I2C_MasterRequestWrite>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e08d      	b.n	80019de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018d8:	e066      	b.n	80019a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	6a39      	ldr	r1, [r7, #32]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 fb50 	bl	8001f84 <I2C_WaitOnTXEFlagUntilTimeout>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00d      	beq.n	8001906 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d107      	bne.n	8001902 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e06b      	b.n	80019de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b04      	cmp	r3, #4
 8001942:	d11b      	bne.n	800197c <HAL_I2C_Master_Transmit+0x188>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d017      	beq.n	800197c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	781a      	ldrb	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	6a39      	ldr	r1, [r7, #32]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 fb47 	bl	8002014 <I2C_WaitOnBTFFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00d      	beq.n	80019a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	2b04      	cmp	r3, #4
 8001992:	d107      	bne.n	80019a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e01a      	b.n	80019de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d194      	bne.n	80018da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019dc:	2302      	movs	r3, #2
  }
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	00100002 	.word	0x00100002
 80019ec:	ffff0000 	.word	0xffff0000

080019f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	460b      	mov	r3, r1
 80019fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff fae8 	bl	8000fd4 <HAL_GetTick>
 8001a04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	f040 8111 	bne.w	8001c3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2319      	movs	r3, #25
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4988      	ldr	r1, [pc, #544]	; (8001c44 <HAL_I2C_IsDeviceReady+0x254>)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f994 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e104      	b.n	8001c3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2C_IsDeviceReady+0x50>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0fd      	b.n	8001c3c <HAL_I2C_IsDeviceReady+0x24c>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d007      	beq.n	8001a66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2224      	movs	r2, #36	; 0x24
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a70      	ldr	r2, [pc, #448]	; (8001c48 <HAL_I2C_IsDeviceReady+0x258>)
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f952 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00d      	beq.n	8001ace <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac0:	d103      	bne.n	8001aca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0b6      	b.n	8001c3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001adc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fa79 	bl	8000fd4 <HAL_GetTick>
 8001ae2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	bf0c      	ite	eq
 8001af2:	2301      	moveq	r3, #1
 8001af4:	2300      	movne	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	bf0c      	ite	eq
 8001b0a:	2301      	moveq	r3, #1
 8001b0c:	2300      	movne	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b12:	e025      	b.n	8001b60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b14:	f7ff fa5e 	bl	8000fd4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d302      	bcc.n	8001b2a <HAL_I2C_IsDeviceReady+0x13a>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	22a0      	movs	r2, #160	; 0xa0
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2ba0      	cmp	r3, #160	; 0xa0
 8001b6a:	d005      	beq.n	8001b78 <HAL_I2C_IsDeviceReady+0x188>
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <HAL_I2C_IsDeviceReady+0x188>
 8001b72:	7dbb      	ldrb	r3, [r7, #22]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0cd      	beq.n	8001b14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d129      	bne.n	8001be2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2319      	movs	r3, #25
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4921      	ldr	r1, [pc, #132]	; (8001c44 <HAL_I2C_IsDeviceReady+0x254>)
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f8c6 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e036      	b.n	8001c3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e02c      	b.n	8001c3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bfa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2319      	movs	r3, #25
 8001c02:	2201      	movs	r2, #1
 8001c04:	490f      	ldr	r1, [pc, #60]	; (8001c44 <HAL_I2C_IsDeviceReady+0x254>)
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8a2 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e012      	b.n	8001c3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f4ff af32 	bcc.w	8001a8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
  }
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	00100002 	.word	0x00100002
 8001c48:	ffff0000 	.word	0xffff0000

08001c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d006      	beq.n	8001c76 <I2C_MasterRequestWrite+0x2a>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d003      	beq.n	8001c76 <I2C_MasterRequestWrite+0x2a>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c74:	d108      	bne.n	8001c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e00b      	b.n	8001ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d107      	bne.n	8001ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f84f 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc6:	d103      	bne.n	8001cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e035      	b.n	8001d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cdc:	d108      	bne.n	8001cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	e01b      	b.n	8001d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	11db      	asrs	r3, r3, #7
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0306 	and.w	r3, r3, #6
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f063 030f 	orn	r3, r3, #15
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <I2C_MasterRequestWrite+0xfc>)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f898 	bl	8001e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e010      	b.n	8001d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d1e:	897b      	ldrh	r3, [r7, #10]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <I2C_MasterRequestWrite+0x100>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f888 	bl	8001e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	00010008 	.word	0x00010008
 8001d4c:	00010002 	.word	0x00010002

08001d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d60:	e048      	b.n	8001df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d044      	beq.n	8001df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6a:	f7ff f933 	bl	8000fd4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d139      	bne.n	8001df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	0c1b      	lsrs	r3, r3, #16
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10d      	bne.n	8001da6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	43da      	mvns	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4013      	ands	r3, r2
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	e00c      	b.n	8001dc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4013      	ands	r3, r2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d116      	bne.n	8001df4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f043 0220 	orr.w	r2, r3, #32
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e023      	b.n	8001e3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10d      	bne.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	43da      	mvns	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	e00c      	b.n	8001e34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	4013      	ands	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d093      	beq.n	8001d62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e52:	e071      	b.n	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e62:	d123      	bne.n	8001eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e067      	b.n	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	d041      	beq.n	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb4:	f7ff f88e 	bl	8000fd4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d302      	bcc.n	8001eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d136      	bne.n	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10c      	bne.n	8001eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	e00b      	b.n	8001f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e021      	b.n	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10c      	bne.n	8001f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	e00b      	b.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4013      	ands	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f af6d 	bne.w	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f90:	e034      	b.n	8001ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f886 	bl	80020a4 <I2C_IsAcknowledgeFailed>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e034      	b.n	800200c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d028      	beq.n	8001ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7ff f813 	bl	8000fd4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d11d      	bne.n	8001ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d016      	beq.n	8001ffc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f043 0220 	orr.w	r2, r3, #32
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e007      	b.n	800200c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	2b80      	cmp	r3, #128	; 0x80
 8002008:	d1c3      	bne.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002020:	e034      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f83e 	bl	80020a4 <I2C_IsAcknowledgeFailed>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e034      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d028      	beq.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203a:	f7fe ffcb 	bl	8000fd4 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	429a      	cmp	r2, r3
 8002048:	d302      	bcc.n	8002050 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11d      	bne.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b04      	cmp	r3, #4
 800205c:	d016      	beq.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d1c3      	bne.n	8002022 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ba:	d11b      	bne.n	80020f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e267      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d075      	beq.n	800220e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002122:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d00c      	beq.n	8002148 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212e:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002136:	2b08      	cmp	r3, #8
 8002138:	d112      	bne.n	8002160 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213a:	4b82      	ldr	r3, [pc, #520]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002146:	d10b      	bne.n	8002160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	4b7e      	ldr	r3, [pc, #504]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d05b      	beq.n	800220c <HAL_RCC_OscConfig+0x108>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d157      	bne.n	800220c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e242      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002168:	d106      	bne.n	8002178 <HAL_RCC_OscConfig+0x74>
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a75      	ldr	r2, [pc, #468]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e01d      	b.n	80021b4 <HAL_RCC_OscConfig+0xb0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x98>
 8002182:	4b70      	ldr	r3, [pc, #448]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6f      	ldr	r2, [pc, #444]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6c      	ldr	r2, [pc, #432]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0xb0>
 800219c:	4b69      	ldr	r3, [pc, #420]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a68      	ldr	r2, [pc, #416]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a65      	ldr	r2, [pc, #404]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe ff0a 	bl	8000fd4 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7fe ff06 	bl	8000fd4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e207      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b5b      	ldr	r3, [pc, #364]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0xc0>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fef6 	bl	8000fd4 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7fe fef2 	bl	8000fd4 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1f3      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	4b51      	ldr	r3, [pc, #324]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0xe8>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d063      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800221a:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800222e:	2b08      	cmp	r3, #8
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x152>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1c7      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4937      	ldr	r1, [pc, #220]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002274:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_RCC_OscConfig+0x244>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe feab 	bl	8000fd4 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7fe fea7 	bl	8000fd4 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1a8      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4925      	ldr	r1, [pc, #148]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_OscConfig+0x244>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe8a 	bl	8000fd4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe fe86 	bl	8000fd4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e187      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d036      	beq.n	800235c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_RCC_OscConfig+0x248>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7fe fe6a 	bl	8000fd4 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7fe fe66 	bl	8000fd4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e167      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x240>)
 8002318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x200>
 8002322:	e01b      	b.n	800235c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_OscConfig+0x248>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7fe fe53 	bl	8000fd4 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	e00e      	b.n	8002350 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002332:	f7fe fe4f 	bl	8000fd4 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d907      	bls.n	8002350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e150      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
 8002344:	40023800 	.word	0x40023800
 8002348:	42470000 	.word	0x42470000
 800234c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b88      	ldr	r3, [pc, #544]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ea      	bne.n	8002332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8097 	beq.w	8002498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4b81      	ldr	r3, [pc, #516]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b7d      	ldr	r3, [pc, #500]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a7c      	ldr	r2, [pc, #496]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b7a      	ldr	r3, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b77      	ldr	r3, [pc, #476]	; (8002578 <HAL_RCC_OscConfig+0x474>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b74      	ldr	r3, [pc, #464]	; (8002578 <HAL_RCC_OscConfig+0x474>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a73      	ldr	r2, [pc, #460]	; (8002578 <HAL_RCC_OscConfig+0x474>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fe0f 	bl	8000fd4 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7fe fe0b 	bl	8000fd4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e10c      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_RCC_OscConfig+0x474>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x2ea>
 80023e0:	4b64      	ldr	r3, [pc, #400]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	4a63      	ldr	r2, [pc, #396]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6713      	str	r3, [r2, #112]	; 0x70
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x324>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x30c>
 80023f6:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	4a5e      	ldr	r2, [pc, #376]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	6713      	str	r3, [r2, #112]	; 0x70
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a5b      	ldr	r2, [pc, #364]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x324>
 8002410:	4b58      	ldr	r3, [pc, #352]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a57      	ldr	r2, [pc, #348]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	4b55      	ldr	r3, [pc, #340]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a54      	ldr	r2, [pc, #336]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002422:	f023 0304 	bic.w	r3, r3, #4
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d015      	beq.n	800245c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fdd0 	bl	8000fd4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe fdcc 	bl	8000fd4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0cb      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244e:	4b49      	ldr	r3, [pc, #292]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ee      	beq.n	8002438 <HAL_RCC_OscConfig+0x334>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7fe fdba 	bl	8000fd4 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fdb6 	bl	8000fd4 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0b5      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247a:	4b3e      	ldr	r3, [pc, #248]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ee      	bne.n	8002464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a38      	ldr	r2, [pc, #224]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a1 	beq.w	80025e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a2:	4b34      	ldr	r3, [pc, #208]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d05c      	beq.n	8002568 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d141      	bne.n	800253a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_RCC_OscConfig+0x478>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe fd8a 	bl	8000fd4 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fd86 	bl	8000fd4 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e087      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	019b      	lsls	r3, r3, #6
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	3b01      	subs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	491b      	ldr	r1, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x478>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe fd5f 	bl	8000fd4 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fd5b 	bl	8000fd4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e05c      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x416>
 8002538:	e054      	b.n	80025e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_RCC_OscConfig+0x478>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe fd48 	bl	8000fd4 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fd44 	bl	8000fd4 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e045      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_OscConfig+0x470>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x444>
 8002566:	e03d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e038      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
 8002574:	40023800 	.word	0x40023800
 8002578:	40007000 	.word	0x40007000
 800257c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_RCC_OscConfig+0x4ec>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d028      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d121      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d11a      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b0:	4013      	ands	r3, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d111      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	3b01      	subs	r3, #1
 80025ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0cc      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d90c      	bls.n	8002630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002652:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	494d      	ldr	r1, [pc, #308]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d044      	beq.n	8002714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d119      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e067      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4934      	ldr	r1, [pc, #208]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e4:	f7fe fc76 	bl	8000fd4 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7fe fc72 	bl	8000fd4 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e04f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d20c      	bcs.n	800273c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e032      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4916      	ldr	r1, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277a:	f000 f821 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800277e:	4602      	mov	r2, r0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	490a      	ldr	r1, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	5ccb      	ldrb	r3, [r1, r3]
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fbd6 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00
 80027b0:	40023800 	.word	0x40023800
 80027b4:	08005390 	.word	0x08005390
 80027b8:	20000000 	.word	0x20000000
 80027bc:	20000004 	.word	0x20000004

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c4:	b094      	sub	sp, #80	; 0x50
 80027c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d8:	4b79      	ldr	r3, [pc, #484]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d00d      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x40>
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	f200 80e1 	bhi.w	80029ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x34>
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x3a>
 80027f2:	e0db      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f8:	e0db      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fa:	4b73      	ldr	r3, [pc, #460]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80027fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027fe:	e0d8      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002800:	4b6f      	ldr	r3, [pc, #444]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002808:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280a:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d063      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002816:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	2200      	movs	r2, #0
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002820:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
 800282a:	2300      	movs	r3, #0
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
 800282e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002832:	4622      	mov	r2, r4
 8002834:	462b      	mov	r3, r5
 8002836:	f04f 0000 	mov.w	r0, #0
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	0159      	lsls	r1, r3, #5
 8002840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002844:	0150      	lsls	r0, r2, #5
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4621      	mov	r1, r4
 800284c:	1a51      	subs	r1, r2, r1
 800284e:	6139      	str	r1, [r7, #16]
 8002850:	4629      	mov	r1, r5
 8002852:	eb63 0301 	sbc.w	r3, r3, r1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002864:	4659      	mov	r1, fp
 8002866:	018b      	lsls	r3, r1, #6
 8002868:	4651      	mov	r1, sl
 800286a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286e:	4651      	mov	r1, sl
 8002870:	018a      	lsls	r2, r1, #6
 8002872:	4651      	mov	r1, sl
 8002874:	ebb2 0801 	subs.w	r8, r2, r1
 8002878:	4659      	mov	r1, fp
 800287a:	eb63 0901 	sbc.w	r9, r3, r1
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800288a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800288e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002892:	4690      	mov	r8, r2
 8002894:	4699      	mov	r9, r3
 8002896:	4623      	mov	r3, r4
 8002898:	eb18 0303 	adds.w	r3, r8, r3
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	462b      	mov	r3, r5
 80028a0:	eb49 0303 	adc.w	r3, r9, r3
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028b2:	4629      	mov	r1, r5
 80028b4:	024b      	lsls	r3, r1, #9
 80028b6:	4621      	mov	r1, r4
 80028b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028bc:	4621      	mov	r1, r4
 80028be:	024a      	lsls	r2, r1, #9
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	2200      	movs	r2, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028d0:	f7fd fcd6 	bl	8000280 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028dc:	e058      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	2200      	movs	r2, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	4611      	mov	r1, r2
 80028ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ee:	623b      	str	r3, [r7, #32]
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028f8:	4642      	mov	r2, r8
 80028fa:	464b      	mov	r3, r9
 80028fc:	f04f 0000 	mov.w	r0, #0
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	0159      	lsls	r1, r3, #5
 8002906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290a:	0150      	lsls	r0, r2, #5
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4641      	mov	r1, r8
 8002912:	ebb2 0a01 	subs.w	sl, r2, r1
 8002916:	4649      	mov	r1, r9
 8002918:	eb63 0b01 	sbc.w	fp, r3, r1
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002928:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800292c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002930:	ebb2 040a 	subs.w	r4, r2, sl
 8002934:	eb63 050b 	sbc.w	r5, r3, fp
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	00eb      	lsls	r3, r5, #3
 8002942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002946:	00e2      	lsls	r2, r4, #3
 8002948:	4614      	mov	r4, r2
 800294a:	461d      	mov	r5, r3
 800294c:	4643      	mov	r3, r8
 800294e:	18e3      	adds	r3, r4, r3
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	464b      	mov	r3, r9
 8002954:	eb45 0303 	adc.w	r3, r5, r3
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002966:	4629      	mov	r1, r5
 8002968:	028b      	lsls	r3, r1, #10
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002970:	4621      	mov	r1, r4
 8002972:	028a      	lsls	r2, r1, #10
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297a:	2200      	movs	r2, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	61fa      	str	r2, [r7, #28]
 8002980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002984:	f7fd fc7c 	bl	8000280 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4613      	mov	r3, r2
 800298e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	3301      	adds	r3, #1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029aa:	e002      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3750      	adds	r7, #80	; 0x50
 80029b8:	46bd      	mov	sp, r7
 80029ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	007a1200 	.word	0x007a1200

080029cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e8:	f7ff fff0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	080053a0 	.word	0x080053a0

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a10:	f7ff ffdc 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0b5b      	lsrs	r3, r3, #13
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4903      	ldr	r1, [pc, #12]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	080053a0 	.word	0x080053a0

08002a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e042      	b.n	8002acc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe f902 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fa09 	bl	8002e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d175      	bne.n	8002be0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_UART_Transmit+0x2c>
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e06e      	b.n	8002be2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2221      	movs	r2, #33	; 0x21
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b12:	f7fe fa5f 	bl	8000fd4 <HAL_GetTick>
 8002b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	88fa      	ldrh	r2, [r7, #6]
 8002b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2c:	d108      	bne.n	8002b40 <HAL_UART_Transmit+0x6c>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d104      	bne.n	8002b40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	e003      	b.n	8002b48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b48:	e02e      	b.n	8002ba8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2180      	movs	r1, #128	; 0x80
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f8df 	bl	8002d18 <UART_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e03a      	b.n	8002be2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	3302      	adds	r3, #2
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	e007      	b.n	8002b9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1cb      	bne.n	8002b4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2140      	movs	r1, #64	; 0x40
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f8ab 	bl	8002d18 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e006      	b.n	8002be2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b08a      	sub	sp, #40	; 0x28
 8002bee:	af02      	add	r7, sp, #8
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 8081 	bne.w	8002d0e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Receive+0x2e>
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e079      	b.n	8002d10 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2222      	movs	r2, #34	; 0x22
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c30:	f7fe f9d0 	bl	8000fd4 <HAL_GetTick>
 8002c34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4a:	d108      	bne.n	8002c5e <HAL_UART_Receive+0x74>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e003      	b.n	8002c66 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c66:	e047      	b.n	8002cf8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2120      	movs	r1, #32
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f850 	bl	8002d18 <UART_WaitOnFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e042      	b.n	8002d10 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10c      	bne.n	8002caa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e01f      	b.n	8002cea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb2:	d007      	beq.n	8002cc4 <HAL_UART_Receive+0xda>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <HAL_UART_Receive+0xe8>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e008      	b.n	8002ce4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1b2      	bne.n	8002c68 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d28:	e03b      	b.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d037      	beq.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe f94f 	bl	8000fd4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e03a      	b.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d023      	beq.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b80      	cmp	r3, #128	; 0x80
 8002d5e:	d020      	beq.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d01d      	beq.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d116      	bne.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f81d 	bl	8002dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2208      	movs	r2, #8
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e00f      	b.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4013      	ands	r3, r2
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d0b4      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b095      	sub	sp, #84	; 0x54
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df2:	643a      	str	r2, [r7, #64]	; 0x40
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002df8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e5      	bne.n	8002dd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3314      	adds	r3, #20
 8002e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2e:	e841 2300 	strex	r3, r2, [r1]
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e5      	bne.n	8002e06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d119      	bne.n	8002e76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	330c      	adds	r3, #12
 8002e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f023 0310 	bic.w	r3, r3, #16
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e62:	61ba      	str	r2, [r7, #24]
 8002e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	6979      	ldr	r1, [r7, #20]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e5      	bne.n	8002e42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e84:	bf00      	nop
 8002e86:	3754      	adds	r7, #84	; 0x54
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e94:	b0c0      	sub	sp, #256	; 0x100
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	68d9      	ldr	r1, [r3, #12]
 8002eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	ea40 0301 	orr.w	r3, r0, r1
 8002eb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ee8:	f021 010c 	bic.w	r1, r1, #12
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	6999      	ldr	r1, [r3, #24]
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	ea40 0301 	orr.w	r3, r0, r1
 8002f16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b8f      	ldr	r3, [pc, #572]	; (800315c <UART_SetConfig+0x2cc>)
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d005      	beq.n	8002f30 <UART_SetConfig+0xa0>
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b8d      	ldr	r3, [pc, #564]	; (8003160 <UART_SetConfig+0x2d0>)
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d104      	bne.n	8002f3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f30:	f7ff fd6c 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8002f34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f38:	e003      	b.n	8002f42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f3a:	f7ff fd53 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 8002f3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4c:	f040 810c 	bne.w	8003168 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f62:	4622      	mov	r2, r4
 8002f64:	462b      	mov	r3, r5
 8002f66:	1891      	adds	r1, r2, r2
 8002f68:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f6a:	415b      	adcs	r3, r3
 8002f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f72:	4621      	mov	r1, r4
 8002f74:	eb12 0801 	adds.w	r8, r2, r1
 8002f78:	4629      	mov	r1, r5
 8002f7a:	eb43 0901 	adc.w	r9, r3, r1
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f92:	4690      	mov	r8, r2
 8002f94:	4699      	mov	r9, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	eb18 0303 	adds.w	r3, r8, r3
 8002f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fa0:	462b      	mov	r3, r5
 8002fa2:	eb49 0303 	adc.w	r3, r9, r3
 8002fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	18db      	adds	r3, r3, r3
 8002fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	eb42 0303 	adc.w	r3, r2, r3
 8002fca:	657b      	str	r3, [r7, #84]	; 0x54
 8002fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fd4:	f7fd f954 	bl	8000280 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4b61      	ldr	r3, [pc, #388]	; (8003164 <UART_SetConfig+0x2d4>)
 8002fde:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	011c      	lsls	r4, r3, #4
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ff0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ff4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	1891      	adds	r1, r2, r2
 8002ffe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003000:	415b      	adcs	r3, r3
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003008:	4641      	mov	r1, r8
 800300a:	eb12 0a01 	adds.w	sl, r2, r1
 800300e:	4649      	mov	r1, r9
 8003010:	eb43 0b01 	adc.w	fp, r3, r1
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003020:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003028:	4692      	mov	sl, r2
 800302a:	469b      	mov	fp, r3
 800302c:	4643      	mov	r3, r8
 800302e:	eb1a 0303 	adds.w	r3, sl, r3
 8003032:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003036:	464b      	mov	r3, r9
 8003038:	eb4b 0303 	adc.w	r3, fp, r3
 800303c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800304c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003050:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003054:	460b      	mov	r3, r1
 8003056:	18db      	adds	r3, r3, r3
 8003058:	643b      	str	r3, [r7, #64]	; 0x40
 800305a:	4613      	mov	r3, r2
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	647b      	str	r3, [r7, #68]	; 0x44
 8003062:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800306a:	f7fd f909 	bl	8000280 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4611      	mov	r1, r2
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <UART_SetConfig+0x2d4>)
 8003076:	fba3 2301 	umull	r2, r3, r3, r1
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	2264      	movs	r2, #100	; 0x64
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	1acb      	subs	r3, r1, r3
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <UART_SetConfig+0x2d4>)
 800308c:	fba3 2302 	umull	r2, r3, r3, r2
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003098:	441c      	add	r4, r3
 800309a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	1891      	adds	r1, r2, r2
 80030b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030b4:	415b      	adcs	r3, r3
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030bc:	4641      	mov	r1, r8
 80030be:	1851      	adds	r1, r2, r1
 80030c0:	6339      	str	r1, [r7, #48]	; 0x30
 80030c2:	4649      	mov	r1, r9
 80030c4:	414b      	adcs	r3, r1
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030d4:	4659      	mov	r1, fp
 80030d6:	00cb      	lsls	r3, r1, #3
 80030d8:	4651      	mov	r1, sl
 80030da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030de:	4651      	mov	r1, sl
 80030e0:	00ca      	lsls	r2, r1, #3
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	4642      	mov	r2, r8
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030f0:	464b      	mov	r3, r9
 80030f2:	460a      	mov	r2, r1
 80030f4:	eb42 0303 	adc.w	r3, r2, r3
 80030f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003108:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800310c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003110:	460b      	mov	r3, r1
 8003112:	18db      	adds	r3, r3, r3
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
 8003116:	4613      	mov	r3, r2
 8003118:	eb42 0303 	adc.w	r3, r2, r3
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003122:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003126:	f7fd f8ab 	bl	8000280 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <UART_SetConfig+0x2d4>)
 8003130:	fba3 1302 	umull	r1, r3, r3, r2
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	2164      	movs	r1, #100	; 0x64
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	3332      	adds	r3, #50	; 0x32
 8003142:	4a08      	ldr	r2, [pc, #32]	; (8003164 <UART_SetConfig+0x2d4>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	f003 0207 	and.w	r2, r3, #7
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4422      	add	r2, r4
 8003156:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003158:	e106      	b.n	8003368 <UART_SetConfig+0x4d8>
 800315a:	bf00      	nop
 800315c:	40011000 	.word	0x40011000
 8003160:	40011400 	.word	0x40011400
 8003164:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003172:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800317a:	4642      	mov	r2, r8
 800317c:	464b      	mov	r3, r9
 800317e:	1891      	adds	r1, r2, r2
 8003180:	6239      	str	r1, [r7, #32]
 8003182:	415b      	adcs	r3, r3
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800318a:	4641      	mov	r1, r8
 800318c:	1854      	adds	r4, r2, r1
 800318e:	4649      	mov	r1, r9
 8003190:	eb43 0501 	adc.w	r5, r3, r1
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	00eb      	lsls	r3, r5, #3
 800319e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a2:	00e2      	lsls	r2, r4, #3
 80031a4:	4614      	mov	r4, r2
 80031a6:	461d      	mov	r5, r3
 80031a8:	4643      	mov	r3, r8
 80031aa:	18e3      	adds	r3, r4, r3
 80031ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031b0:	464b      	mov	r3, r9
 80031b2:	eb45 0303 	adc.w	r3, r5, r3
 80031b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031d6:	4629      	mov	r1, r5
 80031d8:	008b      	lsls	r3, r1, #2
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e0:	4621      	mov	r1, r4
 80031e2:	008a      	lsls	r2, r1, #2
 80031e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031e8:	f7fd f84a 	bl	8000280 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4b60      	ldr	r3, [pc, #384]	; (8003374 <UART_SetConfig+0x4e4>)
 80031f2:	fba3 2302 	umull	r2, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	011c      	lsls	r4, r3, #4
 80031fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003204:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003208:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	61b9      	str	r1, [r7, #24]
 8003214:	415b      	adcs	r3, r3
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800321c:	4641      	mov	r1, r8
 800321e:	1851      	adds	r1, r2, r1
 8003220:	6139      	str	r1, [r7, #16]
 8003222:	4649      	mov	r1, r9
 8003224:	414b      	adcs	r3, r1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003234:	4659      	mov	r1, fp
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323e:	4651      	mov	r1, sl
 8003240:	00ca      	lsls	r2, r1, #3
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	4603      	mov	r3, r0
 8003248:	4642      	mov	r2, r8
 800324a:	189b      	adds	r3, r3, r2
 800324c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003250:	464b      	mov	r3, r9
 8003252:	460a      	mov	r2, r1
 8003254:	eb42 0303 	adc.w	r3, r2, r3
 8003258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	67bb      	str	r3, [r7, #120]	; 0x78
 8003266:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003274:	4649      	mov	r1, r9
 8003276:	008b      	lsls	r3, r1, #2
 8003278:	4641      	mov	r1, r8
 800327a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800327e:	4641      	mov	r1, r8
 8003280:	008a      	lsls	r2, r1, #2
 8003282:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003286:	f7fc fffb 	bl	8000280 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4611      	mov	r1, r2
 8003290:	4b38      	ldr	r3, [pc, #224]	; (8003374 <UART_SetConfig+0x4e4>)
 8003292:	fba3 2301 	umull	r2, r3, r3, r1
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2264      	movs	r2, #100	; 0x64
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	1acb      	subs	r3, r1, r3
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	3332      	adds	r3, #50	; 0x32
 80032a4:	4a33      	ldr	r2, [pc, #204]	; (8003374 <UART_SetConfig+0x4e4>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b0:	441c      	add	r4, r3
 80032b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b6:	2200      	movs	r2, #0
 80032b8:	673b      	str	r3, [r7, #112]	; 0x70
 80032ba:	677a      	str	r2, [r7, #116]	; 0x74
 80032bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032c0:	4642      	mov	r2, r8
 80032c2:	464b      	mov	r3, r9
 80032c4:	1891      	adds	r1, r2, r2
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	415b      	adcs	r3, r3
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d0:	4641      	mov	r1, r8
 80032d2:	1851      	adds	r1, r2, r1
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	4649      	mov	r1, r9
 80032d8:	414b      	adcs	r3, r1
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032e8:	4659      	mov	r1, fp
 80032ea:	00cb      	lsls	r3, r1, #3
 80032ec:	4651      	mov	r1, sl
 80032ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f2:	4651      	mov	r1, sl
 80032f4:	00ca      	lsls	r2, r1, #3
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	4642      	mov	r2, r8
 80032fe:	189b      	adds	r3, r3, r2
 8003300:	66bb      	str	r3, [r7, #104]	; 0x68
 8003302:	464b      	mov	r3, r9
 8003304:	460a      	mov	r2, r1
 8003306:	eb42 0303 	adc.w	r3, r2, r3
 800330a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
 8003316:	667a      	str	r2, [r7, #100]	; 0x64
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003324:	4649      	mov	r1, r9
 8003326:	008b      	lsls	r3, r1, #2
 8003328:	4641      	mov	r1, r8
 800332a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332e:	4641      	mov	r1, r8
 8003330:	008a      	lsls	r2, r1, #2
 8003332:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003336:	f7fc ffa3 	bl	8000280 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <UART_SetConfig+0x4e4>)
 8003340:	fba3 1302 	umull	r1, r3, r3, r2
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	2164      	movs	r1, #100	; 0x64
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	3332      	adds	r3, #50	; 0x32
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <UART_SetConfig+0x4e4>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	f003 020f 	and.w	r2, r3, #15
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4422      	add	r2, r4
 8003366:	609a      	str	r2, [r3, #8]
}
 8003368:	bf00      	nop
 800336a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800336e:	46bd      	mov	sp, r7
 8003370:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003374:	51eb851f 	.word	0x51eb851f

08003378 <std>:
 8003378:	2300      	movs	r3, #0
 800337a:	b510      	push	{r4, lr}
 800337c:	4604      	mov	r4, r0
 800337e:	e9c0 3300 	strd	r3, r3, [r0]
 8003382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003386:	6083      	str	r3, [r0, #8]
 8003388:	8181      	strh	r1, [r0, #12]
 800338a:	6643      	str	r3, [r0, #100]	; 0x64
 800338c:	81c2      	strh	r2, [r0, #14]
 800338e:	6183      	str	r3, [r0, #24]
 8003390:	4619      	mov	r1, r3
 8003392:	2208      	movs	r2, #8
 8003394:	305c      	adds	r0, #92	; 0x5c
 8003396:	f000 fad7 	bl	8003948 <memset>
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <std+0x58>)
 800339c:	6263      	str	r3, [r4, #36]	; 0x24
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <std+0x5c>)
 80033a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <std+0x60>)
 80033a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <std+0x64>)
 80033a8:	6323      	str	r3, [r4, #48]	; 0x30
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <std+0x68>)
 80033ac:	6224      	str	r4, [r4, #32]
 80033ae:	429c      	cmp	r4, r3
 80033b0:	d006      	beq.n	80033c0 <std+0x48>
 80033b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80033b6:	4294      	cmp	r4, r2
 80033b8:	d002      	beq.n	80033c0 <std+0x48>
 80033ba:	33d0      	adds	r3, #208	; 0xd0
 80033bc:	429c      	cmp	r4, r3
 80033be:	d105      	bne.n	80033cc <std+0x54>
 80033c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c8:	f000 bb36 	b.w	8003a38 <__retarget_lock_init_recursive>
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	bf00      	nop
 80033d0:	08003799 	.word	0x08003799
 80033d4:	080037bb 	.word	0x080037bb
 80033d8:	080037f3 	.word	0x080037f3
 80033dc:	08003817 	.word	0x08003817
 80033e0:	20000140 	.word	0x20000140

080033e4 <stdio_exit_handler>:
 80033e4:	4a02      	ldr	r2, [pc, #8]	; (80033f0 <stdio_exit_handler+0xc>)
 80033e6:	4903      	ldr	r1, [pc, #12]	; (80033f4 <stdio_exit_handler+0x10>)
 80033e8:	4803      	ldr	r0, [pc, #12]	; (80033f8 <stdio_exit_handler+0x14>)
 80033ea:	f000 b869 	b.w	80034c0 <_fwalk_sglue>
 80033ee:	bf00      	nop
 80033f0:	2000000c 	.word	0x2000000c
 80033f4:	08004bbd 	.word	0x08004bbd
 80033f8:	20000018 	.word	0x20000018

080033fc <cleanup_stdio>:
 80033fc:	6841      	ldr	r1, [r0, #4]
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <cleanup_stdio+0x34>)
 8003400:	4299      	cmp	r1, r3
 8003402:	b510      	push	{r4, lr}
 8003404:	4604      	mov	r4, r0
 8003406:	d001      	beq.n	800340c <cleanup_stdio+0x10>
 8003408:	f001 fbd8 	bl	8004bbc <_fflush_r>
 800340c:	68a1      	ldr	r1, [r4, #8]
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <cleanup_stdio+0x38>)
 8003410:	4299      	cmp	r1, r3
 8003412:	d002      	beq.n	800341a <cleanup_stdio+0x1e>
 8003414:	4620      	mov	r0, r4
 8003416:	f001 fbd1 	bl	8004bbc <_fflush_r>
 800341a:	68e1      	ldr	r1, [r4, #12]
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <cleanup_stdio+0x3c>)
 800341e:	4299      	cmp	r1, r3
 8003420:	d004      	beq.n	800342c <cleanup_stdio+0x30>
 8003422:	4620      	mov	r0, r4
 8003424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003428:	f001 bbc8 	b.w	8004bbc <_fflush_r>
 800342c:	bd10      	pop	{r4, pc}
 800342e:	bf00      	nop
 8003430:	20000140 	.word	0x20000140
 8003434:	200001a8 	.word	0x200001a8
 8003438:	20000210 	.word	0x20000210

0800343c <global_stdio_init.part.0>:
 800343c:	b510      	push	{r4, lr}
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <global_stdio_init.part.0+0x30>)
 8003440:	4c0b      	ldr	r4, [pc, #44]	; (8003470 <global_stdio_init.part.0+0x34>)
 8003442:	4a0c      	ldr	r2, [pc, #48]	; (8003474 <global_stdio_init.part.0+0x38>)
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	4620      	mov	r0, r4
 8003448:	2200      	movs	r2, #0
 800344a:	2104      	movs	r1, #4
 800344c:	f7ff ff94 	bl	8003378 <std>
 8003450:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003454:	2201      	movs	r2, #1
 8003456:	2109      	movs	r1, #9
 8003458:	f7ff ff8e 	bl	8003378 <std>
 800345c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003460:	2202      	movs	r2, #2
 8003462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003466:	2112      	movs	r1, #18
 8003468:	f7ff bf86 	b.w	8003378 <std>
 800346c:	20000278 	.word	0x20000278
 8003470:	20000140 	.word	0x20000140
 8003474:	080033e5 	.word	0x080033e5

08003478 <__sfp_lock_acquire>:
 8003478:	4801      	ldr	r0, [pc, #4]	; (8003480 <__sfp_lock_acquire+0x8>)
 800347a:	f000 bade 	b.w	8003a3a <__retarget_lock_acquire_recursive>
 800347e:	bf00      	nop
 8003480:	20000281 	.word	0x20000281

08003484 <__sfp_lock_release>:
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <__sfp_lock_release+0x8>)
 8003486:	f000 bad9 	b.w	8003a3c <__retarget_lock_release_recursive>
 800348a:	bf00      	nop
 800348c:	20000281 	.word	0x20000281

08003490 <__sinit>:
 8003490:	b510      	push	{r4, lr}
 8003492:	4604      	mov	r4, r0
 8003494:	f7ff fff0 	bl	8003478 <__sfp_lock_acquire>
 8003498:	6a23      	ldr	r3, [r4, #32]
 800349a:	b11b      	cbz	r3, 80034a4 <__sinit+0x14>
 800349c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a0:	f7ff bff0 	b.w	8003484 <__sfp_lock_release>
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <__sinit+0x28>)
 80034a6:	6223      	str	r3, [r4, #32]
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <__sinit+0x2c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f5      	bne.n	800349c <__sinit+0xc>
 80034b0:	f7ff ffc4 	bl	800343c <global_stdio_init.part.0>
 80034b4:	e7f2      	b.n	800349c <__sinit+0xc>
 80034b6:	bf00      	nop
 80034b8:	080033fd 	.word	0x080033fd
 80034bc:	20000278 	.word	0x20000278

080034c0 <_fwalk_sglue>:
 80034c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c4:	4607      	mov	r7, r0
 80034c6:	4688      	mov	r8, r1
 80034c8:	4614      	mov	r4, r2
 80034ca:	2600      	movs	r6, #0
 80034cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034d0:	f1b9 0901 	subs.w	r9, r9, #1
 80034d4:	d505      	bpl.n	80034e2 <_fwalk_sglue+0x22>
 80034d6:	6824      	ldr	r4, [r4, #0]
 80034d8:	2c00      	cmp	r4, #0
 80034da:	d1f7      	bne.n	80034cc <_fwalk_sglue+0xc>
 80034dc:	4630      	mov	r0, r6
 80034de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e2:	89ab      	ldrh	r3, [r5, #12]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d907      	bls.n	80034f8 <_fwalk_sglue+0x38>
 80034e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034ec:	3301      	adds	r3, #1
 80034ee:	d003      	beq.n	80034f8 <_fwalk_sglue+0x38>
 80034f0:	4629      	mov	r1, r5
 80034f2:	4638      	mov	r0, r7
 80034f4:	47c0      	blx	r8
 80034f6:	4306      	orrs	r6, r0
 80034f8:	3568      	adds	r5, #104	; 0x68
 80034fa:	e7e9      	b.n	80034d0 <_fwalk_sglue+0x10>

080034fc <iprintf>:
 80034fc:	b40f      	push	{r0, r1, r2, r3}
 80034fe:	b507      	push	{r0, r1, r2, lr}
 8003500:	4906      	ldr	r1, [pc, #24]	; (800351c <iprintf+0x20>)
 8003502:	ab04      	add	r3, sp, #16
 8003504:	6808      	ldr	r0, [r1, #0]
 8003506:	f853 2b04 	ldr.w	r2, [r3], #4
 800350a:	6881      	ldr	r1, [r0, #8]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	f000 fd21 	bl	8003f54 <_vfiprintf_r>
 8003512:	b003      	add	sp, #12
 8003514:	f85d eb04 	ldr.w	lr, [sp], #4
 8003518:	b004      	add	sp, #16
 800351a:	4770      	bx	lr
 800351c:	20000064 	.word	0x20000064

08003520 <_puts_r>:
 8003520:	6a03      	ldr	r3, [r0, #32]
 8003522:	b570      	push	{r4, r5, r6, lr}
 8003524:	6884      	ldr	r4, [r0, #8]
 8003526:	4605      	mov	r5, r0
 8003528:	460e      	mov	r6, r1
 800352a:	b90b      	cbnz	r3, 8003530 <_puts_r+0x10>
 800352c:	f7ff ffb0 	bl	8003490 <__sinit>
 8003530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003532:	07db      	lsls	r3, r3, #31
 8003534:	d405      	bmi.n	8003542 <_puts_r+0x22>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	0598      	lsls	r0, r3, #22
 800353a:	d402      	bmi.n	8003542 <_puts_r+0x22>
 800353c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800353e:	f000 fa7c 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	0719      	lsls	r1, r3, #28
 8003546:	d513      	bpl.n	8003570 <_puts_r+0x50>
 8003548:	6923      	ldr	r3, [r4, #16]
 800354a:	b18b      	cbz	r3, 8003570 <_puts_r+0x50>
 800354c:	3e01      	subs	r6, #1
 800354e:	68a3      	ldr	r3, [r4, #8]
 8003550:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003554:	3b01      	subs	r3, #1
 8003556:	60a3      	str	r3, [r4, #8]
 8003558:	b9e9      	cbnz	r1, 8003596 <_puts_r+0x76>
 800355a:	2b00      	cmp	r3, #0
 800355c:	da2e      	bge.n	80035bc <_puts_r+0x9c>
 800355e:	4622      	mov	r2, r4
 8003560:	210a      	movs	r1, #10
 8003562:	4628      	mov	r0, r5
 8003564:	f000 f95b 	bl	800381e <__swbuf_r>
 8003568:	3001      	adds	r0, #1
 800356a:	d007      	beq.n	800357c <_puts_r+0x5c>
 800356c:	250a      	movs	r5, #10
 800356e:	e007      	b.n	8003580 <_puts_r+0x60>
 8003570:	4621      	mov	r1, r4
 8003572:	4628      	mov	r0, r5
 8003574:	f000 f990 	bl	8003898 <__swsetup_r>
 8003578:	2800      	cmp	r0, #0
 800357a:	d0e7      	beq.n	800354c <_puts_r+0x2c>
 800357c:	f04f 35ff 	mov.w	r5, #4294967295
 8003580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003582:	07da      	lsls	r2, r3, #31
 8003584:	d405      	bmi.n	8003592 <_puts_r+0x72>
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	059b      	lsls	r3, r3, #22
 800358a:	d402      	bmi.n	8003592 <_puts_r+0x72>
 800358c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358e:	f000 fa55 	bl	8003a3c <__retarget_lock_release_recursive>
 8003592:	4628      	mov	r0, r5
 8003594:	bd70      	pop	{r4, r5, r6, pc}
 8003596:	2b00      	cmp	r3, #0
 8003598:	da04      	bge.n	80035a4 <_puts_r+0x84>
 800359a:	69a2      	ldr	r2, [r4, #24]
 800359c:	429a      	cmp	r2, r3
 800359e:	dc06      	bgt.n	80035ae <_puts_r+0x8e>
 80035a0:	290a      	cmp	r1, #10
 80035a2:	d004      	beq.n	80035ae <_puts_r+0x8e>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	6022      	str	r2, [r4, #0]
 80035aa:	7019      	strb	r1, [r3, #0]
 80035ac:	e7cf      	b.n	800354e <_puts_r+0x2e>
 80035ae:	4622      	mov	r2, r4
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 f934 	bl	800381e <__swbuf_r>
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1c9      	bne.n	800354e <_puts_r+0x2e>
 80035ba:	e7df      	b.n	800357c <_puts_r+0x5c>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	250a      	movs	r5, #10
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	6022      	str	r2, [r4, #0]
 80035c4:	701d      	strb	r5, [r3, #0]
 80035c6:	e7db      	b.n	8003580 <_puts_r+0x60>

080035c8 <puts>:
 80035c8:	4b02      	ldr	r3, [pc, #8]	; (80035d4 <puts+0xc>)
 80035ca:	4601      	mov	r1, r0
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	f7ff bfa7 	b.w	8003520 <_puts_r>
 80035d2:	bf00      	nop
 80035d4:	20000064 	.word	0x20000064

080035d8 <iscanf>:
 80035d8:	b40f      	push	{r0, r1, r2, r3}
 80035da:	b507      	push	{r0, r1, r2, lr}
 80035dc:	4906      	ldr	r1, [pc, #24]	; (80035f8 <iscanf+0x20>)
 80035de:	ab04      	add	r3, sp, #16
 80035e0:	6808      	ldr	r0, [r1, #0]
 80035e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80035e6:	6841      	ldr	r1, [r0, #4]
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	f001 f8ff 	bl	80047ec <_vfiscanf_r>
 80035ee:	b003      	add	sp, #12
 80035f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80035f4:	b004      	add	sp, #16
 80035f6:	4770      	bx	lr
 80035f8:	20000064 	.word	0x20000064

080035fc <setvbuf>:
 80035fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003600:	461d      	mov	r5, r3
 8003602:	4b54      	ldr	r3, [pc, #336]	; (8003754 <setvbuf+0x158>)
 8003604:	681f      	ldr	r7, [r3, #0]
 8003606:	4604      	mov	r4, r0
 8003608:	460e      	mov	r6, r1
 800360a:	4690      	mov	r8, r2
 800360c:	b127      	cbz	r7, 8003618 <setvbuf+0x1c>
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	b913      	cbnz	r3, 8003618 <setvbuf+0x1c>
 8003612:	4638      	mov	r0, r7
 8003614:	f7ff ff3c 	bl	8003490 <__sinit>
 8003618:	f1b8 0f02 	cmp.w	r8, #2
 800361c:	d006      	beq.n	800362c <setvbuf+0x30>
 800361e:	f1b8 0f01 	cmp.w	r8, #1
 8003622:	f200 8094 	bhi.w	800374e <setvbuf+0x152>
 8003626:	2d00      	cmp	r5, #0
 8003628:	f2c0 8091 	blt.w	800374e <setvbuf+0x152>
 800362c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800362e:	07da      	lsls	r2, r3, #31
 8003630:	d405      	bmi.n	800363e <setvbuf+0x42>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	059b      	lsls	r3, r3, #22
 8003636:	d402      	bmi.n	800363e <setvbuf+0x42>
 8003638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800363a:	f000 f9fe 	bl	8003a3a <__retarget_lock_acquire_recursive>
 800363e:	4621      	mov	r1, r4
 8003640:	4638      	mov	r0, r7
 8003642:	f001 fabb 	bl	8004bbc <_fflush_r>
 8003646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003648:	b141      	cbz	r1, 800365c <setvbuf+0x60>
 800364a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800364e:	4299      	cmp	r1, r3
 8003650:	d002      	beq.n	8003658 <setvbuf+0x5c>
 8003652:	4638      	mov	r0, r7
 8003654:	f000 f9fc 	bl	8003a50 <_free_r>
 8003658:	2300      	movs	r3, #0
 800365a:	6363      	str	r3, [r4, #52]	; 0x34
 800365c:	2300      	movs	r3, #0
 800365e:	61a3      	str	r3, [r4, #24]
 8003660:	6063      	str	r3, [r4, #4]
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	0618      	lsls	r0, r3, #24
 8003666:	d503      	bpl.n	8003670 <setvbuf+0x74>
 8003668:	6921      	ldr	r1, [r4, #16]
 800366a:	4638      	mov	r0, r7
 800366c:	f000 f9f0 	bl	8003a50 <_free_r>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	f1b8 0f02 	cmp.w	r8, #2
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	d05f      	beq.n	8003742 <setvbuf+0x146>
 8003682:	ab01      	add	r3, sp, #4
 8003684:	466a      	mov	r2, sp
 8003686:	4621      	mov	r1, r4
 8003688:	4638      	mov	r0, r7
 800368a:	f001 fabf 	bl	8004c0c <__swhatbuf_r>
 800368e:	89a3      	ldrh	r3, [r4, #12]
 8003690:	4318      	orrs	r0, r3
 8003692:	81a0      	strh	r0, [r4, #12]
 8003694:	bb2d      	cbnz	r5, 80036e2 <setvbuf+0xe6>
 8003696:	9d00      	ldr	r5, [sp, #0]
 8003698:	4628      	mov	r0, r5
 800369a:	f000 fa25 	bl	8003ae8 <malloc>
 800369e:	4606      	mov	r6, r0
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d150      	bne.n	8003746 <setvbuf+0x14a>
 80036a4:	f8dd 9000 	ldr.w	r9, [sp]
 80036a8:	45a9      	cmp	r9, r5
 80036aa:	d13e      	bne.n	800372a <setvbuf+0x12e>
 80036ac:	f04f 35ff 	mov.w	r5, #4294967295
 80036b0:	2200      	movs	r2, #0
 80036b2:	60a2      	str	r2, [r4, #8]
 80036b4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	6122      	str	r2, [r4, #16]
 80036bc:	2201      	movs	r2, #1
 80036be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c2:	6162      	str	r2, [r4, #20]
 80036c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	07d1      	lsls	r1, r2, #31
 80036cc:	81a3      	strh	r3, [r4, #12]
 80036ce:	d404      	bmi.n	80036da <setvbuf+0xde>
 80036d0:	059b      	lsls	r3, r3, #22
 80036d2:	d402      	bmi.n	80036da <setvbuf+0xde>
 80036d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036d6:	f000 f9b1 	bl	8003a3c <__retarget_lock_release_recursive>
 80036da:	4628      	mov	r0, r5
 80036dc:	b003      	add	sp, #12
 80036de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036e2:	2e00      	cmp	r6, #0
 80036e4:	d0d8      	beq.n	8003698 <setvbuf+0x9c>
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	b913      	cbnz	r3, 80036f0 <setvbuf+0xf4>
 80036ea:	4638      	mov	r0, r7
 80036ec:	f7ff fed0 	bl	8003490 <__sinit>
 80036f0:	f1b8 0f01 	cmp.w	r8, #1
 80036f4:	bf08      	it	eq
 80036f6:	89a3      	ldrheq	r3, [r4, #12]
 80036f8:	6026      	str	r6, [r4, #0]
 80036fa:	bf04      	itt	eq
 80036fc:	f043 0301 	orreq.w	r3, r3, #1
 8003700:	81a3      	strheq	r3, [r4, #12]
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	f013 0208 	ands.w	r2, r3, #8
 8003708:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800370c:	d01d      	beq.n	800374a <setvbuf+0x14e>
 800370e:	07da      	lsls	r2, r3, #31
 8003710:	bf41      	itttt	mi
 8003712:	2200      	movmi	r2, #0
 8003714:	426d      	negmi	r5, r5
 8003716:	60a2      	strmi	r2, [r4, #8]
 8003718:	61a5      	strmi	r5, [r4, #24]
 800371a:	bf58      	it	pl
 800371c:	60a5      	strpl	r5, [r4, #8]
 800371e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003720:	f015 0501 	ands.w	r5, r5, #1
 8003724:	d0d4      	beq.n	80036d0 <setvbuf+0xd4>
 8003726:	2500      	movs	r5, #0
 8003728:	e7d7      	b.n	80036da <setvbuf+0xde>
 800372a:	4648      	mov	r0, r9
 800372c:	f000 f9dc 	bl	8003ae8 <malloc>
 8003730:	4606      	mov	r6, r0
 8003732:	2800      	cmp	r0, #0
 8003734:	d0ba      	beq.n	80036ac <setvbuf+0xb0>
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	464d      	mov	r5, r9
 8003740:	e7d1      	b.n	80036e6 <setvbuf+0xea>
 8003742:	2500      	movs	r5, #0
 8003744:	e7b4      	b.n	80036b0 <setvbuf+0xb4>
 8003746:	46a9      	mov	r9, r5
 8003748:	e7f5      	b.n	8003736 <setvbuf+0x13a>
 800374a:	60a2      	str	r2, [r4, #8]
 800374c:	e7e7      	b.n	800371e <setvbuf+0x122>
 800374e:	f04f 35ff 	mov.w	r5, #4294967295
 8003752:	e7c2      	b.n	80036da <setvbuf+0xde>
 8003754:	20000064 	.word	0x20000064

08003758 <siprintf>:
 8003758:	b40e      	push	{r1, r2, r3}
 800375a:	b500      	push	{lr}
 800375c:	b09c      	sub	sp, #112	; 0x70
 800375e:	ab1d      	add	r3, sp, #116	; 0x74
 8003760:	9002      	str	r0, [sp, #8]
 8003762:	9006      	str	r0, [sp, #24]
 8003764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003768:	4809      	ldr	r0, [pc, #36]	; (8003790 <siprintf+0x38>)
 800376a:	9107      	str	r1, [sp, #28]
 800376c:	9104      	str	r1, [sp, #16]
 800376e:	4909      	ldr	r1, [pc, #36]	; (8003794 <siprintf+0x3c>)
 8003770:	f853 2b04 	ldr.w	r2, [r3], #4
 8003774:	9105      	str	r1, [sp, #20]
 8003776:	6800      	ldr	r0, [r0, #0]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	a902      	add	r1, sp, #8
 800377c:	f000 fac2 	bl	8003d04 <_svfiprintf_r>
 8003780:	9b02      	ldr	r3, [sp, #8]
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	b01c      	add	sp, #112	; 0x70
 8003788:	f85d eb04 	ldr.w	lr, [sp], #4
 800378c:	b003      	add	sp, #12
 800378e:	4770      	bx	lr
 8003790:	20000064 	.word	0x20000064
 8003794:	ffff0208 	.word	0xffff0208

08003798 <__sread>:
 8003798:	b510      	push	{r4, lr}
 800379a:	460c      	mov	r4, r1
 800379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a0:	f000 f8fc 	bl	800399c <_read_r>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	bfab      	itete	ge
 80037a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037aa:	89a3      	ldrhlt	r3, [r4, #12]
 80037ac:	181b      	addge	r3, r3, r0
 80037ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037b2:	bfac      	ite	ge
 80037b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037b6:	81a3      	strhlt	r3, [r4, #12]
 80037b8:	bd10      	pop	{r4, pc}

080037ba <__swrite>:
 80037ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037be:	461f      	mov	r7, r3
 80037c0:	898b      	ldrh	r3, [r1, #12]
 80037c2:	05db      	lsls	r3, r3, #23
 80037c4:	4605      	mov	r5, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	4616      	mov	r6, r2
 80037ca:	d505      	bpl.n	80037d8 <__swrite+0x1e>
 80037cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d0:	2302      	movs	r3, #2
 80037d2:	2200      	movs	r2, #0
 80037d4:	f000 f8d0 	bl	8003978 <_lseek_r>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	4632      	mov	r2, r6
 80037e6:	463b      	mov	r3, r7
 80037e8:	4628      	mov	r0, r5
 80037ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ee:	f000 b8e7 	b.w	80039c0 <_write_r>

080037f2 <__sseek>:
 80037f2:	b510      	push	{r4, lr}
 80037f4:	460c      	mov	r4, r1
 80037f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fa:	f000 f8bd 	bl	8003978 <_lseek_r>
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	bf15      	itete	ne
 8003804:	6560      	strne	r0, [r4, #84]	; 0x54
 8003806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800380a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800380e:	81a3      	strheq	r3, [r4, #12]
 8003810:	bf18      	it	ne
 8003812:	81a3      	strhne	r3, [r4, #12]
 8003814:	bd10      	pop	{r4, pc}

08003816 <__sclose>:
 8003816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800381a:	f000 b89d 	b.w	8003958 <_close_r>

0800381e <__swbuf_r>:
 800381e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003820:	460e      	mov	r6, r1
 8003822:	4614      	mov	r4, r2
 8003824:	4605      	mov	r5, r0
 8003826:	b118      	cbz	r0, 8003830 <__swbuf_r+0x12>
 8003828:	6a03      	ldr	r3, [r0, #32]
 800382a:	b90b      	cbnz	r3, 8003830 <__swbuf_r+0x12>
 800382c:	f7ff fe30 	bl	8003490 <__sinit>
 8003830:	69a3      	ldr	r3, [r4, #24]
 8003832:	60a3      	str	r3, [r4, #8]
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	071a      	lsls	r2, r3, #28
 8003838:	d525      	bpl.n	8003886 <__swbuf_r+0x68>
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	b31b      	cbz	r3, 8003886 <__swbuf_r+0x68>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	6922      	ldr	r2, [r4, #16]
 8003842:	1a98      	subs	r0, r3, r2
 8003844:	6963      	ldr	r3, [r4, #20]
 8003846:	b2f6      	uxtb	r6, r6
 8003848:	4283      	cmp	r3, r0
 800384a:	4637      	mov	r7, r6
 800384c:	dc04      	bgt.n	8003858 <__swbuf_r+0x3a>
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f001 f9b3 	bl	8004bbc <_fflush_r>
 8003856:	b9e0      	cbnz	r0, 8003892 <__swbuf_r+0x74>
 8003858:	68a3      	ldr	r3, [r4, #8]
 800385a:	3b01      	subs	r3, #1
 800385c:	60a3      	str	r3, [r4, #8]
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	6022      	str	r2, [r4, #0]
 8003864:	701e      	strb	r6, [r3, #0]
 8003866:	6962      	ldr	r2, [r4, #20]
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	429a      	cmp	r2, r3
 800386c:	d004      	beq.n	8003878 <__swbuf_r+0x5a>
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	07db      	lsls	r3, r3, #31
 8003872:	d506      	bpl.n	8003882 <__swbuf_r+0x64>
 8003874:	2e0a      	cmp	r6, #10
 8003876:	d104      	bne.n	8003882 <__swbuf_r+0x64>
 8003878:	4621      	mov	r1, r4
 800387a:	4628      	mov	r0, r5
 800387c:	f001 f99e 	bl	8004bbc <_fflush_r>
 8003880:	b938      	cbnz	r0, 8003892 <__swbuf_r+0x74>
 8003882:	4638      	mov	r0, r7
 8003884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003886:	4621      	mov	r1, r4
 8003888:	4628      	mov	r0, r5
 800388a:	f000 f805 	bl	8003898 <__swsetup_r>
 800388e:	2800      	cmp	r0, #0
 8003890:	d0d5      	beq.n	800383e <__swbuf_r+0x20>
 8003892:	f04f 37ff 	mov.w	r7, #4294967295
 8003896:	e7f4      	b.n	8003882 <__swbuf_r+0x64>

08003898 <__swsetup_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <__swsetup_r+0xac>)
 800389c:	4605      	mov	r5, r0
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	460c      	mov	r4, r1
 80038a2:	b118      	cbz	r0, 80038ac <__swsetup_r+0x14>
 80038a4:	6a03      	ldr	r3, [r0, #32]
 80038a6:	b90b      	cbnz	r3, 80038ac <__swsetup_r+0x14>
 80038a8:	f7ff fdf2 	bl	8003490 <__sinit>
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b2:	0718      	lsls	r0, r3, #28
 80038b4:	d422      	bmi.n	80038fc <__swsetup_r+0x64>
 80038b6:	06d9      	lsls	r1, r3, #27
 80038b8:	d407      	bmi.n	80038ca <__swsetup_r+0x32>
 80038ba:	2309      	movs	r3, #9
 80038bc:	602b      	str	r3, [r5, #0]
 80038be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e034      	b.n	8003934 <__swsetup_r+0x9c>
 80038ca:	0758      	lsls	r0, r3, #29
 80038cc:	d512      	bpl.n	80038f4 <__swsetup_r+0x5c>
 80038ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038d0:	b141      	cbz	r1, 80038e4 <__swsetup_r+0x4c>
 80038d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038d6:	4299      	cmp	r1, r3
 80038d8:	d002      	beq.n	80038e0 <__swsetup_r+0x48>
 80038da:	4628      	mov	r0, r5
 80038dc:	f000 f8b8 	bl	8003a50 <_free_r>
 80038e0:	2300      	movs	r3, #0
 80038e2:	6363      	str	r3, [r4, #52]	; 0x34
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	2300      	movs	r3, #0
 80038ee:	6063      	str	r3, [r4, #4]
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	f043 0308 	orr.w	r3, r3, #8
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	6923      	ldr	r3, [r4, #16]
 80038fe:	b94b      	cbnz	r3, 8003914 <__swsetup_r+0x7c>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390a:	d003      	beq.n	8003914 <__swsetup_r+0x7c>
 800390c:	4621      	mov	r1, r4
 800390e:	4628      	mov	r0, r5
 8003910:	f001 f9a2 	bl	8004c58 <__smakebuf_r>
 8003914:	89a0      	ldrh	r0, [r4, #12]
 8003916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800391a:	f010 0301 	ands.w	r3, r0, #1
 800391e:	d00a      	beq.n	8003936 <__swsetup_r+0x9e>
 8003920:	2300      	movs	r3, #0
 8003922:	60a3      	str	r3, [r4, #8]
 8003924:	6963      	ldr	r3, [r4, #20]
 8003926:	425b      	negs	r3, r3
 8003928:	61a3      	str	r3, [r4, #24]
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	b943      	cbnz	r3, 8003940 <__swsetup_r+0xa8>
 800392e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003932:	d1c4      	bne.n	80038be <__swsetup_r+0x26>
 8003934:	bd38      	pop	{r3, r4, r5, pc}
 8003936:	0781      	lsls	r1, r0, #30
 8003938:	bf58      	it	pl
 800393a:	6963      	ldrpl	r3, [r4, #20]
 800393c:	60a3      	str	r3, [r4, #8]
 800393e:	e7f4      	b.n	800392a <__swsetup_r+0x92>
 8003940:	2000      	movs	r0, #0
 8003942:	e7f7      	b.n	8003934 <__swsetup_r+0x9c>
 8003944:	20000064 	.word	0x20000064

08003948 <memset>:
 8003948:	4402      	add	r2, r0
 800394a:	4603      	mov	r3, r0
 800394c:	4293      	cmp	r3, r2
 800394e:	d100      	bne.n	8003952 <memset+0xa>
 8003950:	4770      	bx	lr
 8003952:	f803 1b01 	strb.w	r1, [r3], #1
 8003956:	e7f9      	b.n	800394c <memset+0x4>

08003958 <_close_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d06      	ldr	r5, [pc, #24]	; (8003974 <_close_r+0x1c>)
 800395c:	2300      	movs	r3, #0
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	f7fd fa29 	bl	8000dba <_close>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_close_r+0x1a>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_close_r+0x1a>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	2000027c 	.word	0x2000027c

08003978 <_lseek_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d07      	ldr	r5, [pc, #28]	; (8003998 <_lseek_r+0x20>)
 800397c:	4604      	mov	r4, r0
 800397e:	4608      	mov	r0, r1
 8003980:	4611      	mov	r1, r2
 8003982:	2200      	movs	r2, #0
 8003984:	602a      	str	r2, [r5, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f7fd fa3e 	bl	8000e08 <_lseek>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_lseek_r+0x1e>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_lseek_r+0x1e>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	2000027c 	.word	0x2000027c

0800399c <_read_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d07      	ldr	r5, [pc, #28]	; (80039bc <_read_r+0x20>)
 80039a0:	4604      	mov	r4, r0
 80039a2:	4608      	mov	r0, r1
 80039a4:	4611      	mov	r1, r2
 80039a6:	2200      	movs	r2, #0
 80039a8:	602a      	str	r2, [r5, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f7fd f9cc 	bl	8000d48 <_read>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_read_r+0x1e>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_read_r+0x1e>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	2000027c 	.word	0x2000027c

080039c0 <_write_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d07      	ldr	r5, [pc, #28]	; (80039e0 <_write_r+0x20>)
 80039c4:	4604      	mov	r4, r0
 80039c6:	4608      	mov	r0, r1
 80039c8:	4611      	mov	r1, r2
 80039ca:	2200      	movs	r2, #0
 80039cc:	602a      	str	r2, [r5, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f7fd f9d7 	bl	8000d82 <_write>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	d102      	bne.n	80039de <_write_r+0x1e>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	b103      	cbz	r3, 80039de <_write_r+0x1e>
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	2000027c 	.word	0x2000027c

080039e4 <__errno>:
 80039e4:	4b01      	ldr	r3, [pc, #4]	; (80039ec <__errno+0x8>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000064 	.word	0x20000064

080039f0 <__libc_init_array>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4d0d      	ldr	r5, [pc, #52]	; (8003a28 <__libc_init_array+0x38>)
 80039f4:	4c0d      	ldr	r4, [pc, #52]	; (8003a2c <__libc_init_array+0x3c>)
 80039f6:	1b64      	subs	r4, r4, r5
 80039f8:	10a4      	asrs	r4, r4, #2
 80039fa:	2600      	movs	r6, #0
 80039fc:	42a6      	cmp	r6, r4
 80039fe:	d109      	bne.n	8003a14 <__libc_init_array+0x24>
 8003a00:	4d0b      	ldr	r5, [pc, #44]	; (8003a30 <__libc_init_array+0x40>)
 8003a02:	4c0c      	ldr	r4, [pc, #48]	; (8003a34 <__libc_init_array+0x44>)
 8003a04:	f001 fc6c 	bl	80052e0 <_init>
 8003a08:	1b64      	subs	r4, r4, r5
 8003a0a:	10a4      	asrs	r4, r4, #2
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	42a6      	cmp	r6, r4
 8003a10:	d105      	bne.n	8003a1e <__libc_init_array+0x2e>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a18:	4798      	blx	r3
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	e7ee      	b.n	80039fc <__libc_init_array+0xc>
 8003a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a22:	4798      	blx	r3
 8003a24:	3601      	adds	r6, #1
 8003a26:	e7f2      	b.n	8003a0e <__libc_init_array+0x1e>
 8003a28:	08005500 	.word	0x08005500
 8003a2c:	08005500 	.word	0x08005500
 8003a30:	08005500 	.word	0x08005500
 8003a34:	08005504 	.word	0x08005504

08003a38 <__retarget_lock_init_recursive>:
 8003a38:	4770      	bx	lr

08003a3a <__retarget_lock_acquire_recursive>:
 8003a3a:	4770      	bx	lr

08003a3c <__retarget_lock_release_recursive>:
 8003a3c:	4770      	bx	lr

08003a3e <strcpy>:
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a44:	f803 2b01 	strb.w	r2, [r3], #1
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	d1f9      	bne.n	8003a40 <strcpy+0x2>
 8003a4c:	4770      	bx	lr
	...

08003a50 <_free_r>:
 8003a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a52:	2900      	cmp	r1, #0
 8003a54:	d044      	beq.n	8003ae0 <_free_r+0x90>
 8003a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5a:	9001      	str	r0, [sp, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003a62:	bfb8      	it	lt
 8003a64:	18e4      	addlt	r4, r4, r3
 8003a66:	f000 f8e7 	bl	8003c38 <__malloc_lock>
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <_free_r+0x94>)
 8003a6c:	9801      	ldr	r0, [sp, #4]
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	b933      	cbnz	r3, 8003a80 <_free_r+0x30>
 8003a72:	6063      	str	r3, [r4, #4]
 8003a74:	6014      	str	r4, [r2, #0]
 8003a76:	b003      	add	sp, #12
 8003a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a7c:	f000 b8e2 	b.w	8003c44 <__malloc_unlock>
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	d908      	bls.n	8003a96 <_free_r+0x46>
 8003a84:	6825      	ldr	r5, [r4, #0]
 8003a86:	1961      	adds	r1, r4, r5
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	bf01      	itttt	eq
 8003a8c:	6819      	ldreq	r1, [r3, #0]
 8003a8e:	685b      	ldreq	r3, [r3, #4]
 8003a90:	1949      	addeq	r1, r1, r5
 8003a92:	6021      	streq	r1, [r4, #0]
 8003a94:	e7ed      	b.n	8003a72 <_free_r+0x22>
 8003a96:	461a      	mov	r2, r3
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b10b      	cbz	r3, 8003aa0 <_free_r+0x50>
 8003a9c:	42a3      	cmp	r3, r4
 8003a9e:	d9fa      	bls.n	8003a96 <_free_r+0x46>
 8003aa0:	6811      	ldr	r1, [r2, #0]
 8003aa2:	1855      	adds	r5, r2, r1
 8003aa4:	42a5      	cmp	r5, r4
 8003aa6:	d10b      	bne.n	8003ac0 <_free_r+0x70>
 8003aa8:	6824      	ldr	r4, [r4, #0]
 8003aaa:	4421      	add	r1, r4
 8003aac:	1854      	adds	r4, r2, r1
 8003aae:	42a3      	cmp	r3, r4
 8003ab0:	6011      	str	r1, [r2, #0]
 8003ab2:	d1e0      	bne.n	8003a76 <_free_r+0x26>
 8003ab4:	681c      	ldr	r4, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	6053      	str	r3, [r2, #4]
 8003aba:	440c      	add	r4, r1
 8003abc:	6014      	str	r4, [r2, #0]
 8003abe:	e7da      	b.n	8003a76 <_free_r+0x26>
 8003ac0:	d902      	bls.n	8003ac8 <_free_r+0x78>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	6003      	str	r3, [r0, #0]
 8003ac6:	e7d6      	b.n	8003a76 <_free_r+0x26>
 8003ac8:	6825      	ldr	r5, [r4, #0]
 8003aca:	1961      	adds	r1, r4, r5
 8003acc:	428b      	cmp	r3, r1
 8003ace:	bf04      	itt	eq
 8003ad0:	6819      	ldreq	r1, [r3, #0]
 8003ad2:	685b      	ldreq	r3, [r3, #4]
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	bf04      	itt	eq
 8003ad8:	1949      	addeq	r1, r1, r5
 8003ada:	6021      	streq	r1, [r4, #0]
 8003adc:	6054      	str	r4, [r2, #4]
 8003ade:	e7ca      	b.n	8003a76 <_free_r+0x26>
 8003ae0:	b003      	add	sp, #12
 8003ae2:	bd30      	pop	{r4, r5, pc}
 8003ae4:	20000284 	.word	0x20000284

08003ae8 <malloc>:
 8003ae8:	4b02      	ldr	r3, [pc, #8]	; (8003af4 <malloc+0xc>)
 8003aea:	4601      	mov	r1, r0
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	f000 b823 	b.w	8003b38 <_malloc_r>
 8003af2:	bf00      	nop
 8003af4:	20000064 	.word	0x20000064

08003af8 <sbrk_aligned>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4e0e      	ldr	r6, [pc, #56]	; (8003b34 <sbrk_aligned+0x3c>)
 8003afc:	460c      	mov	r4, r1
 8003afe:	6831      	ldr	r1, [r6, #0]
 8003b00:	4605      	mov	r5, r0
 8003b02:	b911      	cbnz	r1, 8003b0a <sbrk_aligned+0x12>
 8003b04:	f001 fa9e 	bl	8005044 <_sbrk_r>
 8003b08:	6030      	str	r0, [r6, #0]
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f001 fa99 	bl	8005044 <_sbrk_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d00a      	beq.n	8003b2c <sbrk_aligned+0x34>
 8003b16:	1cc4      	adds	r4, r0, #3
 8003b18:	f024 0403 	bic.w	r4, r4, #3
 8003b1c:	42a0      	cmp	r0, r4
 8003b1e:	d007      	beq.n	8003b30 <sbrk_aligned+0x38>
 8003b20:	1a21      	subs	r1, r4, r0
 8003b22:	4628      	mov	r0, r5
 8003b24:	f001 fa8e 	bl	8005044 <_sbrk_r>
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d101      	bne.n	8003b30 <sbrk_aligned+0x38>
 8003b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8003b30:	4620      	mov	r0, r4
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	20000288 	.word	0x20000288

08003b38 <_malloc_r>:
 8003b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b3c:	1ccd      	adds	r5, r1, #3
 8003b3e:	f025 0503 	bic.w	r5, r5, #3
 8003b42:	3508      	adds	r5, #8
 8003b44:	2d0c      	cmp	r5, #12
 8003b46:	bf38      	it	cc
 8003b48:	250c      	movcc	r5, #12
 8003b4a:	2d00      	cmp	r5, #0
 8003b4c:	4607      	mov	r7, r0
 8003b4e:	db01      	blt.n	8003b54 <_malloc_r+0x1c>
 8003b50:	42a9      	cmp	r1, r5
 8003b52:	d905      	bls.n	8003b60 <_malloc_r+0x28>
 8003b54:	230c      	movs	r3, #12
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	2600      	movs	r6, #0
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c34 <_malloc_r+0xfc>
 8003b64:	f000 f868 	bl	8003c38 <__malloc_lock>
 8003b68:	f8d8 3000 	ldr.w	r3, [r8]
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	bb5c      	cbnz	r4, 8003bc8 <_malloc_r+0x90>
 8003b70:	4629      	mov	r1, r5
 8003b72:	4638      	mov	r0, r7
 8003b74:	f7ff ffc0 	bl	8003af8 <sbrk_aligned>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	d155      	bne.n	8003c2a <_malloc_r+0xf2>
 8003b7e:	f8d8 4000 	ldr.w	r4, [r8]
 8003b82:	4626      	mov	r6, r4
 8003b84:	2e00      	cmp	r6, #0
 8003b86:	d145      	bne.n	8003c14 <_malloc_r+0xdc>
 8003b88:	2c00      	cmp	r4, #0
 8003b8a:	d048      	beq.n	8003c1e <_malloc_r+0xe6>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4638      	mov	r0, r7
 8003b92:	eb04 0903 	add.w	r9, r4, r3
 8003b96:	f001 fa55 	bl	8005044 <_sbrk_r>
 8003b9a:	4581      	cmp	r9, r0
 8003b9c:	d13f      	bne.n	8003c1e <_malloc_r+0xe6>
 8003b9e:	6821      	ldr	r1, [r4, #0]
 8003ba0:	1a6d      	subs	r5, r5, r1
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	f7ff ffa7 	bl	8003af8 <sbrk_aligned>
 8003baa:	3001      	adds	r0, #1
 8003bac:	d037      	beq.n	8003c1e <_malloc_r+0xe6>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	442b      	add	r3, r5
 8003bb2:	6023      	str	r3, [r4, #0]
 8003bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d038      	beq.n	8003c2e <_malloc_r+0xf6>
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	42a2      	cmp	r2, r4
 8003bc0:	d12b      	bne.n	8003c1a <_malloc_r+0xe2>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	e00f      	b.n	8003be8 <_malloc_r+0xb0>
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	1b52      	subs	r2, r2, r5
 8003bcc:	d41f      	bmi.n	8003c0e <_malloc_r+0xd6>
 8003bce:	2a0b      	cmp	r2, #11
 8003bd0:	d917      	bls.n	8003c02 <_malloc_r+0xca>
 8003bd2:	1961      	adds	r1, r4, r5
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	6025      	str	r5, [r4, #0]
 8003bd8:	bf18      	it	ne
 8003bda:	6059      	strne	r1, [r3, #4]
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	bf08      	it	eq
 8003be0:	f8c8 1000 	streq.w	r1, [r8]
 8003be4:	5162      	str	r2, [r4, r5]
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	4638      	mov	r0, r7
 8003bea:	f104 060b 	add.w	r6, r4, #11
 8003bee:	f000 f829 	bl	8003c44 <__malloc_unlock>
 8003bf2:	f026 0607 	bic.w	r6, r6, #7
 8003bf6:	1d23      	adds	r3, r4, #4
 8003bf8:	1af2      	subs	r2, r6, r3
 8003bfa:	d0ae      	beq.n	8003b5a <_malloc_r+0x22>
 8003bfc:	1b9b      	subs	r3, r3, r6
 8003bfe:	50a3      	str	r3, [r4, r2]
 8003c00:	e7ab      	b.n	8003b5a <_malloc_r+0x22>
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	6862      	ldr	r2, [r4, #4]
 8003c06:	d1dd      	bne.n	8003bc4 <_malloc_r+0x8c>
 8003c08:	f8c8 2000 	str.w	r2, [r8]
 8003c0c:	e7ec      	b.n	8003be8 <_malloc_r+0xb0>
 8003c0e:	4623      	mov	r3, r4
 8003c10:	6864      	ldr	r4, [r4, #4]
 8003c12:	e7ac      	b.n	8003b6e <_malloc_r+0x36>
 8003c14:	4634      	mov	r4, r6
 8003c16:	6876      	ldr	r6, [r6, #4]
 8003c18:	e7b4      	b.n	8003b84 <_malloc_r+0x4c>
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	e7cc      	b.n	8003bb8 <_malloc_r+0x80>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4638      	mov	r0, r7
 8003c24:	f000 f80e 	bl	8003c44 <__malloc_unlock>
 8003c28:	e797      	b.n	8003b5a <_malloc_r+0x22>
 8003c2a:	6025      	str	r5, [r4, #0]
 8003c2c:	e7dc      	b.n	8003be8 <_malloc_r+0xb0>
 8003c2e:	605b      	str	r3, [r3, #4]
 8003c30:	deff      	udf	#255	; 0xff
 8003c32:	bf00      	nop
 8003c34:	20000284 	.word	0x20000284

08003c38 <__malloc_lock>:
 8003c38:	4801      	ldr	r0, [pc, #4]	; (8003c40 <__malloc_lock+0x8>)
 8003c3a:	f7ff befe 	b.w	8003a3a <__retarget_lock_acquire_recursive>
 8003c3e:	bf00      	nop
 8003c40:	20000280 	.word	0x20000280

08003c44 <__malloc_unlock>:
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <__malloc_unlock+0x8>)
 8003c46:	f7ff bef9 	b.w	8003a3c <__retarget_lock_release_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	20000280 	.word	0x20000280

08003c50 <__ssputs_r>:
 8003c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c54:	688e      	ldr	r6, [r1, #8]
 8003c56:	461f      	mov	r7, r3
 8003c58:	42be      	cmp	r6, r7
 8003c5a:	680b      	ldr	r3, [r1, #0]
 8003c5c:	4682      	mov	sl, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	4690      	mov	r8, r2
 8003c62:	d82c      	bhi.n	8003cbe <__ssputs_r+0x6e>
 8003c64:	898a      	ldrh	r2, [r1, #12]
 8003c66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c6a:	d026      	beq.n	8003cba <__ssputs_r+0x6a>
 8003c6c:	6965      	ldr	r5, [r4, #20]
 8003c6e:	6909      	ldr	r1, [r1, #16]
 8003c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c74:	eba3 0901 	sub.w	r9, r3, r1
 8003c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c7c:	1c7b      	adds	r3, r7, #1
 8003c7e:	444b      	add	r3, r9
 8003c80:	106d      	asrs	r5, r5, #1
 8003c82:	429d      	cmp	r5, r3
 8003c84:	bf38      	it	cc
 8003c86:	461d      	movcc	r5, r3
 8003c88:	0553      	lsls	r3, r2, #21
 8003c8a:	d527      	bpl.n	8003cdc <__ssputs_r+0x8c>
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	f7ff ff53 	bl	8003b38 <_malloc_r>
 8003c92:	4606      	mov	r6, r0
 8003c94:	b360      	cbz	r0, 8003cf0 <__ssputs_r+0xa0>
 8003c96:	6921      	ldr	r1, [r4, #16]
 8003c98:	464a      	mov	r2, r9
 8003c9a:	f001 f9e3 	bl	8005064 <memcpy>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	6126      	str	r6, [r4, #16]
 8003cac:	6165      	str	r5, [r4, #20]
 8003cae:	444e      	add	r6, r9
 8003cb0:	eba5 0509 	sub.w	r5, r5, r9
 8003cb4:	6026      	str	r6, [r4, #0]
 8003cb6:	60a5      	str	r5, [r4, #8]
 8003cb8:	463e      	mov	r6, r7
 8003cba:	42be      	cmp	r6, r7
 8003cbc:	d900      	bls.n	8003cc0 <__ssputs_r+0x70>
 8003cbe:	463e      	mov	r6, r7
 8003cc0:	6820      	ldr	r0, [r4, #0]
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	f001 f980 	bl	8004fca <memmove>
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	1b9b      	subs	r3, r3, r6
 8003cce:	60a3      	str	r3, [r4, #8]
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	4433      	add	r3, r6
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cdc:	462a      	mov	r2, r5
 8003cde:	f001 f9cf 	bl	8005080 <_realloc_r>
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d1e0      	bne.n	8003caa <__ssputs_r+0x5a>
 8003ce8:	6921      	ldr	r1, [r4, #16]
 8003cea:	4650      	mov	r0, sl
 8003cec:	f7ff feb0 	bl	8003a50 <_free_r>
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	f8ca 3000 	str.w	r3, [sl]
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003d02:	e7e9      	b.n	8003cd8 <__ssputs_r+0x88>

08003d04 <_svfiprintf_r>:
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	4698      	mov	r8, r3
 8003d0a:	898b      	ldrh	r3, [r1, #12]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	b09d      	sub	sp, #116	; 0x74
 8003d10:	4607      	mov	r7, r0
 8003d12:	460d      	mov	r5, r1
 8003d14:	4614      	mov	r4, r2
 8003d16:	d50e      	bpl.n	8003d36 <_svfiprintf_r+0x32>
 8003d18:	690b      	ldr	r3, [r1, #16]
 8003d1a:	b963      	cbnz	r3, 8003d36 <_svfiprintf_r+0x32>
 8003d1c:	2140      	movs	r1, #64	; 0x40
 8003d1e:	f7ff ff0b 	bl	8003b38 <_malloc_r>
 8003d22:	6028      	str	r0, [r5, #0]
 8003d24:	6128      	str	r0, [r5, #16]
 8003d26:	b920      	cbnz	r0, 8003d32 <_svfiprintf_r+0x2e>
 8003d28:	230c      	movs	r3, #12
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d30:	e0d0      	b.n	8003ed4 <_svfiprintf_r+0x1d0>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	616b      	str	r3, [r5, #20]
 8003d36:	2300      	movs	r3, #0
 8003d38:	9309      	str	r3, [sp, #36]	; 0x24
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d44:	2330      	movs	r3, #48	; 0x30
 8003d46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003eec <_svfiprintf_r+0x1e8>
 8003d4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d4e:	f04f 0901 	mov.w	r9, #1
 8003d52:	4623      	mov	r3, r4
 8003d54:	469a      	mov	sl, r3
 8003d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d5a:	b10a      	cbz	r2, 8003d60 <_svfiprintf_r+0x5c>
 8003d5c:	2a25      	cmp	r2, #37	; 0x25
 8003d5e:	d1f9      	bne.n	8003d54 <_svfiprintf_r+0x50>
 8003d60:	ebba 0b04 	subs.w	fp, sl, r4
 8003d64:	d00b      	beq.n	8003d7e <_svfiprintf_r+0x7a>
 8003d66:	465b      	mov	r3, fp
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	f7ff ff6f 	bl	8003c50 <__ssputs_r>
 8003d72:	3001      	adds	r0, #1
 8003d74:	f000 80a9 	beq.w	8003eca <_svfiprintf_r+0x1c6>
 8003d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d7a:	445a      	add	r2, fp
 8003d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80a1 	beq.w	8003eca <_svfiprintf_r+0x1c6>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d92:	f10a 0a01 	add.w	sl, sl, #1
 8003d96:	9304      	str	r3, [sp, #16]
 8003d98:	9307      	str	r3, [sp, #28]
 8003d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003da0:	4654      	mov	r4, sl
 8003da2:	2205      	movs	r2, #5
 8003da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da8:	4850      	ldr	r0, [pc, #320]	; (8003eec <_svfiprintf_r+0x1e8>)
 8003daa:	f7fc fa19 	bl	80001e0 <memchr>
 8003dae:	9a04      	ldr	r2, [sp, #16]
 8003db0:	b9d8      	cbnz	r0, 8003dea <_svfiprintf_r+0xe6>
 8003db2:	06d0      	lsls	r0, r2, #27
 8003db4:	bf44      	itt	mi
 8003db6:	2320      	movmi	r3, #32
 8003db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dbc:	0711      	lsls	r1, r2, #28
 8003dbe:	bf44      	itt	mi
 8003dc0:	232b      	movmi	r3, #43	; 0x2b
 8003dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dca:	2b2a      	cmp	r3, #42	; 0x2a
 8003dcc:	d015      	beq.n	8003dfa <_svfiprintf_r+0xf6>
 8003dce:	9a07      	ldr	r2, [sp, #28]
 8003dd0:	4654      	mov	r4, sl
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f04f 0c0a 	mov.w	ip, #10
 8003dd8:	4621      	mov	r1, r4
 8003dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dde:	3b30      	subs	r3, #48	; 0x30
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d94d      	bls.n	8003e80 <_svfiprintf_r+0x17c>
 8003de4:	b1b0      	cbz	r0, 8003e14 <_svfiprintf_r+0x110>
 8003de6:	9207      	str	r2, [sp, #28]
 8003de8:	e014      	b.n	8003e14 <_svfiprintf_r+0x110>
 8003dea:	eba0 0308 	sub.w	r3, r0, r8
 8003dee:	fa09 f303 	lsl.w	r3, r9, r3
 8003df2:	4313      	orrs	r3, r2
 8003df4:	9304      	str	r3, [sp, #16]
 8003df6:	46a2      	mov	sl, r4
 8003df8:	e7d2      	b.n	8003da0 <_svfiprintf_r+0x9c>
 8003dfa:	9b03      	ldr	r3, [sp, #12]
 8003dfc:	1d19      	adds	r1, r3, #4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	9103      	str	r1, [sp, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bfbb      	ittet	lt
 8003e06:	425b      	neglt	r3, r3
 8003e08:	f042 0202 	orrlt.w	r2, r2, #2
 8003e0c:	9307      	strge	r3, [sp, #28]
 8003e0e:	9307      	strlt	r3, [sp, #28]
 8003e10:	bfb8      	it	lt
 8003e12:	9204      	strlt	r2, [sp, #16]
 8003e14:	7823      	ldrb	r3, [r4, #0]
 8003e16:	2b2e      	cmp	r3, #46	; 0x2e
 8003e18:	d10c      	bne.n	8003e34 <_svfiprintf_r+0x130>
 8003e1a:	7863      	ldrb	r3, [r4, #1]
 8003e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e1e:	d134      	bne.n	8003e8a <_svfiprintf_r+0x186>
 8003e20:	9b03      	ldr	r3, [sp, #12]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	9203      	str	r2, [sp, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bfb8      	it	lt
 8003e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e30:	3402      	adds	r4, #2
 8003e32:	9305      	str	r3, [sp, #20]
 8003e34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003efc <_svfiprintf_r+0x1f8>
 8003e38:	7821      	ldrb	r1, [r4, #0]
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	f7fc f9cf 	bl	80001e0 <memchr>
 8003e42:	b138      	cbz	r0, 8003e54 <_svfiprintf_r+0x150>
 8003e44:	9b04      	ldr	r3, [sp, #16]
 8003e46:	eba0 000a 	sub.w	r0, r0, sl
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	4082      	lsls	r2, r0
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	3401      	adds	r4, #1
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e58:	4825      	ldr	r0, [pc, #148]	; (8003ef0 <_svfiprintf_r+0x1ec>)
 8003e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e5e:	2206      	movs	r2, #6
 8003e60:	f7fc f9be 	bl	80001e0 <memchr>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d038      	beq.n	8003eda <_svfiprintf_r+0x1d6>
 8003e68:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <_svfiprintf_r+0x1f0>)
 8003e6a:	bb1b      	cbnz	r3, 8003eb4 <_svfiprintf_r+0x1b0>
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	3307      	adds	r3, #7
 8003e70:	f023 0307 	bic.w	r3, r3, #7
 8003e74:	3308      	adds	r3, #8
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7a:	4433      	add	r3, r6
 8003e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7e:	e768      	b.n	8003d52 <_svfiprintf_r+0x4e>
 8003e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e84:	460c      	mov	r4, r1
 8003e86:	2001      	movs	r0, #1
 8003e88:	e7a6      	b.n	8003dd8 <_svfiprintf_r+0xd4>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	3401      	adds	r4, #1
 8003e8e:	9305      	str	r3, [sp, #20]
 8003e90:	4619      	mov	r1, r3
 8003e92:	f04f 0c0a 	mov.w	ip, #10
 8003e96:	4620      	mov	r0, r4
 8003e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e9c:	3a30      	subs	r2, #48	; 0x30
 8003e9e:	2a09      	cmp	r2, #9
 8003ea0:	d903      	bls.n	8003eaa <_svfiprintf_r+0x1a6>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0c6      	beq.n	8003e34 <_svfiprintf_r+0x130>
 8003ea6:	9105      	str	r1, [sp, #20]
 8003ea8:	e7c4      	b.n	8003e34 <_svfiprintf_r+0x130>
 8003eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eae:	4604      	mov	r4, r0
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e7f0      	b.n	8003e96 <_svfiprintf_r+0x192>
 8003eb4:	ab03      	add	r3, sp, #12
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	462a      	mov	r2, r5
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <_svfiprintf_r+0x1f4>)
 8003ebc:	a904      	add	r1, sp, #16
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f3af 8000 	nop.w
 8003ec4:	1c42      	adds	r2, r0, #1
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	d1d6      	bne.n	8003e78 <_svfiprintf_r+0x174>
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	065b      	lsls	r3, r3, #25
 8003ece:	f53f af2d 	bmi.w	8003d2c <_svfiprintf_r+0x28>
 8003ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ed4:	b01d      	add	sp, #116	; 0x74
 8003ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eda:	ab03      	add	r3, sp, #12
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	462a      	mov	r2, r5
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <_svfiprintf_r+0x1f4>)
 8003ee2:	a904      	add	r1, sp, #16
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f000 f9bd 	bl	8004264 <_printf_i>
 8003eea:	e7eb      	b.n	8003ec4 <_svfiprintf_r+0x1c0>
 8003eec:	080053a8 	.word	0x080053a8
 8003ef0:	080053b2 	.word	0x080053b2
 8003ef4:	00000000 	.word	0x00000000
 8003ef8:	08003c51 	.word	0x08003c51
 8003efc:	080053ae 	.word	0x080053ae

08003f00 <__sfputc_r>:
 8003f00:	6893      	ldr	r3, [r2, #8]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	b410      	push	{r4}
 8003f08:	6093      	str	r3, [r2, #8]
 8003f0a:	da08      	bge.n	8003f1e <__sfputc_r+0x1e>
 8003f0c:	6994      	ldr	r4, [r2, #24]
 8003f0e:	42a3      	cmp	r3, r4
 8003f10:	db01      	blt.n	8003f16 <__sfputc_r+0x16>
 8003f12:	290a      	cmp	r1, #10
 8003f14:	d103      	bne.n	8003f1e <__sfputc_r+0x1e>
 8003f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f1a:	f7ff bc80 	b.w	800381e <__swbuf_r>
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	1c58      	adds	r0, r3, #1
 8003f22:	6010      	str	r0, [r2, #0]
 8003f24:	7019      	strb	r1, [r3, #0]
 8003f26:	4608      	mov	r0, r1
 8003f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <__sfputs_r>:
 8003f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f30:	4606      	mov	r6, r0
 8003f32:	460f      	mov	r7, r1
 8003f34:	4614      	mov	r4, r2
 8003f36:	18d5      	adds	r5, r2, r3
 8003f38:	42ac      	cmp	r4, r5
 8003f3a:	d101      	bne.n	8003f40 <__sfputs_r+0x12>
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	e007      	b.n	8003f50 <__sfputs_r+0x22>
 8003f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f44:	463a      	mov	r2, r7
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff ffda 	bl	8003f00 <__sfputc_r>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d1f3      	bne.n	8003f38 <__sfputs_r+0xa>
 8003f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f54 <_vfiprintf_r>:
 8003f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f58:	460d      	mov	r5, r1
 8003f5a:	b09d      	sub	sp, #116	; 0x74
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	4698      	mov	r8, r3
 8003f60:	4606      	mov	r6, r0
 8003f62:	b118      	cbz	r0, 8003f6c <_vfiprintf_r+0x18>
 8003f64:	6a03      	ldr	r3, [r0, #32]
 8003f66:	b90b      	cbnz	r3, 8003f6c <_vfiprintf_r+0x18>
 8003f68:	f7ff fa92 	bl	8003490 <__sinit>
 8003f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f6e:	07d9      	lsls	r1, r3, #31
 8003f70:	d405      	bmi.n	8003f7e <_vfiprintf_r+0x2a>
 8003f72:	89ab      	ldrh	r3, [r5, #12]
 8003f74:	059a      	lsls	r2, r3, #22
 8003f76:	d402      	bmi.n	8003f7e <_vfiprintf_r+0x2a>
 8003f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f7a:	f7ff fd5e 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8003f7e:	89ab      	ldrh	r3, [r5, #12]
 8003f80:	071b      	lsls	r3, r3, #28
 8003f82:	d501      	bpl.n	8003f88 <_vfiprintf_r+0x34>
 8003f84:	692b      	ldr	r3, [r5, #16]
 8003f86:	b99b      	cbnz	r3, 8003fb0 <_vfiprintf_r+0x5c>
 8003f88:	4629      	mov	r1, r5
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f7ff fc84 	bl	8003898 <__swsetup_r>
 8003f90:	b170      	cbz	r0, 8003fb0 <_vfiprintf_r+0x5c>
 8003f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f94:	07dc      	lsls	r4, r3, #31
 8003f96:	d504      	bpl.n	8003fa2 <_vfiprintf_r+0x4e>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	b01d      	add	sp, #116	; 0x74
 8003f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa2:	89ab      	ldrh	r3, [r5, #12]
 8003fa4:	0598      	lsls	r0, r3, #22
 8003fa6:	d4f7      	bmi.n	8003f98 <_vfiprintf_r+0x44>
 8003fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003faa:	f7ff fd47 	bl	8003a3c <__retarget_lock_release_recursive>
 8003fae:	e7f3      	b.n	8003f98 <_vfiprintf_r+0x44>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fbe:	2330      	movs	r3, #48	; 0x30
 8003fc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004174 <_vfiprintf_r+0x220>
 8003fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fc8:	f04f 0901 	mov.w	r9, #1
 8003fcc:	4623      	mov	r3, r4
 8003fce:	469a      	mov	sl, r3
 8003fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd4:	b10a      	cbz	r2, 8003fda <_vfiprintf_r+0x86>
 8003fd6:	2a25      	cmp	r2, #37	; 0x25
 8003fd8:	d1f9      	bne.n	8003fce <_vfiprintf_r+0x7a>
 8003fda:	ebba 0b04 	subs.w	fp, sl, r4
 8003fde:	d00b      	beq.n	8003ff8 <_vfiprintf_r+0xa4>
 8003fe0:	465b      	mov	r3, fp
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f7ff ffa1 	bl	8003f2e <__sfputs_r>
 8003fec:	3001      	adds	r0, #1
 8003fee:	f000 80a9 	beq.w	8004144 <_vfiprintf_r+0x1f0>
 8003ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ff4:	445a      	add	r2, fp
 8003ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a1 	beq.w	8004144 <_vfiprintf_r+0x1f0>
 8004002:	2300      	movs	r3, #0
 8004004:	f04f 32ff 	mov.w	r2, #4294967295
 8004008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800400c:	f10a 0a01 	add.w	sl, sl, #1
 8004010:	9304      	str	r3, [sp, #16]
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004018:	931a      	str	r3, [sp, #104]	; 0x68
 800401a:	4654      	mov	r4, sl
 800401c:	2205      	movs	r2, #5
 800401e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004022:	4854      	ldr	r0, [pc, #336]	; (8004174 <_vfiprintf_r+0x220>)
 8004024:	f7fc f8dc 	bl	80001e0 <memchr>
 8004028:	9a04      	ldr	r2, [sp, #16]
 800402a:	b9d8      	cbnz	r0, 8004064 <_vfiprintf_r+0x110>
 800402c:	06d1      	lsls	r1, r2, #27
 800402e:	bf44      	itt	mi
 8004030:	2320      	movmi	r3, #32
 8004032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004036:	0713      	lsls	r3, r2, #28
 8004038:	bf44      	itt	mi
 800403a:	232b      	movmi	r3, #43	; 0x2b
 800403c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004040:	f89a 3000 	ldrb.w	r3, [sl]
 8004044:	2b2a      	cmp	r3, #42	; 0x2a
 8004046:	d015      	beq.n	8004074 <_vfiprintf_r+0x120>
 8004048:	9a07      	ldr	r2, [sp, #28]
 800404a:	4654      	mov	r4, sl
 800404c:	2000      	movs	r0, #0
 800404e:	f04f 0c0a 	mov.w	ip, #10
 8004052:	4621      	mov	r1, r4
 8004054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004058:	3b30      	subs	r3, #48	; 0x30
 800405a:	2b09      	cmp	r3, #9
 800405c:	d94d      	bls.n	80040fa <_vfiprintf_r+0x1a6>
 800405e:	b1b0      	cbz	r0, 800408e <_vfiprintf_r+0x13a>
 8004060:	9207      	str	r2, [sp, #28]
 8004062:	e014      	b.n	800408e <_vfiprintf_r+0x13a>
 8004064:	eba0 0308 	sub.w	r3, r0, r8
 8004068:	fa09 f303 	lsl.w	r3, r9, r3
 800406c:	4313      	orrs	r3, r2
 800406e:	9304      	str	r3, [sp, #16]
 8004070:	46a2      	mov	sl, r4
 8004072:	e7d2      	b.n	800401a <_vfiprintf_r+0xc6>
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	1d19      	adds	r1, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	9103      	str	r1, [sp, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	bfbb      	ittet	lt
 8004080:	425b      	neglt	r3, r3
 8004082:	f042 0202 	orrlt.w	r2, r2, #2
 8004086:	9307      	strge	r3, [sp, #28]
 8004088:	9307      	strlt	r3, [sp, #28]
 800408a:	bfb8      	it	lt
 800408c:	9204      	strlt	r2, [sp, #16]
 800408e:	7823      	ldrb	r3, [r4, #0]
 8004090:	2b2e      	cmp	r3, #46	; 0x2e
 8004092:	d10c      	bne.n	80040ae <_vfiprintf_r+0x15a>
 8004094:	7863      	ldrb	r3, [r4, #1]
 8004096:	2b2a      	cmp	r3, #42	; 0x2a
 8004098:	d134      	bne.n	8004104 <_vfiprintf_r+0x1b0>
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	1d1a      	adds	r2, r3, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	9203      	str	r2, [sp, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bfb8      	it	lt
 80040a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80040aa:	3402      	adds	r4, #2
 80040ac:	9305      	str	r3, [sp, #20]
 80040ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004184 <_vfiprintf_r+0x230>
 80040b2:	7821      	ldrb	r1, [r4, #0]
 80040b4:	2203      	movs	r2, #3
 80040b6:	4650      	mov	r0, sl
 80040b8:	f7fc f892 	bl	80001e0 <memchr>
 80040bc:	b138      	cbz	r0, 80040ce <_vfiprintf_r+0x17a>
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	eba0 000a 	sub.w	r0, r0, sl
 80040c4:	2240      	movs	r2, #64	; 0x40
 80040c6:	4082      	lsls	r2, r0
 80040c8:	4313      	orrs	r3, r2
 80040ca:	3401      	adds	r4, #1
 80040cc:	9304      	str	r3, [sp, #16]
 80040ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d2:	4829      	ldr	r0, [pc, #164]	; (8004178 <_vfiprintf_r+0x224>)
 80040d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040d8:	2206      	movs	r2, #6
 80040da:	f7fc f881 	bl	80001e0 <memchr>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d03f      	beq.n	8004162 <_vfiprintf_r+0x20e>
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <_vfiprintf_r+0x228>)
 80040e4:	bb1b      	cbnz	r3, 800412e <_vfiprintf_r+0x1da>
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	3307      	adds	r3, #7
 80040ea:	f023 0307 	bic.w	r3, r3, #7
 80040ee:	3308      	adds	r3, #8
 80040f0:	9303      	str	r3, [sp, #12]
 80040f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f4:	443b      	add	r3, r7
 80040f6:	9309      	str	r3, [sp, #36]	; 0x24
 80040f8:	e768      	b.n	8003fcc <_vfiprintf_r+0x78>
 80040fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80040fe:	460c      	mov	r4, r1
 8004100:	2001      	movs	r0, #1
 8004102:	e7a6      	b.n	8004052 <_vfiprintf_r+0xfe>
 8004104:	2300      	movs	r3, #0
 8004106:	3401      	adds	r4, #1
 8004108:	9305      	str	r3, [sp, #20]
 800410a:	4619      	mov	r1, r3
 800410c:	f04f 0c0a 	mov.w	ip, #10
 8004110:	4620      	mov	r0, r4
 8004112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004116:	3a30      	subs	r2, #48	; 0x30
 8004118:	2a09      	cmp	r2, #9
 800411a:	d903      	bls.n	8004124 <_vfiprintf_r+0x1d0>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0c6      	beq.n	80040ae <_vfiprintf_r+0x15a>
 8004120:	9105      	str	r1, [sp, #20]
 8004122:	e7c4      	b.n	80040ae <_vfiprintf_r+0x15a>
 8004124:	fb0c 2101 	mla	r1, ip, r1, r2
 8004128:	4604      	mov	r4, r0
 800412a:	2301      	movs	r3, #1
 800412c:	e7f0      	b.n	8004110 <_vfiprintf_r+0x1bc>
 800412e:	ab03      	add	r3, sp, #12
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	462a      	mov	r2, r5
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <_vfiprintf_r+0x22c>)
 8004136:	a904      	add	r1, sp, #16
 8004138:	4630      	mov	r0, r6
 800413a:	f3af 8000 	nop.w
 800413e:	4607      	mov	r7, r0
 8004140:	1c78      	adds	r0, r7, #1
 8004142:	d1d6      	bne.n	80040f2 <_vfiprintf_r+0x19e>
 8004144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004146:	07d9      	lsls	r1, r3, #31
 8004148:	d405      	bmi.n	8004156 <_vfiprintf_r+0x202>
 800414a:	89ab      	ldrh	r3, [r5, #12]
 800414c:	059a      	lsls	r2, r3, #22
 800414e:	d402      	bmi.n	8004156 <_vfiprintf_r+0x202>
 8004150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004152:	f7ff fc73 	bl	8003a3c <__retarget_lock_release_recursive>
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	065b      	lsls	r3, r3, #25
 800415a:	f53f af1d 	bmi.w	8003f98 <_vfiprintf_r+0x44>
 800415e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004160:	e71c      	b.n	8003f9c <_vfiprintf_r+0x48>
 8004162:	ab03      	add	r3, sp, #12
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	462a      	mov	r2, r5
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <_vfiprintf_r+0x22c>)
 800416a:	a904      	add	r1, sp, #16
 800416c:	4630      	mov	r0, r6
 800416e:	f000 f879 	bl	8004264 <_printf_i>
 8004172:	e7e4      	b.n	800413e <_vfiprintf_r+0x1ea>
 8004174:	080053a8 	.word	0x080053a8
 8004178:	080053b2 	.word	0x080053b2
 800417c:	00000000 	.word	0x00000000
 8004180:	08003f2f 	.word	0x08003f2f
 8004184:	080053ae 	.word	0x080053ae

08004188 <_printf_common>:
 8004188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800418c:	4616      	mov	r6, r2
 800418e:	4699      	mov	r9, r3
 8004190:	688a      	ldr	r2, [r1, #8]
 8004192:	690b      	ldr	r3, [r1, #16]
 8004194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004198:	4293      	cmp	r3, r2
 800419a:	bfb8      	it	lt
 800419c:	4613      	movlt	r3, r2
 800419e:	6033      	str	r3, [r6, #0]
 80041a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041a4:	4607      	mov	r7, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	b10a      	cbz	r2, 80041ae <_printf_common+0x26>
 80041aa:	3301      	adds	r3, #1
 80041ac:	6033      	str	r3, [r6, #0]
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	0699      	lsls	r1, r3, #26
 80041b2:	bf42      	ittt	mi
 80041b4:	6833      	ldrmi	r3, [r6, #0]
 80041b6:	3302      	addmi	r3, #2
 80041b8:	6033      	strmi	r3, [r6, #0]
 80041ba:	6825      	ldr	r5, [r4, #0]
 80041bc:	f015 0506 	ands.w	r5, r5, #6
 80041c0:	d106      	bne.n	80041d0 <_printf_common+0x48>
 80041c2:	f104 0a19 	add.w	sl, r4, #25
 80041c6:	68e3      	ldr	r3, [r4, #12]
 80041c8:	6832      	ldr	r2, [r6, #0]
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	42ab      	cmp	r3, r5
 80041ce:	dc26      	bgt.n	800421e <_printf_common+0x96>
 80041d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041d4:	1e13      	subs	r3, r2, #0
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	bf18      	it	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	0692      	lsls	r2, r2, #26
 80041de:	d42b      	bmi.n	8004238 <_printf_common+0xb0>
 80041e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041e4:	4649      	mov	r1, r9
 80041e6:	4638      	mov	r0, r7
 80041e8:	47c0      	blx	r8
 80041ea:	3001      	adds	r0, #1
 80041ec:	d01e      	beq.n	800422c <_printf_common+0xa4>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	6922      	ldr	r2, [r4, #16]
 80041f2:	f003 0306 	and.w	r3, r3, #6
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	bf02      	ittt	eq
 80041fa:	68e5      	ldreq	r5, [r4, #12]
 80041fc:	6833      	ldreq	r3, [r6, #0]
 80041fe:	1aed      	subeq	r5, r5, r3
 8004200:	68a3      	ldr	r3, [r4, #8]
 8004202:	bf0c      	ite	eq
 8004204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004208:	2500      	movne	r5, #0
 800420a:	4293      	cmp	r3, r2
 800420c:	bfc4      	itt	gt
 800420e:	1a9b      	subgt	r3, r3, r2
 8004210:	18ed      	addgt	r5, r5, r3
 8004212:	2600      	movs	r6, #0
 8004214:	341a      	adds	r4, #26
 8004216:	42b5      	cmp	r5, r6
 8004218:	d11a      	bne.n	8004250 <_printf_common+0xc8>
 800421a:	2000      	movs	r0, #0
 800421c:	e008      	b.n	8004230 <_printf_common+0xa8>
 800421e:	2301      	movs	r3, #1
 8004220:	4652      	mov	r2, sl
 8004222:	4649      	mov	r1, r9
 8004224:	4638      	mov	r0, r7
 8004226:	47c0      	blx	r8
 8004228:	3001      	adds	r0, #1
 800422a:	d103      	bne.n	8004234 <_printf_common+0xac>
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004234:	3501      	adds	r5, #1
 8004236:	e7c6      	b.n	80041c6 <_printf_common+0x3e>
 8004238:	18e1      	adds	r1, r4, r3
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	2030      	movs	r0, #48	; 0x30
 800423e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004242:	4422      	add	r2, r4
 8004244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800424c:	3302      	adds	r3, #2
 800424e:	e7c7      	b.n	80041e0 <_printf_common+0x58>
 8004250:	2301      	movs	r3, #1
 8004252:	4622      	mov	r2, r4
 8004254:	4649      	mov	r1, r9
 8004256:	4638      	mov	r0, r7
 8004258:	47c0      	blx	r8
 800425a:	3001      	adds	r0, #1
 800425c:	d0e6      	beq.n	800422c <_printf_common+0xa4>
 800425e:	3601      	adds	r6, #1
 8004260:	e7d9      	b.n	8004216 <_printf_common+0x8e>
	...

08004264 <_printf_i>:
 8004264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	7e0f      	ldrb	r7, [r1, #24]
 800426a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800426c:	2f78      	cmp	r7, #120	; 0x78
 800426e:	4691      	mov	r9, r2
 8004270:	4680      	mov	r8, r0
 8004272:	460c      	mov	r4, r1
 8004274:	469a      	mov	sl, r3
 8004276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800427a:	d807      	bhi.n	800428c <_printf_i+0x28>
 800427c:	2f62      	cmp	r7, #98	; 0x62
 800427e:	d80a      	bhi.n	8004296 <_printf_i+0x32>
 8004280:	2f00      	cmp	r7, #0
 8004282:	f000 80d4 	beq.w	800442e <_printf_i+0x1ca>
 8004286:	2f58      	cmp	r7, #88	; 0x58
 8004288:	f000 80c0 	beq.w	800440c <_printf_i+0x1a8>
 800428c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004294:	e03a      	b.n	800430c <_printf_i+0xa8>
 8004296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800429a:	2b15      	cmp	r3, #21
 800429c:	d8f6      	bhi.n	800428c <_printf_i+0x28>
 800429e:	a101      	add	r1, pc, #4	; (adr r1, 80042a4 <_printf_i+0x40>)
 80042a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042a4:	080042fd 	.word	0x080042fd
 80042a8:	08004311 	.word	0x08004311
 80042ac:	0800428d 	.word	0x0800428d
 80042b0:	0800428d 	.word	0x0800428d
 80042b4:	0800428d 	.word	0x0800428d
 80042b8:	0800428d 	.word	0x0800428d
 80042bc:	08004311 	.word	0x08004311
 80042c0:	0800428d 	.word	0x0800428d
 80042c4:	0800428d 	.word	0x0800428d
 80042c8:	0800428d 	.word	0x0800428d
 80042cc:	0800428d 	.word	0x0800428d
 80042d0:	08004415 	.word	0x08004415
 80042d4:	0800433d 	.word	0x0800433d
 80042d8:	080043cf 	.word	0x080043cf
 80042dc:	0800428d 	.word	0x0800428d
 80042e0:	0800428d 	.word	0x0800428d
 80042e4:	08004437 	.word	0x08004437
 80042e8:	0800428d 	.word	0x0800428d
 80042ec:	0800433d 	.word	0x0800433d
 80042f0:	0800428d 	.word	0x0800428d
 80042f4:	0800428d 	.word	0x0800428d
 80042f8:	080043d7 	.word	0x080043d7
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	1d1a      	adds	r2, r3, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	602a      	str	r2, [r5, #0]
 8004304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800430c:	2301      	movs	r3, #1
 800430e:	e09f      	b.n	8004450 <_printf_i+0x1ec>
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	682b      	ldr	r3, [r5, #0]
 8004314:	0607      	lsls	r7, r0, #24
 8004316:	f103 0104 	add.w	r1, r3, #4
 800431a:	6029      	str	r1, [r5, #0]
 800431c:	d501      	bpl.n	8004322 <_printf_i+0xbe>
 800431e:	681e      	ldr	r6, [r3, #0]
 8004320:	e003      	b.n	800432a <_printf_i+0xc6>
 8004322:	0646      	lsls	r6, r0, #25
 8004324:	d5fb      	bpl.n	800431e <_printf_i+0xba>
 8004326:	f9b3 6000 	ldrsh.w	r6, [r3]
 800432a:	2e00      	cmp	r6, #0
 800432c:	da03      	bge.n	8004336 <_printf_i+0xd2>
 800432e:	232d      	movs	r3, #45	; 0x2d
 8004330:	4276      	negs	r6, r6
 8004332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004336:	485a      	ldr	r0, [pc, #360]	; (80044a0 <_printf_i+0x23c>)
 8004338:	230a      	movs	r3, #10
 800433a:	e012      	b.n	8004362 <_printf_i+0xfe>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	1d19      	adds	r1, r3, #4
 8004342:	6029      	str	r1, [r5, #0]
 8004344:	0605      	lsls	r5, r0, #24
 8004346:	d501      	bpl.n	800434c <_printf_i+0xe8>
 8004348:	681e      	ldr	r6, [r3, #0]
 800434a:	e002      	b.n	8004352 <_printf_i+0xee>
 800434c:	0641      	lsls	r1, r0, #25
 800434e:	d5fb      	bpl.n	8004348 <_printf_i+0xe4>
 8004350:	881e      	ldrh	r6, [r3, #0]
 8004352:	4853      	ldr	r0, [pc, #332]	; (80044a0 <_printf_i+0x23c>)
 8004354:	2f6f      	cmp	r7, #111	; 0x6f
 8004356:	bf0c      	ite	eq
 8004358:	2308      	moveq	r3, #8
 800435a:	230a      	movne	r3, #10
 800435c:	2100      	movs	r1, #0
 800435e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004362:	6865      	ldr	r5, [r4, #4]
 8004364:	60a5      	str	r5, [r4, #8]
 8004366:	2d00      	cmp	r5, #0
 8004368:	bfa2      	ittt	ge
 800436a:	6821      	ldrge	r1, [r4, #0]
 800436c:	f021 0104 	bicge.w	r1, r1, #4
 8004370:	6021      	strge	r1, [r4, #0]
 8004372:	b90e      	cbnz	r6, 8004378 <_printf_i+0x114>
 8004374:	2d00      	cmp	r5, #0
 8004376:	d04b      	beq.n	8004410 <_printf_i+0x1ac>
 8004378:	4615      	mov	r5, r2
 800437a:	fbb6 f1f3 	udiv	r1, r6, r3
 800437e:	fb03 6711 	mls	r7, r3, r1, r6
 8004382:	5dc7      	ldrb	r7, [r0, r7]
 8004384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004388:	4637      	mov	r7, r6
 800438a:	42bb      	cmp	r3, r7
 800438c:	460e      	mov	r6, r1
 800438e:	d9f4      	bls.n	800437a <_printf_i+0x116>
 8004390:	2b08      	cmp	r3, #8
 8004392:	d10b      	bne.n	80043ac <_printf_i+0x148>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	07de      	lsls	r6, r3, #31
 8004398:	d508      	bpl.n	80043ac <_printf_i+0x148>
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	6861      	ldr	r1, [r4, #4]
 800439e:	4299      	cmp	r1, r3
 80043a0:	bfde      	ittt	le
 80043a2:	2330      	movle	r3, #48	; 0x30
 80043a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043ac:	1b52      	subs	r2, r2, r5
 80043ae:	6122      	str	r2, [r4, #16]
 80043b0:	f8cd a000 	str.w	sl, [sp]
 80043b4:	464b      	mov	r3, r9
 80043b6:	aa03      	add	r2, sp, #12
 80043b8:	4621      	mov	r1, r4
 80043ba:	4640      	mov	r0, r8
 80043bc:	f7ff fee4 	bl	8004188 <_printf_common>
 80043c0:	3001      	adds	r0, #1
 80043c2:	d14a      	bne.n	800445a <_printf_i+0x1f6>
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	b004      	add	sp, #16
 80043ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	f043 0320 	orr.w	r3, r3, #32
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	4833      	ldr	r0, [pc, #204]	; (80044a4 <_printf_i+0x240>)
 80043d8:	2778      	movs	r7, #120	; 0x78
 80043da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	6829      	ldr	r1, [r5, #0]
 80043e2:	061f      	lsls	r7, r3, #24
 80043e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80043e8:	d402      	bmi.n	80043f0 <_printf_i+0x18c>
 80043ea:	065f      	lsls	r7, r3, #25
 80043ec:	bf48      	it	mi
 80043ee:	b2b6      	uxthmi	r6, r6
 80043f0:	07df      	lsls	r7, r3, #31
 80043f2:	bf48      	it	mi
 80043f4:	f043 0320 	orrmi.w	r3, r3, #32
 80043f8:	6029      	str	r1, [r5, #0]
 80043fa:	bf48      	it	mi
 80043fc:	6023      	strmi	r3, [r4, #0]
 80043fe:	b91e      	cbnz	r6, 8004408 <_printf_i+0x1a4>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	f023 0320 	bic.w	r3, r3, #32
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	2310      	movs	r3, #16
 800440a:	e7a7      	b.n	800435c <_printf_i+0xf8>
 800440c:	4824      	ldr	r0, [pc, #144]	; (80044a0 <_printf_i+0x23c>)
 800440e:	e7e4      	b.n	80043da <_printf_i+0x176>
 8004410:	4615      	mov	r5, r2
 8004412:	e7bd      	b.n	8004390 <_printf_i+0x12c>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	6826      	ldr	r6, [r4, #0]
 8004418:	6961      	ldr	r1, [r4, #20]
 800441a:	1d18      	adds	r0, r3, #4
 800441c:	6028      	str	r0, [r5, #0]
 800441e:	0635      	lsls	r5, r6, #24
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	d501      	bpl.n	8004428 <_printf_i+0x1c4>
 8004424:	6019      	str	r1, [r3, #0]
 8004426:	e002      	b.n	800442e <_printf_i+0x1ca>
 8004428:	0670      	lsls	r0, r6, #25
 800442a:	d5fb      	bpl.n	8004424 <_printf_i+0x1c0>
 800442c:	8019      	strh	r1, [r3, #0]
 800442e:	2300      	movs	r3, #0
 8004430:	6123      	str	r3, [r4, #16]
 8004432:	4615      	mov	r5, r2
 8004434:	e7bc      	b.n	80043b0 <_printf_i+0x14c>
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	1d1a      	adds	r2, r3, #4
 800443a:	602a      	str	r2, [r5, #0]
 800443c:	681d      	ldr	r5, [r3, #0]
 800443e:	6862      	ldr	r2, [r4, #4]
 8004440:	2100      	movs	r1, #0
 8004442:	4628      	mov	r0, r5
 8004444:	f7fb fecc 	bl	80001e0 <memchr>
 8004448:	b108      	cbz	r0, 800444e <_printf_i+0x1ea>
 800444a:	1b40      	subs	r0, r0, r5
 800444c:	6060      	str	r0, [r4, #4]
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	6123      	str	r3, [r4, #16]
 8004452:	2300      	movs	r3, #0
 8004454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004458:	e7aa      	b.n	80043b0 <_printf_i+0x14c>
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	462a      	mov	r2, r5
 800445e:	4649      	mov	r1, r9
 8004460:	4640      	mov	r0, r8
 8004462:	47d0      	blx	sl
 8004464:	3001      	adds	r0, #1
 8004466:	d0ad      	beq.n	80043c4 <_printf_i+0x160>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	079b      	lsls	r3, r3, #30
 800446c:	d413      	bmi.n	8004496 <_printf_i+0x232>
 800446e:	68e0      	ldr	r0, [r4, #12]
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	4298      	cmp	r0, r3
 8004474:	bfb8      	it	lt
 8004476:	4618      	movlt	r0, r3
 8004478:	e7a6      	b.n	80043c8 <_printf_i+0x164>
 800447a:	2301      	movs	r3, #1
 800447c:	4632      	mov	r2, r6
 800447e:	4649      	mov	r1, r9
 8004480:	4640      	mov	r0, r8
 8004482:	47d0      	blx	sl
 8004484:	3001      	adds	r0, #1
 8004486:	d09d      	beq.n	80043c4 <_printf_i+0x160>
 8004488:	3501      	adds	r5, #1
 800448a:	68e3      	ldr	r3, [r4, #12]
 800448c:	9903      	ldr	r1, [sp, #12]
 800448e:	1a5b      	subs	r3, r3, r1
 8004490:	42ab      	cmp	r3, r5
 8004492:	dcf2      	bgt.n	800447a <_printf_i+0x216>
 8004494:	e7eb      	b.n	800446e <_printf_i+0x20a>
 8004496:	2500      	movs	r5, #0
 8004498:	f104 0619 	add.w	r6, r4, #25
 800449c:	e7f5      	b.n	800448a <_printf_i+0x226>
 800449e:	bf00      	nop
 80044a0:	080053b9 	.word	0x080053b9
 80044a4:	080053ca 	.word	0x080053ca

080044a8 <__svfiscanf_r>:
 80044a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ac:	461d      	mov	r5, r3
 80044ae:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80044b0:	07df      	lsls	r7, r3, #31
 80044b2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80044b6:	4606      	mov	r6, r0
 80044b8:	460c      	mov	r4, r1
 80044ba:	4692      	mov	sl, r2
 80044bc:	d405      	bmi.n	80044ca <__svfiscanf_r+0x22>
 80044be:	898b      	ldrh	r3, [r1, #12]
 80044c0:	0598      	lsls	r0, r3, #22
 80044c2:	d402      	bmi.n	80044ca <__svfiscanf_r+0x22>
 80044c4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80044c6:	f7ff fab8 	bl	8003a3a <__retarget_lock_acquire_recursive>
 80044ca:	2300      	movs	r3, #0
 80044cc:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80044d0:	4baa      	ldr	r3, [pc, #680]	; (800477c <__svfiscanf_r+0x2d4>)
 80044d2:	93a0      	str	r3, [sp, #640]	; 0x280
 80044d4:	f10d 0804 	add.w	r8, sp, #4
 80044d8:	4ba9      	ldr	r3, [pc, #676]	; (8004780 <__svfiscanf_r+0x2d8>)
 80044da:	4faa      	ldr	r7, [pc, #680]	; (8004784 <__svfiscanf_r+0x2dc>)
 80044dc:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8004788 <__svfiscanf_r+0x2e0>
 80044e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80044e4:	93a1      	str	r3, [sp, #644]	; 0x284
 80044e6:	9500      	str	r5, [sp, #0]
 80044e8:	f89a 3000 	ldrb.w	r3, [sl]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8170 	beq.w	80047d2 <__svfiscanf_r+0x32a>
 80044f2:	5cf9      	ldrb	r1, [r7, r3]
 80044f4:	f011 0108 	ands.w	r1, r1, #8
 80044f8:	f10a 0501 	add.w	r5, sl, #1
 80044fc:	d019      	beq.n	8004532 <__svfiscanf_r+0x8a>
 80044fe:	6863      	ldr	r3, [r4, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	dd0f      	ble.n	8004524 <__svfiscanf_r+0x7c>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	781a      	ldrb	r2, [r3, #0]
 8004508:	5cba      	ldrb	r2, [r7, r2]
 800450a:	0711      	lsls	r1, r2, #28
 800450c:	d401      	bmi.n	8004512 <__svfiscanf_r+0x6a>
 800450e:	46aa      	mov	sl, r5
 8004510:	e7ea      	b.n	80044e8 <__svfiscanf_r+0x40>
 8004512:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004514:	3201      	adds	r2, #1
 8004516:	9245      	str	r2, [sp, #276]	; 0x114
 8004518:	6862      	ldr	r2, [r4, #4]
 800451a:	3301      	adds	r3, #1
 800451c:	3a01      	subs	r2, #1
 800451e:	6062      	str	r2, [r4, #4]
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	e7ec      	b.n	80044fe <__svfiscanf_r+0x56>
 8004524:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004526:	4621      	mov	r1, r4
 8004528:	4630      	mov	r0, r6
 800452a:	4798      	blx	r3
 800452c:	2800      	cmp	r0, #0
 800452e:	d0e9      	beq.n	8004504 <__svfiscanf_r+0x5c>
 8004530:	e7ed      	b.n	800450e <__svfiscanf_r+0x66>
 8004532:	2b25      	cmp	r3, #37	; 0x25
 8004534:	d012      	beq.n	800455c <__svfiscanf_r+0xb4>
 8004536:	469a      	mov	sl, r3
 8004538:	6863      	ldr	r3, [r4, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f340 8093 	ble.w	8004666 <__svfiscanf_r+0x1be>
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	7813      	ldrb	r3, [r2, #0]
 8004544:	4553      	cmp	r3, sl
 8004546:	f040 8144 	bne.w	80047d2 <__svfiscanf_r+0x32a>
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	3b01      	subs	r3, #1
 800454e:	6063      	str	r3, [r4, #4]
 8004550:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004552:	3201      	adds	r2, #1
 8004554:	3301      	adds	r3, #1
 8004556:	6022      	str	r2, [r4, #0]
 8004558:	9345      	str	r3, [sp, #276]	; 0x114
 800455a:	e7d8      	b.n	800450e <__svfiscanf_r+0x66>
 800455c:	9141      	str	r1, [sp, #260]	; 0x104
 800455e:	9143      	str	r1, [sp, #268]	; 0x10c
 8004560:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004564:	2b2a      	cmp	r3, #42	; 0x2a
 8004566:	bf02      	ittt	eq
 8004568:	2310      	moveq	r3, #16
 800456a:	9341      	streq	r3, [sp, #260]	; 0x104
 800456c:	f10a 0502 	addeq.w	r5, sl, #2
 8004570:	220a      	movs	r2, #10
 8004572:	46aa      	mov	sl, r5
 8004574:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004578:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800457c:	2b09      	cmp	r3, #9
 800457e:	d91d      	bls.n	80045bc <__svfiscanf_r+0x114>
 8004580:	4881      	ldr	r0, [pc, #516]	; (8004788 <__svfiscanf_r+0x2e0>)
 8004582:	2203      	movs	r2, #3
 8004584:	f7fb fe2c 	bl	80001e0 <memchr>
 8004588:	b138      	cbz	r0, 800459a <__svfiscanf_r+0xf2>
 800458a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800458c:	eba0 0009 	sub.w	r0, r0, r9
 8004590:	2301      	movs	r3, #1
 8004592:	4083      	lsls	r3, r0
 8004594:	4313      	orrs	r3, r2
 8004596:	9341      	str	r3, [sp, #260]	; 0x104
 8004598:	4655      	mov	r5, sl
 800459a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800459e:	2b78      	cmp	r3, #120	; 0x78
 80045a0:	d807      	bhi.n	80045b2 <__svfiscanf_r+0x10a>
 80045a2:	2b57      	cmp	r3, #87	; 0x57
 80045a4:	d811      	bhi.n	80045ca <__svfiscanf_r+0x122>
 80045a6:	2b25      	cmp	r3, #37	; 0x25
 80045a8:	d0c5      	beq.n	8004536 <__svfiscanf_r+0x8e>
 80045aa:	d857      	bhi.n	800465c <__svfiscanf_r+0x1b4>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80c6 	beq.w	800473e <__svfiscanf_r+0x296>
 80045b2:	2303      	movs	r3, #3
 80045b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80045b6:	230a      	movs	r3, #10
 80045b8:	9342      	str	r3, [sp, #264]	; 0x108
 80045ba:	e07f      	b.n	80046bc <__svfiscanf_r+0x214>
 80045bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80045be:	fb02 1103 	mla	r1, r2, r3, r1
 80045c2:	3930      	subs	r1, #48	; 0x30
 80045c4:	9143      	str	r1, [sp, #268]	; 0x10c
 80045c6:	4655      	mov	r5, sl
 80045c8:	e7d3      	b.n	8004572 <__svfiscanf_r+0xca>
 80045ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80045ce:	2a20      	cmp	r2, #32
 80045d0:	d8ef      	bhi.n	80045b2 <__svfiscanf_r+0x10a>
 80045d2:	a101      	add	r1, pc, #4	; (adr r1, 80045d8 <__svfiscanf_r+0x130>)
 80045d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045d8:	0800469f 	.word	0x0800469f
 80045dc:	080045b3 	.word	0x080045b3
 80045e0:	080045b3 	.word	0x080045b3
 80045e4:	080046fd 	.word	0x080046fd
 80045e8:	080045b3 	.word	0x080045b3
 80045ec:	080045b3 	.word	0x080045b3
 80045f0:	080045b3 	.word	0x080045b3
 80045f4:	080045b3 	.word	0x080045b3
 80045f8:	080045b3 	.word	0x080045b3
 80045fc:	080045b3 	.word	0x080045b3
 8004600:	080045b3 	.word	0x080045b3
 8004604:	08004713 	.word	0x08004713
 8004608:	080046f9 	.word	0x080046f9
 800460c:	08004663 	.word	0x08004663
 8004610:	08004663 	.word	0x08004663
 8004614:	08004663 	.word	0x08004663
 8004618:	080045b3 	.word	0x080045b3
 800461c:	080046b5 	.word	0x080046b5
 8004620:	080045b3 	.word	0x080045b3
 8004624:	080045b3 	.word	0x080045b3
 8004628:	080045b3 	.word	0x080045b3
 800462c:	080045b3 	.word	0x080045b3
 8004630:	08004723 	.word	0x08004723
 8004634:	080046f1 	.word	0x080046f1
 8004638:	08004697 	.word	0x08004697
 800463c:	080045b3 	.word	0x080045b3
 8004640:	080045b3 	.word	0x080045b3
 8004644:	0800471f 	.word	0x0800471f
 8004648:	080045b3 	.word	0x080045b3
 800464c:	080046f9 	.word	0x080046f9
 8004650:	080045b3 	.word	0x080045b3
 8004654:	080045b3 	.word	0x080045b3
 8004658:	0800469f 	.word	0x0800469f
 800465c:	3b45      	subs	r3, #69	; 0x45
 800465e:	2b02      	cmp	r3, #2
 8004660:	d8a7      	bhi.n	80045b2 <__svfiscanf_r+0x10a>
 8004662:	2305      	movs	r3, #5
 8004664:	e029      	b.n	80046ba <__svfiscanf_r+0x212>
 8004666:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004668:	4621      	mov	r1, r4
 800466a:	4630      	mov	r0, r6
 800466c:	4798      	blx	r3
 800466e:	2800      	cmp	r0, #0
 8004670:	f43f af66 	beq.w	8004540 <__svfiscanf_r+0x98>
 8004674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004676:	07da      	lsls	r2, r3, #31
 8004678:	f140 80a3 	bpl.w	80047c2 <__svfiscanf_r+0x31a>
 800467c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800467e:	2800      	cmp	r0, #0
 8004680:	d066      	beq.n	8004750 <__svfiscanf_r+0x2a8>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004688:	bf18      	it	ne
 800468a:	f04f 30ff 	movne.w	r0, #4294967295
 800468e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004696:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004698:	f042 0220 	orr.w	r2, r2, #32
 800469c:	9241      	str	r2, [sp, #260]	; 0x104
 800469e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80046a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a4:	9241      	str	r2, [sp, #260]	; 0x104
 80046a6:	2210      	movs	r2, #16
 80046a8:	2b6f      	cmp	r3, #111	; 0x6f
 80046aa:	9242      	str	r2, [sp, #264]	; 0x108
 80046ac:	bf34      	ite	cc
 80046ae:	2303      	movcc	r3, #3
 80046b0:	2304      	movcs	r3, #4
 80046b2:	e002      	b.n	80046ba <__svfiscanf_r+0x212>
 80046b4:	2300      	movs	r3, #0
 80046b6:	9342      	str	r3, [sp, #264]	; 0x108
 80046b8:	2303      	movs	r3, #3
 80046ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80046bc:	6863      	ldr	r3, [r4, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	dd49      	ble.n	8004756 <__svfiscanf_r+0x2ae>
 80046c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80046c4:	065b      	lsls	r3, r3, #25
 80046c6:	d404      	bmi.n	80046d2 <__svfiscanf_r+0x22a>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	5cba      	ldrb	r2, [r7, r2]
 80046ce:	0710      	lsls	r0, r2, #28
 80046d0:	d448      	bmi.n	8004764 <__svfiscanf_r+0x2bc>
 80046d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	dc60      	bgt.n	800479a <__svfiscanf_r+0x2f2>
 80046d8:	466b      	mov	r3, sp
 80046da:	4622      	mov	r2, r4
 80046dc:	a941      	add	r1, sp, #260	; 0x104
 80046de:	4630      	mov	r0, r6
 80046e0:	f000 f898 	bl	8004814 <_scanf_chars>
 80046e4:	2801      	cmp	r0, #1
 80046e6:	d074      	beq.n	80047d2 <__svfiscanf_r+0x32a>
 80046e8:	2802      	cmp	r0, #2
 80046ea:	f47f af10 	bne.w	800450e <__svfiscanf_r+0x66>
 80046ee:	e7c1      	b.n	8004674 <__svfiscanf_r+0x1cc>
 80046f0:	2308      	movs	r3, #8
 80046f2:	9342      	str	r3, [sp, #264]	; 0x108
 80046f4:	2304      	movs	r3, #4
 80046f6:	e7e0      	b.n	80046ba <__svfiscanf_r+0x212>
 80046f8:	220a      	movs	r2, #10
 80046fa:	e7d5      	b.n	80046a8 <__svfiscanf_r+0x200>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4640      	mov	r0, r8
 8004700:	f000 fb6c 	bl	8004ddc <__sccl>
 8004704:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470a:	9341      	str	r3, [sp, #260]	; 0x104
 800470c:	4605      	mov	r5, r0
 800470e:	2301      	movs	r3, #1
 8004710:	e7d3      	b.n	80046ba <__svfiscanf_r+0x212>
 8004712:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004718:	9341      	str	r3, [sp, #260]	; 0x104
 800471a:	2300      	movs	r3, #0
 800471c:	e7cd      	b.n	80046ba <__svfiscanf_r+0x212>
 800471e:	2302      	movs	r3, #2
 8004720:	e7cb      	b.n	80046ba <__svfiscanf_r+0x212>
 8004722:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004724:	06c3      	lsls	r3, r0, #27
 8004726:	f53f aef2 	bmi.w	800450e <__svfiscanf_r+0x66>
 800472a:	9b00      	ldr	r3, [sp, #0]
 800472c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800472e:	1d19      	adds	r1, r3, #4
 8004730:	9100      	str	r1, [sp, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	07c0      	lsls	r0, r0, #31
 8004736:	bf4c      	ite	mi
 8004738:	801a      	strhmi	r2, [r3, #0]
 800473a:	601a      	strpl	r2, [r3, #0]
 800473c:	e6e7      	b.n	800450e <__svfiscanf_r+0x66>
 800473e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004740:	07d8      	lsls	r0, r3, #31
 8004742:	d405      	bmi.n	8004750 <__svfiscanf_r+0x2a8>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	0599      	lsls	r1, r3, #22
 8004748:	d402      	bmi.n	8004750 <__svfiscanf_r+0x2a8>
 800474a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800474c:	f7ff f976 	bl	8003a3c <__retarget_lock_release_recursive>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	e79b      	b.n	800468e <__svfiscanf_r+0x1e6>
 8004756:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004758:	4621      	mov	r1, r4
 800475a:	4630      	mov	r0, r6
 800475c:	4798      	blx	r3
 800475e:	2800      	cmp	r0, #0
 8004760:	d0af      	beq.n	80046c2 <__svfiscanf_r+0x21a>
 8004762:	e787      	b.n	8004674 <__svfiscanf_r+0x1cc>
 8004764:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004766:	3201      	adds	r2, #1
 8004768:	9245      	str	r2, [sp, #276]	; 0x114
 800476a:	6862      	ldr	r2, [r4, #4]
 800476c:	3a01      	subs	r2, #1
 800476e:	2a00      	cmp	r2, #0
 8004770:	6062      	str	r2, [r4, #4]
 8004772:	dd0b      	ble.n	800478c <__svfiscanf_r+0x2e4>
 8004774:	3301      	adds	r3, #1
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	e7a6      	b.n	80046c8 <__svfiscanf_r+0x220>
 800477a:	bf00      	nop
 800477c:	08004ec3 	.word	0x08004ec3
 8004780:	08004ced 	.word	0x08004ced
 8004784:	080053f7 	.word	0x080053f7
 8004788:	080053ae 	.word	0x080053ae
 800478c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800478e:	4621      	mov	r1, r4
 8004790:	4630      	mov	r0, r6
 8004792:	4798      	blx	r3
 8004794:	2800      	cmp	r0, #0
 8004796:	d097      	beq.n	80046c8 <__svfiscanf_r+0x220>
 8004798:	e76c      	b.n	8004674 <__svfiscanf_r+0x1cc>
 800479a:	2b04      	cmp	r3, #4
 800479c:	dc06      	bgt.n	80047ac <__svfiscanf_r+0x304>
 800479e:	466b      	mov	r3, sp
 80047a0:	4622      	mov	r2, r4
 80047a2:	a941      	add	r1, sp, #260	; 0x104
 80047a4:	4630      	mov	r0, r6
 80047a6:	f000 f88f 	bl	80048c8 <_scanf_i>
 80047aa:	e79b      	b.n	80046e4 <__svfiscanf_r+0x23c>
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <__svfiscanf_r+0x340>)
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f43f aead 	beq.w	800450e <__svfiscanf_r+0x66>
 80047b4:	466b      	mov	r3, sp
 80047b6:	4622      	mov	r2, r4
 80047b8:	a941      	add	r1, sp, #260	; 0x104
 80047ba:	4630      	mov	r0, r6
 80047bc:	f3af 8000 	nop.w
 80047c0:	e790      	b.n	80046e4 <__svfiscanf_r+0x23c>
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	0599      	lsls	r1, r3, #22
 80047c6:	f53f af59 	bmi.w	800467c <__svfiscanf_r+0x1d4>
 80047ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047cc:	f7ff f936 	bl	8003a3c <__retarget_lock_release_recursive>
 80047d0:	e754      	b.n	800467c <__svfiscanf_r+0x1d4>
 80047d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047d4:	07da      	lsls	r2, r3, #31
 80047d6:	d405      	bmi.n	80047e4 <__svfiscanf_r+0x33c>
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	059b      	lsls	r3, r3, #22
 80047dc:	d402      	bmi.n	80047e4 <__svfiscanf_r+0x33c>
 80047de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047e0:	f7ff f92c 	bl	8003a3c <__retarget_lock_release_recursive>
 80047e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80047e6:	e752      	b.n	800468e <__svfiscanf_r+0x1e6>
 80047e8:	00000000 	.word	0x00000000

080047ec <_vfiscanf_r>:
 80047ec:	b530      	push	{r4, r5, lr}
 80047ee:	4604      	mov	r4, r0
 80047f0:	b085      	sub	sp, #20
 80047f2:	b148      	cbz	r0, 8004808 <_vfiscanf_r+0x1c>
 80047f4:	6a05      	ldr	r5, [r0, #32]
 80047f6:	b93d      	cbnz	r5, 8004808 <_vfiscanf_r+0x1c>
 80047f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047fc:	9101      	str	r1, [sp, #4]
 80047fe:	f7fe fe47 	bl	8003490 <__sinit>
 8004802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004806:	9901      	ldr	r1, [sp, #4]
 8004808:	4620      	mov	r0, r4
 800480a:	b005      	add	sp, #20
 800480c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004810:	f7ff be4a 	b.w	80044a8 <__svfiscanf_r>

08004814 <_scanf_chars>:
 8004814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004818:	4615      	mov	r5, r2
 800481a:	688a      	ldr	r2, [r1, #8]
 800481c:	4680      	mov	r8, r0
 800481e:	460c      	mov	r4, r1
 8004820:	b932      	cbnz	r2, 8004830 <_scanf_chars+0x1c>
 8004822:	698a      	ldr	r2, [r1, #24]
 8004824:	2a00      	cmp	r2, #0
 8004826:	bf0c      	ite	eq
 8004828:	2201      	moveq	r2, #1
 800482a:	f04f 32ff 	movne.w	r2, #4294967295
 800482e:	608a      	str	r2, [r1, #8]
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80048c4 <_scanf_chars+0xb0>
 8004836:	06d1      	lsls	r1, r2, #27
 8004838:	bf5f      	itttt	pl
 800483a:	681a      	ldrpl	r2, [r3, #0]
 800483c:	1d11      	addpl	r1, r2, #4
 800483e:	6019      	strpl	r1, [r3, #0]
 8004840:	6816      	ldrpl	r6, [r2, #0]
 8004842:	2700      	movs	r7, #0
 8004844:	69a0      	ldr	r0, [r4, #24]
 8004846:	b188      	cbz	r0, 800486c <_scanf_chars+0x58>
 8004848:	2801      	cmp	r0, #1
 800484a:	d107      	bne.n	800485c <_scanf_chars+0x48>
 800484c:	682a      	ldr	r2, [r5, #0]
 800484e:	7811      	ldrb	r1, [r2, #0]
 8004850:	6962      	ldr	r2, [r4, #20]
 8004852:	5c52      	ldrb	r2, [r2, r1]
 8004854:	b952      	cbnz	r2, 800486c <_scanf_chars+0x58>
 8004856:	2f00      	cmp	r7, #0
 8004858:	d031      	beq.n	80048be <_scanf_chars+0xaa>
 800485a:	e022      	b.n	80048a2 <_scanf_chars+0x8e>
 800485c:	2802      	cmp	r0, #2
 800485e:	d120      	bne.n	80048a2 <_scanf_chars+0x8e>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004868:	071b      	lsls	r3, r3, #28
 800486a:	d41a      	bmi.n	80048a2 <_scanf_chars+0x8e>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	06da      	lsls	r2, r3, #27
 8004870:	bf5e      	ittt	pl
 8004872:	682b      	ldrpl	r3, [r5, #0]
 8004874:	781b      	ldrbpl	r3, [r3, #0]
 8004876:	f806 3b01 	strbpl.w	r3, [r6], #1
 800487a:	682a      	ldr	r2, [r5, #0]
 800487c:	686b      	ldr	r3, [r5, #4]
 800487e:	3201      	adds	r2, #1
 8004880:	602a      	str	r2, [r5, #0]
 8004882:	68a2      	ldr	r2, [r4, #8]
 8004884:	3b01      	subs	r3, #1
 8004886:	3a01      	subs	r2, #1
 8004888:	606b      	str	r3, [r5, #4]
 800488a:	3701      	adds	r7, #1
 800488c:	60a2      	str	r2, [r4, #8]
 800488e:	b142      	cbz	r2, 80048a2 <_scanf_chars+0x8e>
 8004890:	2b00      	cmp	r3, #0
 8004892:	dcd7      	bgt.n	8004844 <_scanf_chars+0x30>
 8004894:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004898:	4629      	mov	r1, r5
 800489a:	4640      	mov	r0, r8
 800489c:	4798      	blx	r3
 800489e:	2800      	cmp	r0, #0
 80048a0:	d0d0      	beq.n	8004844 <_scanf_chars+0x30>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f013 0310 	ands.w	r3, r3, #16
 80048a8:	d105      	bne.n	80048b6 <_scanf_chars+0xa2>
 80048aa:	68e2      	ldr	r2, [r4, #12]
 80048ac:	3201      	adds	r2, #1
 80048ae:	60e2      	str	r2, [r4, #12]
 80048b0:	69a2      	ldr	r2, [r4, #24]
 80048b2:	b102      	cbz	r2, 80048b6 <_scanf_chars+0xa2>
 80048b4:	7033      	strb	r3, [r6, #0]
 80048b6:	6923      	ldr	r3, [r4, #16]
 80048b8:	443b      	add	r3, r7
 80048ba:	6123      	str	r3, [r4, #16]
 80048bc:	2000      	movs	r0, #0
 80048be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048c2:	bf00      	nop
 80048c4:	080053f7 	.word	0x080053f7

080048c8 <_scanf_i>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	4698      	mov	r8, r3
 80048ce:	4b74      	ldr	r3, [pc, #464]	; (8004aa0 <_scanf_i+0x1d8>)
 80048d0:	460c      	mov	r4, r1
 80048d2:	4682      	mov	sl, r0
 80048d4:	4616      	mov	r6, r2
 80048d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048da:	b087      	sub	sp, #28
 80048dc:	ab03      	add	r3, sp, #12
 80048de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80048e2:	4b70      	ldr	r3, [pc, #448]	; (8004aa4 <_scanf_i+0x1dc>)
 80048e4:	69a1      	ldr	r1, [r4, #24]
 80048e6:	4a70      	ldr	r2, [pc, #448]	; (8004aa8 <_scanf_i+0x1e0>)
 80048e8:	2903      	cmp	r1, #3
 80048ea:	bf18      	it	ne
 80048ec:	461a      	movne	r2, r3
 80048ee:	68a3      	ldr	r3, [r4, #8]
 80048f0:	9201      	str	r2, [sp, #4]
 80048f2:	1e5a      	subs	r2, r3, #1
 80048f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80048f8:	bf88      	it	hi
 80048fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80048fe:	4627      	mov	r7, r4
 8004900:	bf82      	ittt	hi
 8004902:	eb03 0905 	addhi.w	r9, r3, r5
 8004906:	f240 135d 	movwhi	r3, #349	; 0x15d
 800490a:	60a3      	strhi	r3, [r4, #8]
 800490c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004910:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004914:	bf98      	it	ls
 8004916:	f04f 0900 	movls.w	r9, #0
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	463d      	mov	r5, r7
 800491e:	f04f 0b00 	mov.w	fp, #0
 8004922:	6831      	ldr	r1, [r6, #0]
 8004924:	ab03      	add	r3, sp, #12
 8004926:	7809      	ldrb	r1, [r1, #0]
 8004928:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800492c:	2202      	movs	r2, #2
 800492e:	f7fb fc57 	bl	80001e0 <memchr>
 8004932:	b328      	cbz	r0, 8004980 <_scanf_i+0xb8>
 8004934:	f1bb 0f01 	cmp.w	fp, #1
 8004938:	d159      	bne.n	80049ee <_scanf_i+0x126>
 800493a:	6862      	ldr	r2, [r4, #4]
 800493c:	b92a      	cbnz	r2, 800494a <_scanf_i+0x82>
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	2308      	movs	r3, #8
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	6063      	str	r3, [r4, #4]
 8004948:	6022      	str	r2, [r4, #0]
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004950:	6022      	str	r2, [r4, #0]
 8004952:	68a2      	ldr	r2, [r4, #8]
 8004954:	1e51      	subs	r1, r2, #1
 8004956:	60a1      	str	r1, [r4, #8]
 8004958:	b192      	cbz	r2, 8004980 <_scanf_i+0xb8>
 800495a:	6832      	ldr	r2, [r6, #0]
 800495c:	1c51      	adds	r1, r2, #1
 800495e:	6031      	str	r1, [r6, #0]
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	f805 2b01 	strb.w	r2, [r5], #1
 8004966:	6872      	ldr	r2, [r6, #4]
 8004968:	3a01      	subs	r2, #1
 800496a:	2a00      	cmp	r2, #0
 800496c:	6072      	str	r2, [r6, #4]
 800496e:	dc07      	bgt.n	8004980 <_scanf_i+0xb8>
 8004970:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004974:	4631      	mov	r1, r6
 8004976:	4650      	mov	r0, sl
 8004978:	4790      	blx	r2
 800497a:	2800      	cmp	r0, #0
 800497c:	f040 8085 	bne.w	8004a8a <_scanf_i+0x1c2>
 8004980:	f10b 0b01 	add.w	fp, fp, #1
 8004984:	f1bb 0f03 	cmp.w	fp, #3
 8004988:	d1cb      	bne.n	8004922 <_scanf_i+0x5a>
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	b90b      	cbnz	r3, 8004992 <_scanf_i+0xca>
 800498e:	230a      	movs	r3, #10
 8004990:	6063      	str	r3, [r4, #4]
 8004992:	6863      	ldr	r3, [r4, #4]
 8004994:	4945      	ldr	r1, [pc, #276]	; (8004aac <_scanf_i+0x1e4>)
 8004996:	6960      	ldr	r0, [r4, #20]
 8004998:	1ac9      	subs	r1, r1, r3
 800499a:	f000 fa1f 	bl	8004ddc <__sccl>
 800499e:	f04f 0b00 	mov.w	fp, #0
 80049a2:	68a3      	ldr	r3, [r4, #8]
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d03d      	beq.n	8004a26 <_scanf_i+0x15e>
 80049aa:	6831      	ldr	r1, [r6, #0]
 80049ac:	6960      	ldr	r0, [r4, #20]
 80049ae:	f891 c000 	ldrb.w	ip, [r1]
 80049b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d035      	beq.n	8004a26 <_scanf_i+0x15e>
 80049ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80049be:	d124      	bne.n	8004a0a <_scanf_i+0x142>
 80049c0:	0510      	lsls	r0, r2, #20
 80049c2:	d522      	bpl.n	8004a0a <_scanf_i+0x142>
 80049c4:	f10b 0b01 	add.w	fp, fp, #1
 80049c8:	f1b9 0f00 	cmp.w	r9, #0
 80049cc:	d003      	beq.n	80049d6 <_scanf_i+0x10e>
 80049ce:	3301      	adds	r3, #1
 80049d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	6873      	ldr	r3, [r6, #4]
 80049d8:	3b01      	subs	r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	6073      	str	r3, [r6, #4]
 80049de:	dd1b      	ble.n	8004a18 <_scanf_i+0x150>
 80049e0:	6833      	ldr	r3, [r6, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	60a3      	str	r3, [r4, #8]
 80049ec:	e7d9      	b.n	80049a2 <_scanf_i+0xda>
 80049ee:	f1bb 0f02 	cmp.w	fp, #2
 80049f2:	d1ae      	bne.n	8004952 <_scanf_i+0x8a>
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80049fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80049fe:	d1bf      	bne.n	8004980 <_scanf_i+0xb8>
 8004a00:	2310      	movs	r3, #16
 8004a02:	6063      	str	r3, [r4, #4]
 8004a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a08:	e7a2      	b.n	8004950 <_scanf_i+0x88>
 8004a0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004a0e:	6022      	str	r2, [r4, #0]
 8004a10:	780b      	ldrb	r3, [r1, #0]
 8004a12:	f805 3b01 	strb.w	r3, [r5], #1
 8004a16:	e7de      	b.n	80049d6 <_scanf_i+0x10e>
 8004a18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4650      	mov	r0, sl
 8004a20:	4798      	blx	r3
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d0df      	beq.n	80049e6 <_scanf_i+0x11e>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	05d9      	lsls	r1, r3, #23
 8004a2a:	d50d      	bpl.n	8004a48 <_scanf_i+0x180>
 8004a2c:	42bd      	cmp	r5, r7
 8004a2e:	d909      	bls.n	8004a44 <_scanf_i+0x17c>
 8004a30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a38:	4632      	mov	r2, r6
 8004a3a:	4650      	mov	r0, sl
 8004a3c:	4798      	blx	r3
 8004a3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004a42:	464d      	mov	r5, r9
 8004a44:	42bd      	cmp	r5, r7
 8004a46:	d028      	beq.n	8004a9a <_scanf_i+0x1d2>
 8004a48:	6822      	ldr	r2, [r4, #0]
 8004a4a:	f012 0210 	ands.w	r2, r2, #16
 8004a4e:	d113      	bne.n	8004a78 <_scanf_i+0x1b0>
 8004a50:	702a      	strb	r2, [r5, #0]
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	9e01      	ldr	r6, [sp, #4]
 8004a56:	4639      	mov	r1, r7
 8004a58:	4650      	mov	r0, sl
 8004a5a:	47b0      	blx	r6
 8004a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a60:	6821      	ldr	r1, [r4, #0]
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	f8c8 2000 	str.w	r2, [r8]
 8004a68:	f011 0f20 	tst.w	r1, #32
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	d00f      	beq.n	8004a90 <_scanf_i+0x1c8>
 8004a70:	6018      	str	r0, [r3, #0]
 8004a72:	68e3      	ldr	r3, [r4, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60e3      	str	r3, [r4, #12]
 8004a78:	6923      	ldr	r3, [r4, #16]
 8004a7a:	1bed      	subs	r5, r5, r7
 8004a7c:	445d      	add	r5, fp
 8004a7e:	442b      	add	r3, r5
 8004a80:	6123      	str	r3, [r4, #16]
 8004a82:	2000      	movs	r0, #0
 8004a84:	b007      	add	sp, #28
 8004a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8a:	f04f 0b00 	mov.w	fp, #0
 8004a8e:	e7ca      	b.n	8004a26 <_scanf_i+0x15e>
 8004a90:	07ca      	lsls	r2, r1, #31
 8004a92:	bf4c      	ite	mi
 8004a94:	8018      	strhmi	r0, [r3, #0]
 8004a96:	6018      	strpl	r0, [r3, #0]
 8004a98:	e7eb      	b.n	8004a72 <_scanf_i+0x1aa>
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	e7f2      	b.n	8004a84 <_scanf_i+0x1bc>
 8004a9e:	bf00      	nop
 8004aa0:	08005384 	.word	0x08005384
 8004aa4:	080052cd 	.word	0x080052cd
 8004aa8:	080051e5 	.word	0x080051e5
 8004aac:	080053eb 	.word	0x080053eb

08004ab0 <__sflush_r>:
 8004ab0:	898a      	ldrh	r2, [r1, #12]
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	0710      	lsls	r0, r2, #28
 8004aba:	460c      	mov	r4, r1
 8004abc:	d458      	bmi.n	8004b70 <__sflush_r+0xc0>
 8004abe:	684b      	ldr	r3, [r1, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	dc05      	bgt.n	8004ad0 <__sflush_r+0x20>
 8004ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dc02      	bgt.n	8004ad0 <__sflush_r+0x20>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad2:	2e00      	cmp	r6, #0
 8004ad4:	d0f9      	beq.n	8004aca <__sflush_r+0x1a>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004adc:	682f      	ldr	r7, [r5, #0]
 8004ade:	6a21      	ldr	r1, [r4, #32]
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	d032      	beq.n	8004b4a <__sflush_r+0x9a>
 8004ae4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	075a      	lsls	r2, r3, #29
 8004aea:	d505      	bpl.n	8004af8 <__sflush_r+0x48>
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	1ac0      	subs	r0, r0, r3
 8004af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af2:	b10b      	cbz	r3, 8004af8 <__sflush_r+0x48>
 8004af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af6:	1ac0      	subs	r0, r0, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	4602      	mov	r2, r0
 8004afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004afe:	6a21      	ldr	r1, [r4, #32]
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b0      	blx	r6
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	d106      	bne.n	8004b18 <__sflush_r+0x68>
 8004b0a:	6829      	ldr	r1, [r5, #0]
 8004b0c:	291d      	cmp	r1, #29
 8004b0e:	d82b      	bhi.n	8004b68 <__sflush_r+0xb8>
 8004b10:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <__sflush_r+0x108>)
 8004b12:	410a      	asrs	r2, r1
 8004b14:	07d6      	lsls	r6, r2, #31
 8004b16:	d427      	bmi.n	8004b68 <__sflush_r+0xb8>
 8004b18:	2200      	movs	r2, #0
 8004b1a:	6062      	str	r2, [r4, #4]
 8004b1c:	04d9      	lsls	r1, r3, #19
 8004b1e:	6922      	ldr	r2, [r4, #16]
 8004b20:	6022      	str	r2, [r4, #0]
 8004b22:	d504      	bpl.n	8004b2e <__sflush_r+0x7e>
 8004b24:	1c42      	adds	r2, r0, #1
 8004b26:	d101      	bne.n	8004b2c <__sflush_r+0x7c>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b903      	cbnz	r3, 8004b2e <__sflush_r+0x7e>
 8004b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8004b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b30:	602f      	str	r7, [r5, #0]
 8004b32:	2900      	cmp	r1, #0
 8004b34:	d0c9      	beq.n	8004aca <__sflush_r+0x1a>
 8004b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b3a:	4299      	cmp	r1, r3
 8004b3c:	d002      	beq.n	8004b44 <__sflush_r+0x94>
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f7fe ff86 	bl	8003a50 <_free_r>
 8004b44:	2000      	movs	r0, #0
 8004b46:	6360      	str	r0, [r4, #52]	; 0x34
 8004b48:	e7c0      	b.n	8004acc <__sflush_r+0x1c>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b0      	blx	r6
 8004b50:	1c41      	adds	r1, r0, #1
 8004b52:	d1c8      	bne.n	8004ae6 <__sflush_r+0x36>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0c5      	beq.n	8004ae6 <__sflush_r+0x36>
 8004b5a:	2b1d      	cmp	r3, #29
 8004b5c:	d001      	beq.n	8004b62 <__sflush_r+0xb2>
 8004b5e:	2b16      	cmp	r3, #22
 8004b60:	d101      	bne.n	8004b66 <__sflush_r+0xb6>
 8004b62:	602f      	str	r7, [r5, #0]
 8004b64:	e7b1      	b.n	8004aca <__sflush_r+0x1a>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	e7ad      	b.n	8004acc <__sflush_r+0x1c>
 8004b70:	690f      	ldr	r7, [r1, #16]
 8004b72:	2f00      	cmp	r7, #0
 8004b74:	d0a9      	beq.n	8004aca <__sflush_r+0x1a>
 8004b76:	0793      	lsls	r3, r2, #30
 8004b78:	680e      	ldr	r6, [r1, #0]
 8004b7a:	bf08      	it	eq
 8004b7c:	694b      	ldreq	r3, [r1, #20]
 8004b7e:	600f      	str	r7, [r1, #0]
 8004b80:	bf18      	it	ne
 8004b82:	2300      	movne	r3, #0
 8004b84:	eba6 0807 	sub.w	r8, r6, r7
 8004b88:	608b      	str	r3, [r1, #8]
 8004b8a:	f1b8 0f00 	cmp.w	r8, #0
 8004b8e:	dd9c      	ble.n	8004aca <__sflush_r+0x1a>
 8004b90:	6a21      	ldr	r1, [r4, #32]
 8004b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b94:	4643      	mov	r3, r8
 8004b96:	463a      	mov	r2, r7
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b0      	blx	r6
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	dc06      	bgt.n	8004bae <__sflush_r+0xfe>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	e78e      	b.n	8004acc <__sflush_r+0x1c>
 8004bae:	4407      	add	r7, r0
 8004bb0:	eba8 0800 	sub.w	r8, r8, r0
 8004bb4:	e7e9      	b.n	8004b8a <__sflush_r+0xda>
 8004bb6:	bf00      	nop
 8004bb8:	dfbffffe 	.word	0xdfbffffe

08004bbc <_fflush_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	690b      	ldr	r3, [r1, #16]
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	b913      	cbnz	r3, 8004bcc <_fflush_r+0x10>
 8004bc6:	2500      	movs	r5, #0
 8004bc8:	4628      	mov	r0, r5
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	b118      	cbz	r0, 8004bd6 <_fflush_r+0x1a>
 8004bce:	6a03      	ldr	r3, [r0, #32]
 8004bd0:	b90b      	cbnz	r3, 8004bd6 <_fflush_r+0x1a>
 8004bd2:	f7fe fc5d 	bl	8003490 <__sinit>
 8004bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f3      	beq.n	8004bc6 <_fflush_r+0xa>
 8004bde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004be0:	07d0      	lsls	r0, r2, #31
 8004be2:	d404      	bmi.n	8004bee <_fflush_r+0x32>
 8004be4:	0599      	lsls	r1, r3, #22
 8004be6:	d402      	bmi.n	8004bee <_fflush_r+0x32>
 8004be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bea:	f7fe ff26 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8004bee:	4628      	mov	r0, r5
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f7ff ff5d 	bl	8004ab0 <__sflush_r>
 8004bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf8:	07da      	lsls	r2, r3, #31
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	d4e4      	bmi.n	8004bc8 <_fflush_r+0xc>
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	059b      	lsls	r3, r3, #22
 8004c02:	d4e1      	bmi.n	8004bc8 <_fflush_r+0xc>
 8004c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c06:	f7fe ff19 	bl	8003a3c <__retarget_lock_release_recursive>
 8004c0a:	e7dd      	b.n	8004bc8 <_fflush_r+0xc>

08004c0c <__swhatbuf_r>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	460c      	mov	r4, r1
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2900      	cmp	r1, #0
 8004c16:	b096      	sub	sp, #88	; 0x58
 8004c18:	4615      	mov	r5, r2
 8004c1a:	461e      	mov	r6, r3
 8004c1c:	da0d      	bge.n	8004c3a <__swhatbuf_r+0x2e>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	bf0c      	ite	eq
 8004c2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c2e:	2340      	movne	r3, #64	; 0x40
 8004c30:	2000      	movs	r0, #0
 8004c32:	6031      	str	r1, [r6, #0]
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	b016      	add	sp, #88	; 0x58
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
 8004c3a:	466a      	mov	r2, sp
 8004c3c:	f000 f9e0 	bl	8005000 <_fstat_r>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	dbec      	blt.n	8004c1e <__swhatbuf_r+0x12>
 8004c44:	9901      	ldr	r1, [sp, #4]
 8004c46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004c4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004c4e:	4259      	negs	r1, r3
 8004c50:	4159      	adcs	r1, r3
 8004c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c56:	e7eb      	b.n	8004c30 <__swhatbuf_r+0x24>

08004c58 <__smakebuf_r>:
 8004c58:	898b      	ldrh	r3, [r1, #12]
 8004c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c5c:	079d      	lsls	r5, r3, #30
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	d507      	bpl.n	8004c74 <__smakebuf_r+0x1c>
 8004c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6163      	str	r3, [r4, #20]
 8004c70:	b002      	add	sp, #8
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	ab01      	add	r3, sp, #4
 8004c76:	466a      	mov	r2, sp
 8004c78:	f7ff ffc8 	bl	8004c0c <__swhatbuf_r>
 8004c7c:	9900      	ldr	r1, [sp, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7fe ff59 	bl	8003b38 <_malloc_r>
 8004c86:	b948      	cbnz	r0, 8004c9c <__smakebuf_r+0x44>
 8004c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8c:	059a      	lsls	r2, r3, #22
 8004c8e:	d4ef      	bmi.n	8004c70 <__smakebuf_r+0x18>
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	e7e3      	b.n	8004c64 <__smakebuf_r+0xc>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	6020      	str	r0, [r4, #0]
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	9b00      	ldr	r3, [sp, #0]
 8004ca8:	6163      	str	r3, [r4, #20]
 8004caa:	9b01      	ldr	r3, [sp, #4]
 8004cac:	6120      	str	r0, [r4, #16]
 8004cae:	b15b      	cbz	r3, 8004cc8 <__smakebuf_r+0x70>
 8004cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f000 f9b5 	bl	8005024 <_isatty_r>
 8004cba:	b128      	cbz	r0, 8004cc8 <__smakebuf_r+0x70>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	431d      	orrs	r5, r3
 8004ccc:	81a5      	strh	r5, [r4, #12]
 8004cce:	e7cf      	b.n	8004c70 <__smakebuf_r+0x18>

08004cd0 <lflush>:
 8004cd0:	898b      	ldrh	r3, [r1, #12]
 8004cd2:	f003 0309 	and.w	r3, r3, #9
 8004cd6:	2b09      	cmp	r3, #9
 8004cd8:	d103      	bne.n	8004ce2 <lflush+0x12>
 8004cda:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <lflush+0x18>)
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f7ff bf6d 	b.w	8004bbc <_fflush_r>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000064 	.word	0x20000064

08004cec <__srefill_r>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	460c      	mov	r4, r1
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	b118      	cbz	r0, 8004cfc <__srefill_r+0x10>
 8004cf4:	6a03      	ldr	r3, [r0, #32]
 8004cf6:	b90b      	cbnz	r3, 8004cfc <__srefill_r+0x10>
 8004cf8:	f7fe fbca 	bl	8003490 <__sinit>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6063      	str	r3, [r4, #4]
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d06:	069e      	lsls	r6, r3, #26
 8004d08:	d502      	bpl.n	8004d10 <__srefill_r+0x24>
 8004d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0e:	e05c      	b.n	8004dca <__srefill_r+0xde>
 8004d10:	0758      	lsls	r0, r3, #29
 8004d12:	d448      	bmi.n	8004da6 <__srefill_r+0xba>
 8004d14:	06d9      	lsls	r1, r3, #27
 8004d16:	d405      	bmi.n	8004d24 <__srefill_r+0x38>
 8004d18:	2309      	movs	r3, #9
 8004d1a:	602b      	str	r3, [r5, #0]
 8004d1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	e7f2      	b.n	8004d0a <__srefill_r+0x1e>
 8004d24:	071a      	lsls	r2, r3, #28
 8004d26:	d50b      	bpl.n	8004d40 <__srefill_r+0x54>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f7ff ff46 	bl	8004bbc <_fflush_r>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d1ea      	bne.n	8004d0a <__srefill_r+0x1e>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	60a0      	str	r0, [r4, #8]
 8004d38:	f023 0308 	bic.w	r3, r3, #8
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	61a0      	str	r0, [r4, #24]
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	f043 0304 	orr.w	r3, r3, #4
 8004d46:	81a3      	strh	r3, [r4, #12]
 8004d48:	6923      	ldr	r3, [r4, #16]
 8004d4a:	b91b      	cbnz	r3, 8004d54 <__srefill_r+0x68>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7ff ff82 	bl	8004c58 <__smakebuf_r>
 8004d54:	89a6      	ldrh	r6, [r4, #12]
 8004d56:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004d5a:	07b3      	lsls	r3, r6, #30
 8004d5c:	d00f      	beq.n	8004d7e <__srefill_r+0x92>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <__srefill_r+0xe4>)
 8004d62:	491c      	ldr	r1, [pc, #112]	; (8004dd4 <__srefill_r+0xe8>)
 8004d64:	481c      	ldr	r0, [pc, #112]	; (8004dd8 <__srefill_r+0xec>)
 8004d66:	81a3      	strh	r3, [r4, #12]
 8004d68:	f006 0609 	and.w	r6, r6, #9
 8004d6c:	f7fe fba8 	bl	80034c0 <_fwalk_sglue>
 8004d70:	2e09      	cmp	r6, #9
 8004d72:	81a7      	strh	r7, [r4, #12]
 8004d74:	d103      	bne.n	8004d7e <__srefill_r+0x92>
 8004d76:	4621      	mov	r1, r4
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f7ff fe99 	bl	8004ab0 <__sflush_r>
 8004d7e:	6922      	ldr	r2, [r4, #16]
 8004d80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d82:	6963      	ldr	r3, [r4, #20]
 8004d84:	6a21      	ldr	r1, [r4, #32]
 8004d86:	6022      	str	r2, [r4, #0]
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b0      	blx	r6
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	6060      	str	r0, [r4, #4]
 8004d90:	dc1c      	bgt.n	8004dcc <__srefill_r+0xe0>
 8004d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d96:	bf17      	itett	ne
 8004d98:	2200      	movne	r2, #0
 8004d9a:	f043 0320 	orreq.w	r3, r3, #32
 8004d9e:	6062      	strne	r2, [r4, #4]
 8004da0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004da4:	e7bc      	b.n	8004d20 <__srefill_r+0x34>
 8004da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d0cd      	beq.n	8004d48 <__srefill_r+0x5c>
 8004dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db0:	4299      	cmp	r1, r3
 8004db2:	d002      	beq.n	8004dba <__srefill_r+0xce>
 8004db4:	4628      	mov	r0, r5
 8004db6:	f7fe fe4b 	bl	8003a50 <_free_r>
 8004dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0c0      	beq.n	8004d48 <__srefill_r+0x5c>
 8004dc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e7fc      	b.n	8004dca <__srefill_r+0xde>
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	08004cd1 	.word	0x08004cd1
 8004dd8:	20000018 	.word	0x20000018

08004ddc <__sccl>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	780b      	ldrb	r3, [r1, #0]
 8004de0:	4604      	mov	r4, r0
 8004de2:	2b5e      	cmp	r3, #94	; 0x5e
 8004de4:	bf0b      	itete	eq
 8004de6:	784b      	ldrbeq	r3, [r1, #1]
 8004de8:	1c4a      	addne	r2, r1, #1
 8004dea:	1c8a      	addeq	r2, r1, #2
 8004dec:	2100      	movne	r1, #0
 8004dee:	bf08      	it	eq
 8004df0:	2101      	moveq	r1, #1
 8004df2:	3801      	subs	r0, #1
 8004df4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004df8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004dfc:	42a8      	cmp	r0, r5
 8004dfe:	d1fb      	bne.n	8004df8 <__sccl+0x1c>
 8004e00:	b90b      	cbnz	r3, 8004e06 <__sccl+0x2a>
 8004e02:	1e50      	subs	r0, r2, #1
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
 8004e06:	f081 0101 	eor.w	r1, r1, #1
 8004e0a:	54e1      	strb	r1, [r4, r3]
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4602      	mov	r2, r0
 8004e10:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e14:	2d2d      	cmp	r5, #45	; 0x2d
 8004e16:	d005      	beq.n	8004e24 <__sccl+0x48>
 8004e18:	2d5d      	cmp	r5, #93	; 0x5d
 8004e1a:	d016      	beq.n	8004e4a <__sccl+0x6e>
 8004e1c:	2d00      	cmp	r5, #0
 8004e1e:	d0f1      	beq.n	8004e04 <__sccl+0x28>
 8004e20:	462b      	mov	r3, r5
 8004e22:	e7f2      	b.n	8004e0a <__sccl+0x2e>
 8004e24:	7846      	ldrb	r6, [r0, #1]
 8004e26:	2e5d      	cmp	r6, #93	; 0x5d
 8004e28:	d0fa      	beq.n	8004e20 <__sccl+0x44>
 8004e2a:	42b3      	cmp	r3, r6
 8004e2c:	dcf8      	bgt.n	8004e20 <__sccl+0x44>
 8004e2e:	3002      	adds	r0, #2
 8004e30:	461a      	mov	r2, r3
 8004e32:	3201      	adds	r2, #1
 8004e34:	4296      	cmp	r6, r2
 8004e36:	54a1      	strb	r1, [r4, r2]
 8004e38:	dcfb      	bgt.n	8004e32 <__sccl+0x56>
 8004e3a:	1af2      	subs	r2, r6, r3
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	1c5d      	adds	r5, r3, #1
 8004e40:	42b3      	cmp	r3, r6
 8004e42:	bfa8      	it	ge
 8004e44:	2200      	movge	r2, #0
 8004e46:	18ab      	adds	r3, r5, r2
 8004e48:	e7e1      	b.n	8004e0e <__sccl+0x32>
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	e7da      	b.n	8004e04 <__sccl+0x28>

08004e4e <__submore>:
 8004e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e52:	460c      	mov	r4, r1
 8004e54:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004e56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e5a:	4299      	cmp	r1, r3
 8004e5c:	d11d      	bne.n	8004e9a <__submore+0x4c>
 8004e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e62:	f7fe fe69 	bl	8003b38 <_malloc_r>
 8004e66:	b918      	cbnz	r0, 8004e70 <__submore+0x22>
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e74:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e76:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004e7a:	6360      	str	r0, [r4, #52]	; 0x34
 8004e7c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004e80:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e84:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004e88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e8c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004e90:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004e94:	6020      	str	r0, [r4, #0]
 8004e96:	2000      	movs	r0, #0
 8004e98:	e7e8      	b.n	8004e6c <__submore+0x1e>
 8004e9a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004e9c:	0077      	lsls	r7, r6, #1
 8004e9e:	463a      	mov	r2, r7
 8004ea0:	f000 f8ee 	bl	8005080 <_realloc_r>
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d0de      	beq.n	8004e68 <__submore+0x1a>
 8004eaa:	eb00 0806 	add.w	r8, r0, r6
 8004eae:	4601      	mov	r1, r0
 8004eb0:	4632      	mov	r2, r6
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	f000 f8d6 	bl	8005064 <memcpy>
 8004eb8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004ebc:	f8c4 8000 	str.w	r8, [r4]
 8004ec0:	e7e9      	b.n	8004e96 <__submore+0x48>

08004ec2 <_ungetc_r>:
 8004ec2:	b570      	push	{r4, r5, r6, lr}
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	1c4a      	adds	r2, r1, #1
 8004ec8:	4606      	mov	r6, r0
 8004eca:	460d      	mov	r5, r1
 8004ecc:	d103      	bne.n	8004ed6 <_ungetc_r+0x14>
 8004ece:	f04f 35ff 	mov.w	r5, #4294967295
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	bd70      	pop	{r4, r5, r6, pc}
 8004ed6:	b118      	cbz	r0, 8004ee0 <_ungetc_r+0x1e>
 8004ed8:	6a03      	ldr	r3, [r0, #32]
 8004eda:	b90b      	cbnz	r3, 8004ee0 <_ungetc_r+0x1e>
 8004edc:	f7fe fad8 	bl	8003490 <__sinit>
 8004ee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ee2:	07db      	lsls	r3, r3, #31
 8004ee4:	d405      	bmi.n	8004ef2 <_ungetc_r+0x30>
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	0598      	lsls	r0, r3, #22
 8004eea:	d402      	bmi.n	8004ef2 <_ungetc_r+0x30>
 8004eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eee:	f7fe fda4 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8004ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ef6:	f023 0320 	bic.w	r3, r3, #32
 8004efa:	0759      	lsls	r1, r3, #29
 8004efc:	81a3      	strh	r3, [r4, #12]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	d423      	bmi.n	8004f4a <_ungetc_r+0x88>
 8004f02:	06d3      	lsls	r3, r2, #27
 8004f04:	d409      	bmi.n	8004f1a <_ungetc_r+0x58>
 8004f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f08:	07dd      	lsls	r5, r3, #31
 8004f0a:	d4e0      	bmi.n	8004ece <_ungetc_r+0xc>
 8004f0c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004f10:	d1dd      	bne.n	8004ece <_ungetc_r+0xc>
 8004f12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f14:	f7fe fd92 	bl	8003a3c <__retarget_lock_release_recursive>
 8004f18:	e7d9      	b.n	8004ece <_ungetc_r+0xc>
 8004f1a:	0710      	lsls	r0, r2, #28
 8004f1c:	d511      	bpl.n	8004f42 <_ungetc_r+0x80>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4630      	mov	r0, r6
 8004f22:	f7ff fe4b 	bl	8004bbc <_fflush_r>
 8004f26:	b130      	cbz	r0, 8004f36 <_ungetc_r+0x74>
 8004f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f2a:	07d9      	lsls	r1, r3, #31
 8004f2c:	d4cf      	bmi.n	8004ece <_ungetc_r+0xc>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004f34:	e7ec      	b.n	8004f10 <_ungetc_r+0x4e>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	60a0      	str	r0, [r4, #8]
 8004f3a:	f023 0308 	bic.w	r3, r3, #8
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	61a0      	str	r0, [r4, #24]
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f043 0304 	orr.w	r3, r3, #4
 8004f48:	81a3      	strh	r3, [r4, #12]
 8004f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f4c:	6862      	ldr	r2, [r4, #4]
 8004f4e:	b2ed      	uxtb	r5, r5
 8004f50:	b1d3      	cbz	r3, 8004f88 <_ungetc_r+0xc6>
 8004f52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f54:	4293      	cmp	r3, r2
 8004f56:	dc05      	bgt.n	8004f64 <_ungetc_r+0xa2>
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f7ff ff77 	bl	8004e4e <__submore>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d1e1      	bne.n	8004f28 <_ungetc_r+0x66>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	1e5a      	subs	r2, r3, #1
 8004f68:	6022      	str	r2, [r4, #0]
 8004f6a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004f6e:	6863      	ldr	r3, [r4, #4]
 8004f70:	3301      	adds	r3, #1
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f76:	07da      	lsls	r2, r3, #31
 8004f78:	d4ab      	bmi.n	8004ed2 <_ungetc_r+0x10>
 8004f7a:	89a3      	ldrh	r3, [r4, #12]
 8004f7c:	059b      	lsls	r3, r3, #22
 8004f7e:	d4a8      	bmi.n	8004ed2 <_ungetc_r+0x10>
 8004f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f82:	f7fe fd5b 	bl	8003a3c <__retarget_lock_release_recursive>
 8004f86:	e7a4      	b.n	8004ed2 <_ungetc_r+0x10>
 8004f88:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004f8a:	6920      	ldr	r0, [r4, #16]
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	f001 0101 	and.w	r1, r1, #1
 8004f92:	b160      	cbz	r0, 8004fae <_ungetc_r+0xec>
 8004f94:	4298      	cmp	r0, r3
 8004f96:	d20a      	bcs.n	8004fae <_ungetc_r+0xec>
 8004f98:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004f9c:	42a8      	cmp	r0, r5
 8004f9e:	d106      	bne.n	8004fae <_ungetc_r+0xec>
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	3201      	adds	r2, #1
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	6062      	str	r2, [r4, #4]
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	d192      	bne.n	8004ed2 <_ungetc_r+0x10>
 8004fac:	e7e5      	b.n	8004f7a <_ungetc_r+0xb8>
 8004fae:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fb6:	6363      	str	r3, [r4, #52]	; 0x34
 8004fb8:	2303      	movs	r3, #3
 8004fba:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	e7ee      	b.n	8004fa8 <_ungetc_r+0xe6>

08004fca <memmove>:
 8004fca:	4288      	cmp	r0, r1
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	eb01 0402 	add.w	r4, r1, r2
 8004fd2:	d902      	bls.n	8004fda <memmove+0x10>
 8004fd4:	4284      	cmp	r4, r0
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	d807      	bhi.n	8004fea <memmove+0x20>
 8004fda:	1e43      	subs	r3, r0, #1
 8004fdc:	42a1      	cmp	r1, r4
 8004fde:	d008      	beq.n	8004ff2 <memmove+0x28>
 8004fe0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fe4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fe8:	e7f8      	b.n	8004fdc <memmove+0x12>
 8004fea:	4402      	add	r2, r0
 8004fec:	4601      	mov	r1, r0
 8004fee:	428a      	cmp	r2, r1
 8004ff0:	d100      	bne.n	8004ff4 <memmove+0x2a>
 8004ff2:	bd10      	pop	{r4, pc}
 8004ff4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ff8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ffc:	e7f7      	b.n	8004fee <memmove+0x24>
	...

08005000 <_fstat_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4d07      	ldr	r5, [pc, #28]	; (8005020 <_fstat_r+0x20>)
 8005004:	2300      	movs	r3, #0
 8005006:	4604      	mov	r4, r0
 8005008:	4608      	mov	r0, r1
 800500a:	4611      	mov	r1, r2
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	f7fb fee0 	bl	8000dd2 <_fstat>
 8005012:	1c43      	adds	r3, r0, #1
 8005014:	d102      	bne.n	800501c <_fstat_r+0x1c>
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	b103      	cbz	r3, 800501c <_fstat_r+0x1c>
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	bd38      	pop	{r3, r4, r5, pc}
 800501e:	bf00      	nop
 8005020:	2000027c 	.word	0x2000027c

08005024 <_isatty_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4d06      	ldr	r5, [pc, #24]	; (8005040 <_isatty_r+0x1c>)
 8005028:	2300      	movs	r3, #0
 800502a:	4604      	mov	r4, r0
 800502c:	4608      	mov	r0, r1
 800502e:	602b      	str	r3, [r5, #0]
 8005030:	f7fb fedf 	bl	8000df2 <_isatty>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d102      	bne.n	800503e <_isatty_r+0x1a>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	b103      	cbz	r3, 800503e <_isatty_r+0x1a>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	2000027c 	.word	0x2000027c

08005044 <_sbrk_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d06      	ldr	r5, [pc, #24]	; (8005060 <_sbrk_r+0x1c>)
 8005048:	2300      	movs	r3, #0
 800504a:	4604      	mov	r4, r0
 800504c:	4608      	mov	r0, r1
 800504e:	602b      	str	r3, [r5, #0]
 8005050:	f7fb fee8 	bl	8000e24 <_sbrk>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_sbrk_r+0x1a>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	b103      	cbz	r3, 800505e <_sbrk_r+0x1a>
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	2000027c 	.word	0x2000027c

08005064 <memcpy>:
 8005064:	440a      	add	r2, r1
 8005066:	4291      	cmp	r1, r2
 8005068:	f100 33ff 	add.w	r3, r0, #4294967295
 800506c:	d100      	bne.n	8005070 <memcpy+0xc>
 800506e:	4770      	bx	lr
 8005070:	b510      	push	{r4, lr}
 8005072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800507a:	4291      	cmp	r1, r2
 800507c:	d1f9      	bne.n	8005072 <memcpy+0xe>
 800507e:	bd10      	pop	{r4, pc}

08005080 <_realloc_r>:
 8005080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005084:	4680      	mov	r8, r0
 8005086:	4614      	mov	r4, r2
 8005088:	460e      	mov	r6, r1
 800508a:	b921      	cbnz	r1, 8005096 <_realloc_r+0x16>
 800508c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005090:	4611      	mov	r1, r2
 8005092:	f7fe bd51 	b.w	8003b38 <_malloc_r>
 8005096:	b92a      	cbnz	r2, 80050a4 <_realloc_r+0x24>
 8005098:	f7fe fcda 	bl	8003a50 <_free_r>
 800509c:	4625      	mov	r5, r4
 800509e:	4628      	mov	r0, r5
 80050a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a4:	f000 f914 	bl	80052d0 <_malloc_usable_size_r>
 80050a8:	4284      	cmp	r4, r0
 80050aa:	4607      	mov	r7, r0
 80050ac:	d802      	bhi.n	80050b4 <_realloc_r+0x34>
 80050ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050b2:	d812      	bhi.n	80050da <_realloc_r+0x5a>
 80050b4:	4621      	mov	r1, r4
 80050b6:	4640      	mov	r0, r8
 80050b8:	f7fe fd3e 	bl	8003b38 <_malloc_r>
 80050bc:	4605      	mov	r5, r0
 80050be:	2800      	cmp	r0, #0
 80050c0:	d0ed      	beq.n	800509e <_realloc_r+0x1e>
 80050c2:	42bc      	cmp	r4, r7
 80050c4:	4622      	mov	r2, r4
 80050c6:	4631      	mov	r1, r6
 80050c8:	bf28      	it	cs
 80050ca:	463a      	movcs	r2, r7
 80050cc:	f7ff ffca 	bl	8005064 <memcpy>
 80050d0:	4631      	mov	r1, r6
 80050d2:	4640      	mov	r0, r8
 80050d4:	f7fe fcbc 	bl	8003a50 <_free_r>
 80050d8:	e7e1      	b.n	800509e <_realloc_r+0x1e>
 80050da:	4635      	mov	r5, r6
 80050dc:	e7df      	b.n	800509e <_realloc_r+0x1e>
	...

080050e0 <_strtol_l.constprop.0>:
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e6:	d001      	beq.n	80050ec <_strtol_l.constprop.0+0xc>
 80050e8:	2b24      	cmp	r3, #36	; 0x24
 80050ea:	d906      	bls.n	80050fa <_strtol_l.constprop.0+0x1a>
 80050ec:	f7fe fc7a 	bl	80039e4 <__errno>
 80050f0:	2316      	movs	r3, #22
 80050f2:	6003      	str	r3, [r0, #0]
 80050f4:	2000      	movs	r0, #0
 80050f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80051e0 <_strtol_l.constprop.0+0x100>
 80050fe:	460d      	mov	r5, r1
 8005100:	462e      	mov	r6, r5
 8005102:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005106:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800510a:	f017 0708 	ands.w	r7, r7, #8
 800510e:	d1f7      	bne.n	8005100 <_strtol_l.constprop.0+0x20>
 8005110:	2c2d      	cmp	r4, #45	; 0x2d
 8005112:	d132      	bne.n	800517a <_strtol_l.constprop.0+0x9a>
 8005114:	782c      	ldrb	r4, [r5, #0]
 8005116:	2701      	movs	r7, #1
 8005118:	1cb5      	adds	r5, r6, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d05b      	beq.n	80051d6 <_strtol_l.constprop.0+0xf6>
 800511e:	2b10      	cmp	r3, #16
 8005120:	d109      	bne.n	8005136 <_strtol_l.constprop.0+0x56>
 8005122:	2c30      	cmp	r4, #48	; 0x30
 8005124:	d107      	bne.n	8005136 <_strtol_l.constprop.0+0x56>
 8005126:	782c      	ldrb	r4, [r5, #0]
 8005128:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800512c:	2c58      	cmp	r4, #88	; 0x58
 800512e:	d14d      	bne.n	80051cc <_strtol_l.constprop.0+0xec>
 8005130:	786c      	ldrb	r4, [r5, #1]
 8005132:	2310      	movs	r3, #16
 8005134:	3502      	adds	r5, #2
 8005136:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800513a:	f108 38ff 	add.w	r8, r8, #4294967295
 800513e:	f04f 0e00 	mov.w	lr, #0
 8005142:	fbb8 f9f3 	udiv	r9, r8, r3
 8005146:	4676      	mov	r6, lr
 8005148:	fb03 8a19 	mls	sl, r3, r9, r8
 800514c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005150:	f1bc 0f09 	cmp.w	ip, #9
 8005154:	d816      	bhi.n	8005184 <_strtol_l.constprop.0+0xa4>
 8005156:	4664      	mov	r4, ip
 8005158:	42a3      	cmp	r3, r4
 800515a:	dd24      	ble.n	80051a6 <_strtol_l.constprop.0+0xc6>
 800515c:	f1be 3fff 	cmp.w	lr, #4294967295
 8005160:	d008      	beq.n	8005174 <_strtol_l.constprop.0+0x94>
 8005162:	45b1      	cmp	r9, r6
 8005164:	d31c      	bcc.n	80051a0 <_strtol_l.constprop.0+0xc0>
 8005166:	d101      	bne.n	800516c <_strtol_l.constprop.0+0x8c>
 8005168:	45a2      	cmp	sl, r4
 800516a:	db19      	blt.n	80051a0 <_strtol_l.constprop.0+0xc0>
 800516c:	fb06 4603 	mla	r6, r6, r3, r4
 8005170:	f04f 0e01 	mov.w	lr, #1
 8005174:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005178:	e7e8      	b.n	800514c <_strtol_l.constprop.0+0x6c>
 800517a:	2c2b      	cmp	r4, #43	; 0x2b
 800517c:	bf04      	itt	eq
 800517e:	782c      	ldrbeq	r4, [r5, #0]
 8005180:	1cb5      	addeq	r5, r6, #2
 8005182:	e7ca      	b.n	800511a <_strtol_l.constprop.0+0x3a>
 8005184:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005188:	f1bc 0f19 	cmp.w	ip, #25
 800518c:	d801      	bhi.n	8005192 <_strtol_l.constprop.0+0xb2>
 800518e:	3c37      	subs	r4, #55	; 0x37
 8005190:	e7e2      	b.n	8005158 <_strtol_l.constprop.0+0x78>
 8005192:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005196:	f1bc 0f19 	cmp.w	ip, #25
 800519a:	d804      	bhi.n	80051a6 <_strtol_l.constprop.0+0xc6>
 800519c:	3c57      	subs	r4, #87	; 0x57
 800519e:	e7db      	b.n	8005158 <_strtol_l.constprop.0+0x78>
 80051a0:	f04f 3eff 	mov.w	lr, #4294967295
 80051a4:	e7e6      	b.n	8005174 <_strtol_l.constprop.0+0x94>
 80051a6:	f1be 3fff 	cmp.w	lr, #4294967295
 80051aa:	d105      	bne.n	80051b8 <_strtol_l.constprop.0+0xd8>
 80051ac:	2322      	movs	r3, #34	; 0x22
 80051ae:	6003      	str	r3, [r0, #0]
 80051b0:	4646      	mov	r6, r8
 80051b2:	b942      	cbnz	r2, 80051c6 <_strtol_l.constprop.0+0xe6>
 80051b4:	4630      	mov	r0, r6
 80051b6:	e79e      	b.n	80050f6 <_strtol_l.constprop.0+0x16>
 80051b8:	b107      	cbz	r7, 80051bc <_strtol_l.constprop.0+0xdc>
 80051ba:	4276      	negs	r6, r6
 80051bc:	2a00      	cmp	r2, #0
 80051be:	d0f9      	beq.n	80051b4 <_strtol_l.constprop.0+0xd4>
 80051c0:	f1be 0f00 	cmp.w	lr, #0
 80051c4:	d000      	beq.n	80051c8 <_strtol_l.constprop.0+0xe8>
 80051c6:	1e69      	subs	r1, r5, #1
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	e7f3      	b.n	80051b4 <_strtol_l.constprop.0+0xd4>
 80051cc:	2430      	movs	r4, #48	; 0x30
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1b1      	bne.n	8005136 <_strtol_l.constprop.0+0x56>
 80051d2:	2308      	movs	r3, #8
 80051d4:	e7af      	b.n	8005136 <_strtol_l.constprop.0+0x56>
 80051d6:	2c30      	cmp	r4, #48	; 0x30
 80051d8:	d0a5      	beq.n	8005126 <_strtol_l.constprop.0+0x46>
 80051da:	230a      	movs	r3, #10
 80051dc:	e7ab      	b.n	8005136 <_strtol_l.constprop.0+0x56>
 80051de:	bf00      	nop
 80051e0:	080053f7 	.word	0x080053f7

080051e4 <_strtol_r>:
 80051e4:	f7ff bf7c 	b.w	80050e0 <_strtol_l.constprop.0>

080051e8 <_strtoul_l.constprop.0>:
 80051e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051ec:	4f36      	ldr	r7, [pc, #216]	; (80052c8 <_strtoul_l.constprop.0+0xe0>)
 80051ee:	4686      	mov	lr, r0
 80051f0:	460d      	mov	r5, r1
 80051f2:	4628      	mov	r0, r5
 80051f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051f8:	5d3e      	ldrb	r6, [r7, r4]
 80051fa:	f016 0608 	ands.w	r6, r6, #8
 80051fe:	d1f8      	bne.n	80051f2 <_strtoul_l.constprop.0+0xa>
 8005200:	2c2d      	cmp	r4, #45	; 0x2d
 8005202:	d130      	bne.n	8005266 <_strtoul_l.constprop.0+0x7e>
 8005204:	782c      	ldrb	r4, [r5, #0]
 8005206:	2601      	movs	r6, #1
 8005208:	1c85      	adds	r5, r0, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d057      	beq.n	80052be <_strtoul_l.constprop.0+0xd6>
 800520e:	2b10      	cmp	r3, #16
 8005210:	d109      	bne.n	8005226 <_strtoul_l.constprop.0+0x3e>
 8005212:	2c30      	cmp	r4, #48	; 0x30
 8005214:	d107      	bne.n	8005226 <_strtoul_l.constprop.0+0x3e>
 8005216:	7828      	ldrb	r0, [r5, #0]
 8005218:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800521c:	2858      	cmp	r0, #88	; 0x58
 800521e:	d149      	bne.n	80052b4 <_strtoul_l.constprop.0+0xcc>
 8005220:	786c      	ldrb	r4, [r5, #1]
 8005222:	2310      	movs	r3, #16
 8005224:	3502      	adds	r5, #2
 8005226:	f04f 38ff 	mov.w	r8, #4294967295
 800522a:	2700      	movs	r7, #0
 800522c:	fbb8 f8f3 	udiv	r8, r8, r3
 8005230:	fb03 f908 	mul.w	r9, r3, r8
 8005234:	ea6f 0909 	mvn.w	r9, r9
 8005238:	4638      	mov	r0, r7
 800523a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800523e:	f1bc 0f09 	cmp.w	ip, #9
 8005242:	d815      	bhi.n	8005270 <_strtoul_l.constprop.0+0x88>
 8005244:	4664      	mov	r4, ip
 8005246:	42a3      	cmp	r3, r4
 8005248:	dd23      	ble.n	8005292 <_strtoul_l.constprop.0+0xaa>
 800524a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800524e:	d007      	beq.n	8005260 <_strtoul_l.constprop.0+0x78>
 8005250:	4580      	cmp	r8, r0
 8005252:	d31b      	bcc.n	800528c <_strtoul_l.constprop.0+0xa4>
 8005254:	d101      	bne.n	800525a <_strtoul_l.constprop.0+0x72>
 8005256:	45a1      	cmp	r9, r4
 8005258:	db18      	blt.n	800528c <_strtoul_l.constprop.0+0xa4>
 800525a:	fb00 4003 	mla	r0, r0, r3, r4
 800525e:	2701      	movs	r7, #1
 8005260:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005264:	e7e9      	b.n	800523a <_strtoul_l.constprop.0+0x52>
 8005266:	2c2b      	cmp	r4, #43	; 0x2b
 8005268:	bf04      	itt	eq
 800526a:	782c      	ldrbeq	r4, [r5, #0]
 800526c:	1c85      	addeq	r5, r0, #2
 800526e:	e7cc      	b.n	800520a <_strtoul_l.constprop.0+0x22>
 8005270:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005274:	f1bc 0f19 	cmp.w	ip, #25
 8005278:	d801      	bhi.n	800527e <_strtoul_l.constprop.0+0x96>
 800527a:	3c37      	subs	r4, #55	; 0x37
 800527c:	e7e3      	b.n	8005246 <_strtoul_l.constprop.0+0x5e>
 800527e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005282:	f1bc 0f19 	cmp.w	ip, #25
 8005286:	d804      	bhi.n	8005292 <_strtoul_l.constprop.0+0xaa>
 8005288:	3c57      	subs	r4, #87	; 0x57
 800528a:	e7dc      	b.n	8005246 <_strtoul_l.constprop.0+0x5e>
 800528c:	f04f 37ff 	mov.w	r7, #4294967295
 8005290:	e7e6      	b.n	8005260 <_strtoul_l.constprop.0+0x78>
 8005292:	1c7b      	adds	r3, r7, #1
 8005294:	d106      	bne.n	80052a4 <_strtoul_l.constprop.0+0xbc>
 8005296:	2322      	movs	r3, #34	; 0x22
 8005298:	f8ce 3000 	str.w	r3, [lr]
 800529c:	4638      	mov	r0, r7
 800529e:	b932      	cbnz	r2, 80052ae <_strtoul_l.constprop.0+0xc6>
 80052a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052a4:	b106      	cbz	r6, 80052a8 <_strtoul_l.constprop.0+0xc0>
 80052a6:	4240      	negs	r0, r0
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d0f9      	beq.n	80052a0 <_strtoul_l.constprop.0+0xb8>
 80052ac:	b107      	cbz	r7, 80052b0 <_strtoul_l.constprop.0+0xc8>
 80052ae:	1e69      	subs	r1, r5, #1
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	e7f5      	b.n	80052a0 <_strtoul_l.constprop.0+0xb8>
 80052b4:	2430      	movs	r4, #48	; 0x30
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1b5      	bne.n	8005226 <_strtoul_l.constprop.0+0x3e>
 80052ba:	2308      	movs	r3, #8
 80052bc:	e7b3      	b.n	8005226 <_strtoul_l.constprop.0+0x3e>
 80052be:	2c30      	cmp	r4, #48	; 0x30
 80052c0:	d0a9      	beq.n	8005216 <_strtoul_l.constprop.0+0x2e>
 80052c2:	230a      	movs	r3, #10
 80052c4:	e7af      	b.n	8005226 <_strtoul_l.constprop.0+0x3e>
 80052c6:	bf00      	nop
 80052c8:	080053f7 	.word	0x080053f7

080052cc <_strtoul_r>:
 80052cc:	f7ff bf8c 	b.w	80051e8 <_strtoul_l.constprop.0>

080052d0 <_malloc_usable_size_r>:
 80052d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d4:	1f18      	subs	r0, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bfbc      	itt	lt
 80052da:	580b      	ldrlt	r3, [r1, r0]
 80052dc:	18c0      	addlt	r0, r0, r3
 80052de:	4770      	bx	lr

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
